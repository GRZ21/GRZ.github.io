<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PTA-Baisc 1011-1015</title>
    <link href="/2021/10/14/PTA-Baisc1011-1015/"/>
    <url>/2021/10/14/PTA-Baisc1011-1015/</url>
    
    <content type="html"><![CDATA[<p>以下是PTA Basic等级1011-1015的我的解答，分值90/100。</p><span id="more"></span><h1 id="1011（15-15）："><a href="#1011（15-15）：" class="headerlink" title="1011（15/15）："></a>1011（15/15）：</h1><p>给定区间 [−2^31,2^31] 内的 3 个整数 <em>A</em>、<em>B</em> 和 <em>C</em>，请判断 <em>A</em>+<em>B</em> 是否大于 <em>C</em>。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第 1 行给出正整数 <em>T</em> (≤10)，是测试用例的个数。随后给出 <em>T</em> 组测试用例，每组占一行，顺序给出 <em>A</em>、<em>B</em> 和 <em>C</em>。整数间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每组测试用例，在一行中输出 <code>Case #X: true</code> 如果 <em>A</em>+<em>B</em>&gt;<em>C</em>，否则输出 <code>Case #X: false</code>，其中 <code>X</code> 是测试用例的编号（从 1 开始）。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">4</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-number">2147483647</span> <span class="hljs-number">0</span> <span class="hljs-number">2147483646</span><br><span class="hljs-number">0</span> -<span class="hljs-number">2147483648</span> -<span class="hljs-number">2147483647</span><br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cal"><span class="hljs-keyword">Case</span> <span class="hljs-string">#1</span>: <span class="hljs-literal">false</span><br><span class="hljs-keyword">Case</span> <span class="hljs-string">#2</span>: <span class="hljs-literal">true</span><br><span class="hljs-keyword">Case</span> <span class="hljs-string">#3</span>: <span class="hljs-literal">true</span><br><span class="hljs-keyword">Case</span> <span class="hljs-string">#4</span>: <span class="hljs-literal">false</span><br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">long</span> a, b, c;<br><span class="hljs-keyword">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>cout &lt;&lt; <span class="hljs-string">&quot;Case #&quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;: &quot;</span>;<br><span class="hljs-keyword">if</span> (a + b &gt; c)  <span class="hljs-comment">//判断</span><br>cout &lt;&lt; <span class="hljs-string">&quot;true&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;false&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="心得与解析："><a href="#心得与解析：" class="headerlink" title="心得与解析："></a>心得与解析：</h2><p>15分的送分题……没啥好说的</p><hr><h1 id="1012（20-20）："><a href="#1012（20-20）：" class="headerlink" title="1012（20/20）："></a>1012（20/20）：</h1><p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p><ul><li><em>A</em>1 = 能被 5 整除的数字中所有偶数的和；</li><li><em>A</em>2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 <em>n</em>1−<em>n</em>2+<em>n</em>3−<em>n</em>4⋯；</li><li><em>A</em>3 = 被 5 除后余 2 的数字的个数；</li><li><em>A</em>4 = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li><li><em>A</em>5 = 被 5 除后余 4 的数字中最大数字。</li></ul><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em>，随后给出 <em>N</em> 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对给定的 <em>N</em> 个正整数，按题目要求计算 <em>A</em>1~<em>A</em>5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p><p>若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">13<span class="hljs-number"> 1 </span>2<span class="hljs-number"> 3 </span>4<span class="hljs-number"> 5 </span>6<span class="hljs-number"> 7 </span>8<span class="hljs-number"> 9 </span>10<span class="hljs-number"> 20 </span>16 18<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">30 11 2 9</span>.<span class="hljs-number">7</span> <span class="hljs-number">9</span><br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">8<span class="hljs-number"> 1 </span>2<span class="hljs-number"> 4 </span>5<span class="hljs-number"> 6 </span>7<span class="hljs-number"> 9 </span>16<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">N</span> <span class="hljs-number">11</span> <span class="hljs-number">2</span> <span class="hljs-built_in">N</span> <span class="hljs-number">9</span><br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答：-1"><a href="#解答：-1" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n,x;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;test;   <span class="hljs-comment">//创建容器来存储要测试的数</span><br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; x;<br>test.<span class="hljs-built_in">push_back</span>(x);<br>&#125;<br><br><span class="hljs-comment">//A1= 能被 5 整除的数字中所有偶数的和；</span><br><span class="hljs-keyword">int</span> A1= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> test_it = test.<span class="hljs-built_in">begin</span>(); test_it != test.<span class="hljs-built_in">end</span>(); test_it++) &#123;<br><span class="hljs-keyword">if</span> (*test_it % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &amp;&amp; *test_it % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) <span class="hljs-comment">//偶数即取余等于2，被5整除即对5取余为0</span><br>A1+= *test_it;   <span class="hljs-comment">//A1来存储这些符合条件的数的和</span><br>&#125;<br><span class="hljs-keyword">if</span> (A1 != <span class="hljs-number">0</span>)   <span class="hljs-comment">//如果A1不是0，那么就直接输出</span><br>cout &lt;&lt; A1;<br><span class="hljs-keyword">else</span>                 <span class="hljs-comment">//A1为0，说明没有符合的数，输出N</span><br>cout &lt;&lt; <span class="hljs-string">&quot;N&quot;</span>;<br><br><span class="hljs-comment">//A2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和</span><br><span class="hljs-keyword">int</span> A2 = <span class="hljs-number">0</span>;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;va2;   <span class="hljs-comment">//va2容器来存储符合第二个要求的数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> test_it = test.<span class="hljs-built_in">begin</span>(); test_it != test.<span class="hljs-built_in">end</span>(); test_it++) &#123;<br><span class="hljs-keyword">if</span> (*test_it % <span class="hljs-number">5</span> == <span class="hljs-number">1</span>)  <span class="hljs-comment">//符合条件的数</span><br>va2.<span class="hljs-built_in">push_back</span>(*test_it);   <span class="hljs-comment">//存入到va2容器</span><br>&#125;<br><span class="hljs-keyword">if</span> (va2.<span class="hljs-built_in">empty</span>())    <span class="hljs-comment">//va2是空，说明没有符合条件的数，输出N</span><br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;N&quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(va2.<span class="hljs-built_in">size</span>()==<span class="hljs-number">1</span>)  <span class="hljs-comment">//如果va2的长度为1，那么和就是第一个数</span><br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; *va2.<span class="hljs-built_in">begin</span>();<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>, j = <span class="hljs-number">1</span>; <span class="hljs-comment">//j等于1来控制交错相加的正负</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> va2_it = va2.<span class="hljs-built_in">begin</span>();va2_it!=va2.<span class="hljs-built_in">end</span>();va2_it++)&#123;<br>sum += *va2_it *j;  <span class="hljs-comment">//sum来接收符合元素的和</span><br>j *= <span class="hljs-number">-1</span>; <span class="hljs-comment">//每循环一次，将j乘-1实现变号</span><br>&#125;<br>A2 = sum;  <span class="hljs-comment">//将sum赋值给A2</span><br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; A2;<br>&#125;<br><br><span class="hljs-comment">//A3= 被 5 除后余 2 的数字的个数；</span><br><span class="hljs-keyword">int</span> A3 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> test_it = test.<span class="hljs-built_in">begin</span>(); test_it != test.<span class="hljs-built_in">end</span>(); test_it++) &#123;<br><span class="hljs-keyword">if</span> (*test_it % <span class="hljs-number">5</span> == <span class="hljs-number">2</span>)   <span class="hljs-comment">//对5取余，余数为2的数</span><br>A3++;       <span class="hljs-comment">//每有一个，A3自增1</span><br>&#125;<br><span class="hljs-keyword">if</span> (A3 != <span class="hljs-number">0</span>) <span class="hljs-comment">//A3不为0，直接输出</span><br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; A3;<br><span class="hljs-keyword">else</span>      <span class="hljs-comment">//A3为0，说明没有符合条件的数，输出N</span><br>cout &lt;&lt; <span class="hljs-string">&quot;N&quot;</span>;<br><br><span class="hljs-comment">//A4被 5 除后余 3 的数字的平均数，精确到小数点后 1 位</span><br><span class="hljs-keyword">double</span> A4 = <span class="hljs-number">0.0</span>;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;va4;  <span class="hljs-comment">//创建容器，来存储符合条件的数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> test_it = test.<span class="hljs-built_in">begin</span>(); test_it != test.<span class="hljs-built_in">end</span>(); test_it++) &#123;<br><span class="hljs-keyword">if</span> (*test_it % <span class="hljs-number">5</span> == <span class="hljs-number">3</span>)  <span class="hljs-comment">//对5进行取余，余数为3</span><br>va4.<span class="hljs-built_in">push_back</span>(*test_it); <span class="hljs-comment">//将这些数放入va4容器</span><br>&#125;<br><span class="hljs-keyword">if</span> (va4.<span class="hljs-built_in">empty</span>())   <span class="hljs-comment">//如果va4容器为空</span><br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;N&quot;</span>; <span class="hljs-comment">//输出N</span><br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">double</span> x = <span class="hljs-number">0.0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> va4_it = va4.<span class="hljs-built_in">begin</span>(); va4_it != va4.<span class="hljs-built_in">end</span>(); va4_it++) &#123;<br>    x +=*va4_it;   <span class="hljs-comment">//算出va4中的数的和</span><br>&#125;<br>A4 = x / va4.<span class="hljs-built_in">size</span>();  <span class="hljs-comment">//和除以va4中数的数量即为平均数</span><br>cout.<span class="hljs-built_in">setf</span>(ios_base::fixed); <span class="hljs-comment">//格式化输出格式</span><br>cout.<span class="hljs-built_in">precision</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">//保留一位小数</span><br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; A4;  <span class="hljs-comment">//输出</span><br>&#125;<br><br><span class="hljs-comment">//A5被 5 除后余 4 的数字中最大数字</span><br><span class="hljs-keyword">int</span> A5 = <span class="hljs-number">0</span>;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;va5; <span class="hljs-comment">//创建容器，用来存储符合条件的数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> test_it = test.<span class="hljs-built_in">begin</span>(); test_it != test.<span class="hljs-built_in">end</span>(); test_it++) &#123;<br><span class="hljs-keyword">if</span> (*test_it % <span class="hljs-number">5</span> == <span class="hljs-number">4</span>) <span class="hljs-comment">//对5进行取余，余数为4</span><br>va5.<span class="hljs-built_in">push_back</span>(*test_it); <span class="hljs-comment">//将符合条件的数存入到容器中</span><br>&#125;<br><span class="hljs-keyword">if</span> (va5.<span class="hljs-built_in">empty</span>())  <span class="hljs-comment">//如果容器为空，说明没有符合条件的数，输出N</span><br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;N&quot;</span>;<br><span class="hljs-keyword">else</span> &#123;<br>A5=*<span class="hljs-built_in">max_element</span>(va5.<span class="hljs-built_in">begin</span>(), va5.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">//算法库方法，返回一个最大值的迭代器，解除引用得到最大值</span><br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; A5;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="心得与体会："><a href="#心得与体会：" class="headerlink" title="心得与体会："></a>心得与体会：</h2><p>这道题难在第二个判断，交错相加我想了有一阵子。一开始想将索引为偶数的数都想加起来，再减去索引为奇数的数，但撒这样做存在问题。后来就搜了一下，<strong>发现可以用一个<code>j = 1</code>通过每次进行循环时乘以一个-1来控制符号输出。</strong>这样就可以实现交错相加。</p><p>其他的几个都还蛮简单的，用算法库里的方法都可以解决掉。</p><hr><h1 id="1013（20-20）："><a href="#1013（20-20）：" class="headerlink" title="1013（20/20）："></a>1013（20/20）：</h1><p>令 <em>P**i</em> 表示第 <em>i</em> 个素数。现任给两个正整数 <em>M</em>≤<em>N</em>≤104，请输出 <em>P**M</em> 到 <em>P**N</em> 的所有素数。</p><h3 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出 <em>M</em> 和 <em>N</em>，其间以空格分隔。</p><h3 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出从 <em>P**M</em> 到 <em>P**N</em> 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p><h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">5 27<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">11<span class="hljs-number"> 13 </span>17<span class="hljs-number"> 19 </span>23<span class="hljs-number"> 29 </span>31<span class="hljs-number"> 37 </span>41 43<br>47<span class="hljs-number"> 53 </span>59<span class="hljs-number"> 61 </span>67<span class="hljs-number"> 71 </span>73<span class="hljs-number"> 79 </span>83 89<br>97<span class="hljs-number"> 101 </span>103<br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答：-2"><a href="#解答：-2" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;  <span class="hljs-comment">//创建判断素数的方法</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i&lt;= <span class="hljs-built_in">sqrt</span>(n); i++)<br><span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)  <span class="hljs-comment">//当n对i取余时，如果能够整除，说明n不是一个素数。返回false</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <span class="hljs-comment">//否则返回true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;vi;<br><span class="hljs-keyword">unsigned</span> num = <span class="hljs-number">2</span>, count = <span class="hljs-number">0</span>, M, N; <span class="hljs-comment">//num为素数初始值2，count为计数器，M，N为第i个素数的个数范围[M,N]</span><br>cin &gt;&gt; M &gt;&gt; N;<br><span class="hljs-keyword">while</span> (count &lt; N) &#123;  <span class="hljs-comment">//当count小于N时循环开始</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isPrime</span>(num)) &#123; <span class="hljs-comment">//从2开始判断，如果是，count自增1</span><br>count++;<br><span class="hljs-keyword">if</span>(count&gt;=M)  <span class="hljs-comment">//当count达到了输入的第多少个素数范围时，开始将num存入到容器中</span><br>vi.<span class="hljs-built_in">push_back</span>(num);<br>&#125;<br>num++;  <span class="hljs-comment">//num每次自增1</span><br>&#125;<br><br>count = <span class="hljs-number">0</span>;  <span class="hljs-comment">//将count重置为0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vi.<span class="hljs-built_in">size</span>(); i++) &#123;<br>count++;  <span class="hljs-comment">//count为存放符合条件的素数容器的长度</span><br><span class="hljs-keyword">if</span> (count % <span class="hljs-number">10</span> != <span class="hljs-number">1</span>)  <span class="hljs-comment">//因为10个一行，所以当对10取余不为1时，输出一个空格</span><br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cout &lt;&lt; vi[i];   <span class="hljs-comment">//输出数</span><br><span class="hljs-keyword">if</span> (count % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>)  <span class="hljs-comment">//当对10取余为0时，则换行</span><br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="心得与解析：-1"><a href="#心得与解析：-1" class="headerlink" title="心得与解析："></a>心得与解析：</h2><p>这题和1007那题挺像的，都出现的判别素数的问题。在1007中，我使用了暴力法，将小于等于该数的数，进行取余，如果能整除，那么说明不是个素数。但是在1007中就因为运行测试超时而丢失两分。后来我上谷歌找了一下，发现其实没必要全部比对完，只要比对到该数的平方根那个范围即可。</p><p>还有这题给的M，N是第i个素数，不是单纯数的范围。得看清题。我一开始直接以为是[1,10000]的中的所有素数。再一看，是第1个素数到第10000个素数……，那么将10000中所有的素数都打印出来再取范围就不太可行（会超时）。后来想了想，那不如用一个计算器来控制容器中输入，当每次获取一个素数，将这个计数器加1，到了题目中要的第i个素数时开始存入容器中，直到结束。</p><hr><h1 id="1014（14-20）："><a href="#1014（14-20）：" class="headerlink" title="1014（14/20）："></a>1014（14/20）：</h1><p>大侦探福尔摩斯接到一张奇怪的字条：<code>我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm</code>。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间<code>星期四 14:04</code>，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 <code>D</code>，代表星期四；第 2 对相同的字符是 <code>E</code> ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 <code>A</code> 到 <code>N</code> 表示）；后面两字符串第 1 对相同的英文字母 <code>s</code> 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p><h3 id="输入格式：-3"><a href="#输入格式：-3" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。</p><h3 id="输出格式：-3"><a href="#输出格式：-3" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出约会的时间，格式为 <code>DAY HH:MM</code>，其中 <code>DAY</code> 是某星期的 3 字符缩写，即 <code>MON</code> 表示星期一，<code>TUE</code> 表示星期二，<code>WED</code> 表示星期三，<code>THU</code> 表示星期四，<code>FRI</code> 表示星期五，<code>SAT</code> 表示星期六，<code>SUN</code> 表示星期日。题目输入保证每个测试存在唯一解。</p><h3 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">3485</span>djDkxh4hhGE <br><span class="hljs-number">2984</span>akDfkkkkggEdsb <br>s<span class="hljs-meta">&amp;hgsfdk </span><br>d<span class="hljs-meta">&amp;Hyscvnm</span><br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">THU</span> <span class="hljs-number">14</span>:<span class="hljs-number">04</span><br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答：-3"><a href="#解答：-3" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string first, second, third, fourth;  <span class="hljs-comment">//创建四个字符串</span><br>cin &gt;&gt; first &gt;&gt; second &gt;&gt; third &gt;&gt; fourth;  <span class="hljs-comment">//输入</span><br><span class="hljs-keyword">int</span> flag = <span class="hljs-number">1</span>;  <span class="hljs-comment">//循环次数标志</span><br>    <br>    <span class="hljs-keyword">char</span> c[<span class="hljs-number">2</span>]; <span class="hljs-comment">//字符数组用来存储周几和几点的字符</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; first.<span class="hljs-built_in">size</span>() &amp;&amp; i &lt; second.<span class="hljs-built_in">size</span>(); i++) &#123;  <span class="hljs-comment">//当i小于first和second的字符串的长度时，循环开始</span><br><span class="hljs-keyword">if</span> (first[i] == second[i] &amp;&amp; flag == <span class="hljs-number">1</span> &amp;&amp; first[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; first[i] &lt;= <span class="hljs-string">&#x27;G&#x27;</span>) &#123;<br>c[<span class="hljs-number">0</span>] = first[i]; <span class="hljs-comment">//当两个字符串的相同的位置字符相等且字符在&#x27;A&#x27;-&#x27;G&#x27;之间，判断标志为1时，将这个字符赋值给c[0]</span><br>flag++;  <span class="hljs-comment">//循环次数+1</span><br><span class="hljs-keyword">continue</span>;  <span class="hljs-comment">//继续下次循环</span><br>&#125;<br><span class="hljs-keyword">if</span> (first[i] == second[i] &amp;&amp; flag == <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">//当两字符串中对应的位置字符相等且循环次数为2时</span><br><span class="hljs-keyword">if</span> (first[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; first[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-comment">//当字符在&#x27;0&#x27;-&#x27;9&#x27;之间时</span><br>c[<span class="hljs-number">1</span>] = first[i];   <span class="hljs-comment">//将这个字符赋值给c[1]</span><br><span class="hljs-keyword">break</span>;  <span class="hljs-comment">//跳出循环</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((first[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; first[i] &lt;= <span class="hljs-string">&#x27;N&#x27;</span>))&#123; <span class="hljs-comment">//或当字符在&#x27;A&#x27;-&#x27;N&#x27;之间时</span><br>c[<span class="hljs-number">1</span>] = first[i];  <span class="hljs-comment">//将这个字符赋值给c[1]</span><br><span class="hljs-keyword">break</span>; <span class="hljs-comment">//跳出循环</span><br>&#125;<br>&#125;<br>&#125;<br><br>string week[<span class="hljs-number">7</span>] = &#123; <span class="hljs-string">&quot;MON&quot;</span>,<span class="hljs-string">&quot;TUE&quot;</span>,<span class="hljs-string">&quot;WED&quot;</span>,<span class="hljs-string">&quot;THU&quot;</span>,<span class="hljs-string">&quot;FRI&quot;</span>,<span class="hljs-string">&quot;SAT&quot;</span>,<span class="hljs-string">&quot;SUN&quot;</span> &#125;; <span class="hljs-comment">//创建存储周一到周日的字符串week数组</span><br><span class="hljs-keyword">auto</span> x = c[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;A&#x27;</span>;  <span class="hljs-comment">//用c[0]中存储的字符减去&#x27;A&#x27;（或者ASCII值65）得到数字</span><br>cout &lt;&lt; week[x]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">//输出对应在week数组对应索引的字符串</span><br><br><span class="hljs-keyword">if</span> (c[<span class="hljs-number">1</span>] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c[<span class="hljs-number">1</span>] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;  <span class="hljs-comment">//如果c[1]中的字符是&#x27;0&#x27;-&#x27;9&#x27;，那么要在前面添一个0来表示小时</span><br>cout &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; c[<span class="hljs-number">1</span>]; <span class="hljs-comment">//格式化输出，宽度为2，不足的同0补全</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c[<span class="hljs-number">1</span>] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; c[<span class="hljs-number">1</span>] &lt;= <span class="hljs-string">&#x27;N&#x27;</span>) &#123;  <span class="hljs-comment">//如果c[1]中的字符是&#x27;A&#x27;-&#x27;N&#x27;</span><br>cout &lt;&lt; c[<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">10</span>; <span class="hljs-comment">//将该字符减去一个&#x27;A&#x27;，再加上10就为当前的小时数</span><br>&#125;<br>    <br>    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (k &lt; third.<span class="hljs-built_in">size</span>() &amp;&amp; k &lt; fourth.<span class="hljs-built_in">size</span>()) &#123;   <span class="hljs-comment">//找出分钟数,k小于third和fourth字符串的长度时，循环继续</span><br><span class="hljs-keyword">if</span> (third[k] == fourth[k] &amp;&amp; <span class="hljs-built_in">isalpha</span>(third[k])) &#123; <span class="hljs-comment">//当对应的位置的字符相等，且是字母时</span><br>pos = k;   <span class="hljs-comment">//pos等于k的值</span><br><span class="hljs-keyword">break</span>;   <span class="hljs-comment">//跳出循环</span><br>&#125;<br>k++;  <span class="hljs-comment">//每进行一次，k自增1</span><br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;:&quot;</span>;<br>cout &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; pos;  <span class="hljs-comment">//格式输出，宽度为2，不足的用0补足</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>心得与体会：</p><p>有一说一，这题拿到手的确挺吓人的。不是那么好做。我一开始没注意的第一个字符串和第二个字符串是对应位置的字母相等，就用了个for循环嵌套，来逐一比对，而且还考虑了两个字符串不相等的情况。但是根本没必要，再仔细看，就会发现用一个for即可，判断条件直接是小于两个字符串的长度即可（或者说较长的字符串根本取不到那些超出的部分，只要看较短的字符串即可）。</p><p>第一次提交，总是有三个测试点过不去。后来我换了自己的一个测试用例，发现在输出小时的时候，我疏忽了一个问题，没有对当范围在0-9时进行处理，导致输出错误。应该加一个输出在0-9时的判断。以及一开始的对字符范围的取值是在A-Z，也没有必要。一周只有七天，即A-G，而小时数因为0-9代表0点到9点，那么剩下小时数的字符范围在A-N即可。</p><p>以及还有个细节，个位数都是只有一位数，但是小时和分钟一般都是显示<code>01</code>这种，需要在前面进行补0。这就需要对输出进行格式化。将宽度限制为2，对不足2位的使用0补足。</p><hr><h1 id="1015（20-25）："><a href="#1015（20-25）：" class="headerlink" title="1015（20/25）："></a>1015（20/25）：</h1><p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p><p>现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p><h3 id="输入格式：-4"><a href="#输入格式：-4" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出 3 个正整数，分别为：<em>N</em>（≤105），即考生总数；<em>L</em>（≥60），为录取最低分数线，即德分和才分均不低于 <em>L</em> 的考生才有资格被考虑录取；<em>H</em>（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 <em>H</em>，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 <em>L</em> 的考生也按总分排序，但排在第三类考生之后。</p><p>随后 <em>N</em> 行，每行给出一位考生的信息，包括：<code>准考证号 德分 才分</code>，其中<code>准考证号</code>为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。</p><h3 id="输出格式：-4"><a href="#输出格式：-4" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出第一行首先给出达到最低分数线的考生人数 <em>M</em>，随后 <em>M</em> 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。</p><h3 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tap">14<span class="hljs-number"> 60 </span>80<br>10000001<span class="hljs-number"> 64 </span>90<br>10000002<span class="hljs-number"> 90 </span>60<br>10000011<span class="hljs-number"> 85 </span>80<br>10000003<span class="hljs-number"> 85 </span>80<br>10000004<span class="hljs-number"> 80 </span>85<br>10000005<span class="hljs-number"> 82 </span>77<br>10000006<span class="hljs-number"> 83 </span>76<br>10000007<span class="hljs-number"> 90 </span>78<br>10000008<span class="hljs-number"> 75 </span>79<br>10000009<span class="hljs-number"> 59 </span>90<br>10000010<span class="hljs-number"> 88 </span>45<br>10000012<span class="hljs-number"> 80 </span>100<br>10000013<span class="hljs-number"> 90 </span>99<br>10000014<span class="hljs-number"> 66 </span>60<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">12</span><br><span class="hljs-number">10000013 90</span> <span class="hljs-number">99</span><br><span class="hljs-number">10000012 80</span> <span class="hljs-number">100</span><br><span class="hljs-number">10000003 85</span> <span class="hljs-number">80</span><br><span class="hljs-number">10000011 85</span> <span class="hljs-number">80</span><br><span class="hljs-number">10000004 80</span> <span class="hljs-number">85</span><br><span class="hljs-number">10000007 90</span> <span class="hljs-number">78</span><br><span class="hljs-number">10000006 83</span> <span class="hljs-number">76</span><br><span class="hljs-number">10000005 82</span> <span class="hljs-number">77</span><br><span class="hljs-number">10000002 90</span> <span class="hljs-number">60</span><br><span class="hljs-number">10000014 66</span> <span class="hljs-number">60</span><br><span class="hljs-number">10000008 75</span> <span class="hljs-number">79</span><br><span class="hljs-number">10000001 64</span> <span class="hljs-number">90</span><br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答：-4"><a href="#解答：-4" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> &#123;</span>    <span class="hljs-comment">//创建学生类（struct结构也行）</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> num;   <span class="hljs-comment">//学号</span><br><span class="hljs-keyword">int</span> degrade;  <span class="hljs-comment">//德分</span><br><span class="hljs-keyword">int</span> caigrade;  <span class="hljs-comment">//才分</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Student a, Student  b)</span> </span>&#123;  <span class="hljs-comment">//输出格式：按照总分降序排列，总分相同按照德分进行降序排，德分也相同按照学号升序排</span><br><span class="hljs-keyword">if</span> (a.degrade + a.caigrade != b.degrade + b.caigrade) <span class="hljs-comment">//总分不同时</span><br><span class="hljs-keyword">return</span> a.degrade + a.caigrade &gt; b.degrade + b.caigrade; <span class="hljs-comment">//总分高的输出</span><br><span class="hljs-keyword">else</span> &#123;   <span class="hljs-comment">//总分相同</span><br><span class="hljs-keyword">if</span> (a.degrade != b.degrade) &#123;   <br><span class="hljs-keyword">return</span> a.degrade &gt; b.degrade;  <span class="hljs-comment">//德分高的输出</span><br>&#125;<br><span class="hljs-keyword">else</span>  <span class="hljs-comment">//德分也相同</span><br><span class="hljs-keyword">return</span> a.num &lt; b.num;  <span class="hljs-comment">//学号小的输出</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> N, L, H;  <span class="hljs-comment">//N考生人数，L最低录取线，H优先录取线</span><br>cin &gt;&gt; N &gt;&gt; L &gt;&gt; H;<br>Student stu;  <span class="hljs-comment">//创建学生类实体</span><br><span class="hljs-keyword">int</span> number = <span class="hljs-number">0</span>; <span class="hljs-comment">//德分和才分都达到线的学生数字</span><br>vector&lt;Student&gt;top, first, second, third;  <span class="hljs-comment">//四种容器用来存储不同类别的学生</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;   <span class="hljs-comment">//循环开始</span><br>cin &gt;&gt; stu.num &gt;&gt; stu.degrade &gt;&gt; stu.caigrade; <span class="hljs-comment">//输入N个学生</span><br><span class="hljs-keyword">if</span> (stu.caigrade &gt;= L &amp;&amp; stu.degrade &gt;= L) &#123;  <span class="hljs-comment">//当德分和才分都大于等于最低线时</span><br>number++;   <span class="hljs-comment">//符合条件的人数自增1</span><br><span class="hljs-keyword">if</span> (stu.degrade &gt;= H &amp;&amp; stu.caigrade &gt;= H)  <span class="hljs-comment">//判断第一类考生（德分才分都大于优先录取线）</span><br>top.<span class="hljs-built_in">push_back</span>(stu);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stu.degrade &gt;= H &amp;&amp; stu.caigrade &lt; H) <span class="hljs-comment">//判断第二类考生，德分大于优先录取线但是才分不够</span><br>first.<span class="hljs-built_in">push_back</span>(stu);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stu.degrade &lt; H &amp;&amp; stu.caigrade &lt; H &amp;&amp; stu.degrade &gt;= stu.caigrade)<br>second.<span class="hljs-built_in">push_back</span>(stu);   <span class="hljs-comment">//判断第三类考生，德分才分都小于优先线，但是德分大于才分的学生</span><br><span class="hljs-keyword">else</span><br>third.<span class="hljs-built_in">push_back</span>(stu);  <span class="hljs-comment">//剩下的是第四类考生</span><br>&#125;<br>&#125;<br><br><span class="hljs-built_in">sort</span>(top.<span class="hljs-built_in">begin</span>(), top.<span class="hljs-built_in">end</span>(),cmp);  <span class="hljs-comment">//按照排序策略进行排序</span><br><span class="hljs-built_in">sort</span>(first.<span class="hljs-built_in">begin</span>(), first.<span class="hljs-built_in">end</span>(),cmp);<br><span class="hljs-built_in">sort</span>(second.<span class="hljs-built_in">begin</span>(), second.<span class="hljs-built_in">end</span>(),cmp);<br><span class="hljs-built_in">sort</span>(third.<span class="hljs-built_in">begin</span>(), third.<span class="hljs-built_in">end</span>(),cmp);<br><br>cout &lt;&lt; number &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;  <span class="hljs-comment">//输出德分才分都大于最低线的学生数目</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top.<span class="hljs-built_in">size</span>(); i++)  <span class="hljs-comment">//将每个容器中的学生打印出来即可</span><br>cout &lt;&lt; top[i].num &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; top[i].degrade &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; top[i].caigrade &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; first.<span class="hljs-built_in">size</span>(); i++)<br>cout &lt;&lt; first[i].num &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; first[i].degrade &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; first[i].caigrade &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; second.<span class="hljs-built_in">size</span>(); i++)<br>cout &lt;&lt; second[i].num &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; second[i].degrade &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; second[i].caigrade &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; third.<span class="hljs-built_in">size</span>(); i++)<br>cout &lt;&lt; third[i].num &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; third[i].degrade &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; third[i].caigrade &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="心得与解析：-2"><a href="#心得与解析：-2" class="headerlink" title="心得与解析："></a>心得与解析：</h2><p>这题用到了OOP方法中的类。难不在于创建类的难度，在于排序算法的策略怎么设置。输出的降序和升序。我一开始想用一个容器将所有的学生存储在里面，之后用<code>erase</code>删除掉德分才分小于最低线的学生，但是没必要，用一个if对输入到容器之前进行判断即可。</p>]]></content>
    
    
    <categories>
      
      <category>-PTA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-PTA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA-Basic1006-1010</title>
    <link href="/2021/10/09/PTA-Basic1006-1010/"/>
    <url>/2021/10/09/PTA-Basic1006-1010/</url>
    
    <content type="html"><![CDATA[<p>以下是PTA　Basic等级的6-10题我的解答，分值：96/100。</p><span id="more"></span>　<h1 id="1006（15-15）："><a href="#1006（15-15）：" class="headerlink" title="1006（15/15）："></a>1006（15/15）：</h1><p>让我们用字母 <code>B</code> 来表示“百”、字母 <code>S</code> 表示“十”，用 <code>12...n</code> 来表示不为零的个位数字 <code>n</code>（&lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 <code>234</code> 应该被输出为 <code>BBSSS1234</code>，因为它有 2 个“百”、3 个“十”、以及个位的 4。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，给出正整数 <em>n</em>（&lt;1000）。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，用规定的格式输出 <em>n</em>。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">234<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">BBSSS1234</span><br><span class="hljs-keyword"></span>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">23<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">SS123</span><br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">unsigned</span> n;   <span class="hljs-comment">//无符号整数</span><br>cin &gt;&gt; n;    <br><span class="hljs-keyword">int</span> a, b, c; <br>a = n / <span class="hljs-number">100</span>;   <span class="hljs-comment">//获取百位上的数字</span><br>b = n % <span class="hljs-number">100</span> / <span class="hljs-number">10</span>;  <span class="hljs-comment">//获取十位上的数字</span><br>c = n % <span class="hljs-number">10</span>;  <span class="hljs-comment">//获取个位上的数字</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a; i++)  <span class="hljs-comment">//循环输出B</span><br>cout &lt;&lt; <span class="hljs-string">&quot;B&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; b; j++)  <span class="hljs-comment">//循环输出S</span><br>cout &lt;&lt; <span class="hljs-string">&quot;S&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> p = <span class="hljs-number">1</span>; p &lt;= c; p++) <span class="hljs-comment">//输出个位上的数字</span><br>cout &lt;&lt; p;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分析与心得："><a href="#分析与心得：" class="headerlink" title="分析与心得："></a>分析与心得：</h2><p>这题15分，不难。如果之前做过水仙花这种题目，那么这题就很简单。只需要分别求出个十百上的数字，再用循环打印的字母即可。</p><hr><h1 id="1007（18-20）："><a href="#1007（18-20）：" class="headerlink" title="1007（18/20）："></a>1007（18/20）：</h1><p>让我们定义<em>d**n</em>为：<em>d**n</em>=<em>p**n</em>+1−<em>p**n</em>，其中<em>p**i</em>是第<em>i</em>个素数。显然有<em>d</em>1=1，且对于<em>n</em>&gt;1有<em>d**n</em>是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p><p>现给定任意正整数<code>N</code>(&lt;105)，请计算不超过<code>N</code>的满足猜想的素数对的个数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行给出正整数<code>N</code>。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出不超过<code>N</code>的满足猜想的素数对的个数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">20<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">4<br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答：-1"><a href="#解答：-1" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">unsigned</span> n,i,j; <span class="hljs-comment">//n是需要判断的数</span><br>cin &gt;&gt; n;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;vi;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)   <span class="hljs-comment">//如果输入判断的数n是1，那么就输出1</span><br>cout &lt;&lt; n;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123; <span class="hljs-comment">//i从1开始每次累加1充当被除数，直接小于等于n</span><br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">2</span>; j &lt; i; j++) &#123;  <span class="hljs-comment">//j充当除数，从2开始每次累加1</span><br><span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>)   <span class="hljs-comment">//当i对j进行取余等于0时，说明i（n）不是个素数</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (j &gt;= i)  <span class="hljs-comment">//如果除数大于被除数，说明i（n）是一个除数，将n放入vector中</span><br>vi.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;  <span class="hljs-comment">//x用来对素数对个数计数</span><br><span class="hljs-keyword">auto</span> vi_it = vi.<span class="hljs-built_in">begin</span>();<br><br><span class="hljs-keyword">while</span> (vi_it != vi.<span class="hljs-built_in">end</span>()<span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">//当起始迭代器不等于最后一个迭代器时（注意不是end()这个超尾迭代器）</span><br><span class="hljs-keyword">if</span> (*(vi_it + <span class="hljs-number">1</span>) - *vi_it == <span class="hljs-number">2</span>) <span class="hljs-comment">//如果是不等于end()，那么则会发生越界错误。当两个相邻的素数互减等于2时</span><br>x++;  <span class="hljs-comment">//x自增</span><br>vi_it++; <span class="hljs-comment">//迭代器向后推进一个</span><br>&#125;<br>cout &lt;&lt; x;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分析与心得：-1"><a href="#分析与心得：-1" class="headerlink" title="分析与心得："></a>分析与心得：</h2><p>这题说到底就是判断在1到一个范围内有哪些素数。将这些素数存进一个容器中再做判断即可。但是这题我的方法属于暴力法，对整个范围进行循环判断，这导致最后一个测试点没有过，运行超时。判断素数方法可能还是需要进行改进。不难，但是需要知道怎么判断素数。</p><hr><h1 id="1008（20-20）："><a href="#1008（20-20）：" class="headerlink" title="1008（20/20）："></a>1008（20/20）：</h1><p>一个数组<em>A</em>中存有<em>N</em>（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移<em>M</em>（≥0）个位置，即将<em>A</em>中的数据由（<em>A</em>0<em>A</em>1⋯<em>A**N</em>−1）变换为（<em>A**N</em>−<em>M</em>⋯<em>A**N</em>−1<em>A</em>0<em>A</em>1⋯<em>A**N</em>−<em>M</em>−1）（最后<em>M</em>个数循环移至最前面的<em>M</em>个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>每个输入包含一个测试用例，第1行输入<em>N</em>（1≤<em>N</em>≤100）和<em>M</em>（≥0）；第2行输入<em>N</em>个整数，之间用空格分隔。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出循环右移<em>M</em>位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p><h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">6 2<br>1<span class="hljs-number"> 2 </span>3<span class="hljs-number"> 4 </span>5 6<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">5<span class="hljs-number"> 6 </span>1<span class="hljs-number"> 2 </span>3 4<br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答1（使用另一个数组）："><a href="#解答1（使用另一个数组）：" class="headerlink" title="解答1（使用另一个数组）："></a>解答1（使用另一个数组）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> m, n;<br>cin &gt;&gt; m &gt;&gt; n;<br>cin.<span class="hljs-built_in">get</span>();<br><span class="hljs-keyword">int</span> a;<br><br><span class="hljs-keyword">int</span>* arr1= <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m];   <span class="hljs-comment">//C++不允许使用变量作为数组长度，所以只能用new来动态分配</span><br><span class="hljs-keyword">int</span>* arr2= <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m];   <span class="hljs-comment">//用来接收右移后的数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;  <span class="hljs-comment">//循环输入，将数存进arr1</span><br>cin &gt;&gt; a;<br>arr1[i] = a;<br>&#125;<br>    <br><span class="hljs-keyword">if</span> (n &gt; m) &#123;<br>n = n % m;     <span class="hljs-comment">//当需要右移的数大于数组长度时，取余，循环余数即可（因为当n=m时，是整一个循环，等于没有循环）</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m-n; i++) &#123; <span class="hljs-comment">//用arr2来先接收可以正常向后移动的数</span><br>arr2[i+n] = arr1[i];  <span class="hljs-comment">//正常向后移动，所以是arr2是i+n（数组原先在的索引加上移动位数得到的索引）</span><br>&#125;<br><br><span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = m - n; i &lt; m; i++,j++) &#123;<span class="hljs-comment">//这个来接收需要放到前面的数（有的数向后移动会越界，那么就只能放到前面）</span><br>arr2[j] = arr1[i];               <span class="hljs-comment">//也就是从索引m-n开始的数都应该被放在前面</span><br>&#125;<br><br>cout &lt;&lt; arr2[<span class="hljs-number">0</span>];   <span class="hljs-comment">//先输出第一个数（格式控制）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123; <span class="hljs-comment">//循环输出接下来的数）</span><br>cout &lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt; arr2[i];<br>&#125;<br><br><span class="hljs-keyword">delete</span>[] arr1;   <span class="hljs-comment">//回收动态分配的数组</span><br><span class="hljs-keyword">delete</span>[] arr2;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面这个是在网上找的，这个符合题目条件只用本身的数组：</p><h2 id="解答2（只用本身这个数组）："><a href="#解答2（只用本身这个数组）：" class="headerlink" title="解答2（只用本身这个数组）："></a>解答2（只用本身这个数组）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n]; <span class="hljs-comment">//分配动态数组</span><br>    m %= n;  <span class="hljs-comment">//当需要右移的数大于数组长度时，取余，循环余数即可（因为当n=m时，是整一个循环，等于没有循环）</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = m; i &lt; n; i++) &#123;  <span class="hljs-comment">//直接输入的数放到对应的位置（可以正常移动的数，从m开始）</span><br>        cin &gt;&gt; a[i];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;  <span class="hljs-comment">//直接输入的数放到对应的位置（需要放到数组前面的数）</span><br>        cin &gt;&gt; a[i];<br>    &#125;<br>  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;  <span class="hljs-comment">//打印</span><br>        cout &lt;&lt; a[i];<br>        <span class="hljs-keyword">if</span> (i != n - <span class="hljs-number">1</span>)<br>            cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">delete</span>[] a;  <span class="hljs-comment">//回收动态分配内存</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分析与心得：-2"><a href="#分析与心得：-2" class="headerlink" title="分析与心得："></a>分析与心得：</h2><p>这道题一开始困扰了我很久，我想了半天也没搞懂，这个超出数组长度的数该怎么移动到前面？后来我列了个表，发现在整个输入的数组中，前m-n个数是可以正常向后移动，在m-n之后的数则需要移动到数组前面。所以，m-n就是一个分界线。解答一的确可以AC，但是略微不合题意，解答二就显得非常直接了当：既然需要向后移动，那么我直接在你输入数时将这个数放到移动后的位置，省去了使用另一个数组接收的步骤。</p><hr><h1 id="1009（20-20）："><a href="#1009（20-20）：" class="headerlink" title="1009（20/20）："></a>1009（20/20）：</h1><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，输出倒序后的句子。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Hello</span> <span class="hljs-variable">World</span> <span class="hljs-built_in">Here</span> <span class="hljs-built_in">I</span> <span class="hljs-variable">Come</span><br></code></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Come</span> <span class="hljs-built_in">I</span> <span class="hljs-built_in">Here</span> <span class="hljs-variable">World</span> <span class="hljs-variable">Hello</span><br></code></pre></td></tr></table></figure><h2 id="解答：-2"><a href="#解答：-2" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> <span class="hljs-meta-keyword">warning</span>(disable:4996)  <span class="hljs-comment">//strcpy()方法会报警告错误，忽略掉</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-keyword">char</span>*&gt;vs;<br>string s;<br><span class="hljs-built_in">getline</span>(cin, s);  <span class="hljs-comment">//读入整个字符串</span><br><br><span class="hljs-comment">//cstring方法中的strtok，以及将string字符串转换成一个字符数组c_str，再用strcpy复制到一个char数组中</span><br><span class="hljs-keyword">char</span> input[<span class="hljs-number">80</span>]; <span class="hljs-comment">//创建一个字符数组</span><br><span class="hljs-built_in">strcpy</span>(input, s.<span class="hljs-built_in">c_str</span>()); <span class="hljs-comment">//用c_str()方法将s转换成一个字符数组，用strcpy()复制到input字符数组中</span><br><br>    <span class="hljs-comment">//strtok()函数返回被分解的第一个子字符串，如果没有可检索的字符串，则返回一个空指针</span><br>    <span class="hljs-keyword">char</span>* token = <span class="hljs-built_in">strtok</span>(input, <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">//使用strtok()方法分解掉字符串，从空格开始分解</span><br><span class="hljs-keyword">while</span> (token != <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">//当返回值不是空指针时</span><br>vs.<span class="hljs-built_in">push_back</span>(token); <span class="hljs-comment">//将这个数放vector中</span><br>token = <span class="hljs-built_in">strtok</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">auto</span> vs_it = vs.<span class="hljs-built_in">rbegin</span>();  <span class="hljs-comment">//格式控制，先输出最后一个数，rbegin()逆向迭代器</span><br>cout &lt;&lt; *vs.<span class="hljs-built_in">rbegin</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> vs_it = vs.<span class="hljs-built_in">rbegin</span>()+<span class="hljs-number">1</span>; vs_it != vs.<span class="hljs-built_in">rend</span>(); vs_it++) <span class="hljs-comment">//再输出其他剩余的数</span><br>cout &lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt; *vs_it;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分析与心得：-3"><a href="#分析与心得：-3" class="headerlink" title="分析与心得："></a>分析与心得：</h2><p>这题我一开始就拿到手就琢磨该怎么分解掉一句话（根据特定的字符来分解，这题是” “），在网上找了一番后找到了<code>strtok()</code>这个方法。这个方法来自于<code>cstring</code>库。C 库函数 <code>char strtok(char str, const char delim)</code> 分解字符串 <code>str</code> 为一组字符串，<code>delim</code> 为分隔符。<code>strtok()</code>函数返回被分解的第一个子字符串，如果没有可检索的字符串，则返回一个空指针。</p><p>有了这个方法之后这道题基本就迎刃而解了。将分解返回的值放入一个容器中，再逆向输出即可。</p><p>但是这题我看了网上有拿<code>stack</code>栈这个方法来解答的，我真的佩服，因为栈这个数据结构完美符合这题的要求，这不就是先进后出……唉，数据结构白学了。</p><hr><h1 id="1010（23-25）："><a href="#1010（23-25）：" class="headerlink" title="1010（23/25）："></a>1010（23/25）：</h1><p>设计函数求一元多项式的导数。（注：<em>x**n</em>（<em>n</em>为整数）的一阶导数为<em>n<strong>x</strong>n</em>−1。）</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 <code>0 0</code>。</p><h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">3<span class="hljs-number"> 4 </span>-5<span class="hljs-number"> 2 </span>6<span class="hljs-number"> 1 </span>-2 0<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">12 3 -10 1 6 0<br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答：-3"><a href="#解答：-3" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> a, b;  <span class="hljs-comment">//a是系数，b是导数</span><br>vector&lt;<span class="hljs-keyword">int</span>&gt;vi1;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b) &#123;   <span class="hljs-comment">//不断的输入系数a和指数b</span><br>vi1.<span class="hljs-built_in">push_back</span>(a);     <span class="hljs-comment">//将这两个数存入到容器中</span><br>vi1.<span class="hljs-built_in">push_back</span>(b);<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>||b==<span class="hljs-number">0</span>) <span class="hljs-comment">//当系数a或指数b为0时</span><br><span class="hljs-keyword">break</span>;  <span class="hljs-comment">//循环结束</span><br>&#125;<br><br><span class="hljs-keyword">if</span> (*vi1.<span class="hljs-built_in">begin</span>() == <span class="hljs-number">0</span> &amp;&amp; *(vi1.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">//如果输入零多项式时吗，即首迭代器和首迭代器加1都为0</span><br>cout &lt;&lt; <span class="hljs-string">&quot;0 0&quot;</span>;  <span class="hljs-comment">//输出0 0</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//结束掉程序</span><br>&#125;<br><br>vector&lt;<span class="hljs-keyword">int</span>&gt;vi2;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;  <span class="hljs-comment">//系数索引在vector容器中以0开始</span><br><span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;  <span class="hljs-comment">//系数索引在vector容器中以1开始</span><br><span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;  <span class="hljs-comment">//控制循环次数</span><br><br><span class="hljs-keyword">for</span> (; k &lt; vi1.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>; i+=<span class="hljs-number">2</span>, j+=<span class="hljs-number">2</span>,k++) &#123; <span class="hljs-comment">//vi1.size()/2是因为系数和指数总是成对出现</span><br>                                                  <span class="hljs-comment">//i和j每次循环向后移动两个单位</span><br><span class="hljs-keyword">int</span> a = *(vi1.<span class="hljs-built_in">begin</span>() + i) * *(vi1.<span class="hljs-built_in">begin</span>() + j); <span class="hljs-comment">//求导就是系数乘以指数</span><br><span class="hljs-keyword">int</span> b = *(vi1.<span class="hljs-built_in">begin</span>()+j) - <span class="hljs-number">1</span>;  <span class="hljs-comment">//求导就是指数减1</span><br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) <span class="hljs-comment">//如果系数为0</span><br><span class="hljs-keyword">break</span>; <span class="hljs-comment">//跳出循环</span><br>vi2.<span class="hljs-built_in">push_back</span>(a);  <span class="hljs-comment">//将计算出来的新系数和指数存入容器vi2中</span><br>vi2.<span class="hljs-built_in">push_back</span>(b);<br>&#125;<br><br><span class="hljs-keyword">auto</span> vi2_it = vi2.<span class="hljs-built_in">begin</span>();   <span class="hljs-comment">//格式控制，先输出第一个</span><br>cout &lt;&lt; *vi2_it;   <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v2_it = vi2.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>; v2_it != vi2.<span class="hljs-built_in">end</span>(); v2_it++) <span class="hljs-comment">//循环输出接下来的数</span><br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; *v2_it;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析与心得：</p><p>这题刚开始拿到手不太好理解题意，得仔细想想。但是理解了之后就好做了很多，求导规则也并不难（题目也说了）。但是最大的问题出现在这个循环控制和零多项式，这两个玩意折腾了半天，最后还有一个测试点报了段错误。根据题目中的意思，在系数为0时直接强制退出循环即可，且不应该将系数为0这个数放入容器vi2中。但零多项式却是一个例外，因为在循环控制中直接使用了<code>break</code>，所以零多项式不会被放入容器vi2中，但是却需要将它打印出来。那么只能在进入循环前先判断是不是零多项式，如果是则直接输出并且退出。</p>]]></content>
    
    
    <categories>
      
      <category>-PTA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-PTA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA Basic1001-1005</title>
    <link href="/2021/10/03/PTA-Basic1001-1005/"/>
    <url>/2021/10/03/PTA-Basic1001-1005/</url>
    
    <content type="html"><![CDATA[<p>以下是PTA　Basic等级的1-5题我的解答，分值：97/100。</p><span id="more"></span>　<h1 id="1001（15-15）："><a href="#1001（15-15）：" class="headerlink" title="1001（15/15）："></a>1001（15/15）：</h1><p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>=1？</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出从 <em>n</em> 计算到 1 需要的步数。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">5<br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> n;   <span class="hljs-comment">//定义一个无符号整数</span><br>    std::cin &gt;&gt; n;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;   <span class="hljs-comment">//i来记录进行了多少步</span><br>    <span class="hljs-keyword">while</span> (n != <span class="hljs-number">1</span>) &#123;   <span class="hljs-comment">//当n不为1时，循环进行</span><br>        <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//判断是否是偶数</span><br>            n /= <span class="hljs-number">2</span>;<br>            ++i;   <span class="hljs-comment">//每次结束一次循环就自增1</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;   <span class="hljs-comment">//是奇数的情况</span><br>            n = (<span class="hljs-number">3</span> * n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            ++i;   <span class="hljs-comment">//每次结束一次循环就自增1</span><br>        &#125;<br>    &#125;<br>    std::cout &lt;&lt; i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h2 id="分析与心得："><a href="#分析与心得：" class="headerlink" title="分析与心得："></a>分析与心得：</h2><p>15分的白给题，挺弱智的，学过点语言的应该都能写出来。</p><hr><h1 id="1002（20-20）："><a href="#1002（20-20）：" class="headerlink" title="1002（20/20）："></a>1002（20/20）：</h1><p>读入一个正整数 <em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出自然数 <em>n</em> 的值。这里保证 <em>n</em> 小于 10100。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行内输出 <em>n</em> 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p><h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1234567890987654321123456789<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">yi <span class="hljs-keyword">san</span> <span class="hljs-keyword">wu</span><br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答：-1"><a href="#解答：-1" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string x;<br><span class="hljs-built_in">getline</span>(cin, x);<br>vector&lt;<span class="hljs-keyword">int</span>&gt;sum;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; x.<span class="hljs-built_in">size</span>(); i++)  <span class="hljs-comment">//将输入的字符串string拆成字符char数组，char强制转换后会得到该字符的ASCII值</span><br> sum.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(x[i])<span class="hljs-number">-48</span>);  <span class="hljs-comment">//减去48后得到对应的数字，将这些数字存进一个vector中</span><br><br><span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> j : sum)    <span class="hljs-comment">//对vector中的数进行遍历，获得和</span><br>n += j;<br><br>string s = <span class="hljs-built_in">to_string</span>(n);  <span class="hljs-comment">//再用to_string()方法将这个整数转换成字符串（字符数组）s，方便取出每位对应的单个数字</span><br><br>string pinyin[<span class="hljs-number">10</span>] = &#123; <span class="hljs-string">&quot;ling&quot;</span>,<span class="hljs-string">&quot;yi&quot;</span>,<span class="hljs-string">&quot;er&quot;</span>,<span class="hljs-string">&quot;san&quot;</span>,<span class="hljs-string">&quot;si&quot;</span>,<span class="hljs-string">&quot;wu&quot;</span>,<span class="hljs-string">&quot;liu&quot;</span>,<span class="hljs-string">&quot;qi&quot;</span>,<span class="hljs-string">&quot;ba&quot;</span>,<span class="hljs-string">&quot;jiu&quot;</span>&#125;; <span class="hljs-comment">//创建0-9的拼音数组</span><br>cout &lt;&lt; pinyin[(<span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(s[<span class="hljs-number">0</span>]) - <span class="hljs-number">48</span>)];   <span class="hljs-comment">//再将单个字符强转成int后得到ASCII值减去48得到对应的数字，</span><br>                                         <span class="hljs-comment">//传入拼音数组中获取数字对应的拼音，打印（这里先打的第一个数字，也就是索引0）</span><br>    <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++) &#123; <br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; pinyin[<span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(s[i]) - <span class="hljs-number">48</span>]; <span class="hljs-comment">//循环打印s字符数组剩下的数</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分析与心得：-1"><a href="#分析与心得：-1" class="headerlink" title="分析与心得："></a>分析与心得：</h2><p>这题刚拿到手时候，因为以前写过水仙花数的原因，我想用除10再取余的方法获得每位上的对应的数字，但是在C++中，最大的基本类型是<code>unsigned long long</code>都存不下题目给出的这个数，只能作罢。于是我琢磨传一个字符串进来，再切成字符数组，把每个字符取出来强转成数字，这个想法是对的，但是在转换的一开始遇到了点问题，强转字符得到的是ASCII值，并不是对应的数字，那就只能再减去48。</p><p>第二个问题是得到数之后怎么用拼音输出，我第一遍写了个很丑的循环，丑的我自己都看得发慌（但是能AC）。后来写完了搜了一下发现可以写一个数组，输入第几个直接转换成对应的拼音字符串，就方便多了。</p><p>还有为什么要先输出第一个，这是这类题的一个技巧，因为结尾不能有空行，所以先输出第一个。</p><h2 id="附"><a href="#附" class="headerlink" title="附:"></a>附:</h2><p>没那么大的数该怎么算各位对应的数字的和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,s=<span class="hljs-number">0</span>;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">while</span>(n)&#123;<br>    s+=n%<span class="hljs-number">10</span>;<br>    n/=<span class="hljs-number">10</span>;<br>&#125;<br>cout&lt;&lt;s;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="1003（17-20）："><a href="#1003（17-20）：" class="headerlink" title="1003（17/20）："></a>1003（17/20）：</h1><p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p><p>得到“<strong>答案正确</strong>”的条件是：</p><ol><li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li><li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li><li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li></ol><p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p><h3 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (≤10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p><h3 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h3 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs">10<br>PAT<br>PAAT<br>AAPATAA<br>AAPAATAAAA<br>xPATx<br>PT<br>Whatever<br>APAAATAA<br>APT<br>APATTAA<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">YES</span><br><span class="hljs-keyword">YES</span><br><span class="hljs-keyword">YES</span><br><span class="hljs-keyword">YES</span><br><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">NO</span><br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答：-2"><a href="#解答：-2" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;regex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;   <span class="hljs-comment">//输入要输入多少个数</span><br>    cin.<span class="hljs-built_in">get</span>();<br>    string x = <span class="hljs-string">&quot;(^[\\sA]*)(P)(A)([\\sA]&#123;0,1&#125;)(T)([\\sA]*)([\\sA]*$)&quot;</span>;  <span class="hljs-comment">//正则表达式字符串</span><br>    <span class="hljs-function">regex <span class="hljs-title">r</span><span class="hljs-params">(x)</span></span>;   <span class="hljs-comment">//将字符串转换成正则表达式</span><br>    smatch result;<br>    string str;<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> z = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (s++ &lt;= n) &#123;<br>        <span class="hljs-built_in">getline</span>(cin, str);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">regex_search</span>(str, result, r))  <span class="hljs-comment">//regex_seach()方法进行判断</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;YES\n&quot;</span>;   <span class="hljs-comment">//正确的输出YES</span><br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;NO\n&quot;</span>;    <span class="hljs-comment">//错误的输出NO</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分析和心得："><a href="#分析和心得：" class="headerlink" title="分析和心得："></a>分析和心得：</h2><p>这题只拿了17分，我拿到这题就想用正则表达式来写（字符串的匹配问题），这个正则表达式在测试里的确可以通过，但是在测试点里有错误，有点难顶。使用方法没啥好说的，都是在正则表达式库中的方法。具体解法还没看，看完再补。</p><hr><h1 id="1004（20-20）："><a href="#1004（20-20）：" class="headerlink" title="1004（20/20）："></a>1004（20/20）：</h1><p>读入 <em>n</em>（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><h3 id="输入格式：-3"><a href="#输入格式：-3" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，格式为</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">第<span class="hljs-number"> 1 </span>行：正整数 n<br>第<span class="hljs-number"> 2 </span>行：第<span class="hljs-number"> 1 </span>个学生的姓名 学号 成绩<br>第<span class="hljs-number"> 3 </span>行：第<span class="hljs-number"> 2 </span>个学生的姓名 学号 成绩<br>  ... ... ...<br>第 n+1 行：第 n 个学生的姓名 学号 成绩<br></code></pre></td></tr></table></figure><p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p><h3 id="输出格式：-3"><a href="#输出格式：-3" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p><h3 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">3</span><br>Joe Math<span class="hljs-number">990112 89</span><br>Mike CS<span class="hljs-number">991301 100</span><br>Mary EE<span class="hljs-number">990830 95</span><br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Mike CS991301<br><span class="hljs-keyword">Joe </span>Math990112<br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答：-3"><a href="#解答：-3" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>   //创建学生这个结构，包含名字，课程编号，分数三个属性</span><br><span class="hljs-class">&#123;</span><br>string name;<br>string number;<br><span class="hljs-keyword">int</span> score;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n;<br>cin &gt;&gt; n;<br>cin.<span class="hljs-built_in">get</span>();<br>Student temp,studentMax,studentMin;   <span class="hljs-comment">//创建三个学生结构实体</span><br>studentMax.score = <span class="hljs-number">-1</span>;   <span class="hljs-comment">//Max的最大分数为-1</span><br>studentMin.score = <span class="hljs-number">101</span>;  <span class="hljs-comment">//Min的最小分数为101</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;   <span class="hljs-comment">//n来控制循环</span><br>cin &gt;&gt; temp.name &gt;&gt;temp.number &gt;&gt;temp.score; <span class="hljs-comment">//输入不同的学生的对应的属性</span><br><span class="hljs-keyword">if</span> (temp.score &gt; studentMax.score)   <span class="hljs-comment">//将学生的分数和最大值比较，比最大值大就将值赋给最大值</span><br>studentMax = temp;<br><span class="hljs-keyword">if</span> (temp.score &lt; studentMin.score)   <span class="hljs-comment">////将学生的分数和最小值比较，比最小值小就将值赋给最小值</span><br>studentMin = temp;<br>&#125;<br>cout &lt;&lt; studentMax.name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; studentMax.number &lt;&lt; endl;<br>cout &lt;&lt; studentMin.name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; studentMin.number &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分析与心得：-2"><a href="#分析与心得：-2" class="headerlink" title="分析与心得："></a>分析与心得：</h2><p>这题我一开始拿到手居然第一反应是用<code>map&lt;key,value&gt;</code>关联容器来写，最后写出来个<code>map&lt;map&lt;string,string&gt;,int&gt;&gt;</code>这种类型，包括排序也完成了（对于<code>map</code>排序，将<code>value</code>值传入到一个<code>vector&lt;map&lt;string,string&gt;,int&gt;&gt;</code>中，对<code>vector</code>使用<code>sort</code>来排序）。但是有个大问题是<code>key</code>没有跟着<code>value</code>的变动一起变动，这就让我及其郁闷。</p><p>后来我实在没办法就只能上谷歌搜了一下，看到结构时候我就明白了，OOP是白学了，写个类简单的事，居然拿<code>map</code>关联容器来做，我当时就觉得自己像个啥b……，知道用OOP之后就很快写出来了。</p><p>这题中满分是100分，将最大值一开始设置为-1，最小值设为101，将传入的数不停的和这两个数比较，得到最终的值输出即可。</p><hr><h1 id="1005（25-25）："><a href="#1005（25-25）：" class="headerlink" title="1005（25/25）："></a>1005（25/25）：</h1><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 <em>n</em>=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 <em>n</em>=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 <em>n</em> 为“关键数”，如果 <em>n</em> 不能被数列中的其他数字所覆盖。</p><p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><h3 id="输入格式：-4"><a href="#输入格式：-4" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 <em>K</em> (&lt;100)，第 2 行给出 <em>K</em> 个互不相同的待验证的正整数 <em>n</em> (1&lt;<em>n</em>≤100)的值，数字间用空格隔开。</p><h3 id="输出格式：-4"><a href="#输出格式：-4" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p><h3 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">6<br>3<span class="hljs-number"> 5 </span>6<span class="hljs-number"> 7 </span>8 11<br>结尾无空行<br></code></pre></td></tr></table></figure><h3 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">7 6<br>结尾无空行<br></code></pre></td></tr></table></figure><h2 id="解答：-4"><a href="#解答：-4" class="headerlink" title="解答："></a>解答：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">unsigned</span> a;<br>    cin &gt;&gt; a;<br>    cin.<span class="hljs-built_in">get</span>();<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> n;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt;vcin;<br>    <br>    <span class="hljs-keyword">while</span> (a != <span class="hljs-number">0</span>) &#123;    <span class="hljs-comment">//a来控制循环</span><br>        cin &gt;&gt; n;    <br>        vcin.<span class="hljs-built_in">push_back</span>(n);  <span class="hljs-comment">//将输入的数放入vcin中</span><br>        a--;                <span class="hljs-comment">//a每次减1</span><br>    &#125;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt;<span class="hljs-built_in">vcopy</span>(vcin);   <span class="hljs-comment">//将存放输入的数的vcin复制一份到vcopy</span><br>   <br>    vector&lt;<span class="hljs-keyword">int</span>&gt;vi;    <span class="hljs-comment">//用来存放计算猜想中出现的中间数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> vcin_it = vcin.<span class="hljs-built_in">begin</span>(); vcin_it != vcin.<span class="hljs-built_in">end</span>(); vcin_it++) &#123;  <span class="hljs-comment">//对vcin进行遍历</span><br>        <span class="hljs-keyword">while</span> (*vcin_it != <span class="hljs-number">1</span>) &#123;    <span class="hljs-comment">//当数不为1时,继续循环</span><br>            <span class="hljs-keyword">if</span> (*vcin_it % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">//数为偶数时</span><br>                *vcin_it /= <span class="hljs-number">2</span>;<br>                vi.<span class="hljs-built_in">push_back</span>(*vcin_it);    <span class="hljs-comment">//将这个中间数存入vi中</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;                        <span class="hljs-comment">//为奇数时</span><br>                *vcin_it = (<span class="hljs-number">3</span> * *vcin_it + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;  <br>                vi.<span class="hljs-built_in">push_back</span>(*vcin_it);    <span class="hljs-comment">//将这个中间数存入vi中</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> vi_it = vi.<span class="hljs-built_in">begin</span>(); vi_it != vi.<span class="hljs-built_in">end</span>(); ++vi_it) &#123;    <span class="hljs-comment">//对存放中间数的容器vi进行遍历</span><br>        vcopy.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">remove</span>(vcopy.<span class="hljs-built_in">begin</span>(), vcopy.<span class="hljs-built_in">end</span>(), *vi_it), vcopy.<span class="hljs-built_in">end</span>());<br>    &#125;         <span class="hljs-comment">//对vcopy容器中在vi容器进行删除，使用remove算法，这个算法返回去除数的迭代器</span><br><br>    <span class="hljs-built_in">sort</span>(vcopy.<span class="hljs-built_in">begin</span>(), vcopy.<span class="hljs-built_in">end</span>(), [](<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; lhs, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; rhs) &#123;<span class="hljs-keyword">return</span> lhs &gt; rhs; &#125;);  <span class="hljs-comment">//对去除完成的vcopy</span><br>                                                                                           <span class="hljs-comment">//进行排序,使用Lambda</span><br>    <span class="hljs-keyword">auto</span> vcopy_it = vcopy.<span class="hljs-built_in">begin</span>();<br>    cout &lt;&lt; *vcopy_it;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> vc_it = vcopy_it + <span class="hljs-number">1</span>; vc_it != vcopy.<span class="hljs-built_in">end</span>(); vc_it++)   <span class="hljs-comment">//遍历打印</span><br>        cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; *vc_it;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分析与心得：-3"><a href="#分析与心得：-3" class="headerlink" title="分析与心得："></a>分析与心得：</h2><p>这题刚拿到手有点懵，但是想了想还是得把中间出现的数打印出来看看，果不其然，在打印出来之后，就出现了思路。原始数列中在中间数数列中没出现过的，就是关键数。那么问题就转换成了怎么删除掉原始数列中在中间数数列中出现过的数。</p><p>这时候就很自然的想到了STL算法库中的<code>remove</code>算法，还得和<code>vector</code>中自带的<code>erase</code>配合使用。整道题的核心就在与这里。于是对中间数容器进行遍历，对要删除的容器vcopy使用用<code>remove</code>算法，返回迭代器后再用<code>erase</code>移除掉。</p>]]></content>
    
    
    <categories>
      
      <category>-PTA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-PTA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++标准库特殊设施（2）</title>
    <link href="/2021/09/30/C-%E6%A0%87%E5%87%86%E5%BA%93%E7%89%B9%E6%AE%8A%E8%AE%BE%E6%96%BD%EF%BC%882%EF%BC%89/"/>
    <url>/2021/09/30/C-%E6%A0%87%E5%87%86%E5%BA%93%E7%89%B9%E6%AE%8A%E8%AE%BE%E6%96%BD%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>继上篇的特殊设施1，这篇是讲讲正则表达式Regex。</p><p>我转载了一篇在Github上的文，正则表达式在C++里有时候意外的好用。其实正则表达式的难点不在于怎么使用，而在于怎么写对一个正确的正则表达式。</p>]]></content>
    
    
    <categories>
      
      <category>-C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++标准库特殊设施（1）</title>
    <link href="/2021/09/28/C-%E6%A0%87%E5%87%86%E5%BA%93%E7%89%B9%E6%AE%8A%E8%AE%BE%E6%96%BD%EF%BC%881%EF%BC%89/"/>
    <url>/2021/09/28/C-%E6%A0%87%E5%87%86%E5%BA%93%E7%89%B9%E6%AE%8A%E8%AE%BE%E6%96%BD%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>C++在STL库里提供了一些有意思的玩意儿，比如随机数生成和正则表达式。随机数分布正好就是最近学的概率论那些个分布。C++可以根据你提供的分布的特征来生成符合随机分布特征的数。</p><span id="more"></span>　　<h1 id="随机数生成："><a href="#随机数生成：" class="headerlink" title="随机数生成："></a>随机数生成：</h1><p>在早先我写随机数的方法，一般是调用C方法库中的<code>ctime</code>,<code>cstdlib</code>这两个库中的<code>rand</code>函数（<code>ctime</code>里的<code>time(0)</code>提供随机数种子）来生成随机数。但是有时候有些问题，<code>rand</code>函数总是那些个数（最小值0，最大值32767），且有时候程序需要一些符合分布的随机数，<code>rand</code>函数无法做到。所以，我后来使用C++中定义在<code>random</code>头文件中的随机数引擎和随机数分布类来生成随机数。</p><h2 id="一，随机数引擎"><a href="#一，随机数引擎" class="headerlink" title="一，随机数引擎"></a>一，随机数引擎</h2><p>随机数引擎是一个带有状态的随机性源头，其状态决定了它将生成哪一个随机值序列，注意这并非随机数。每次以operator()调用它，就可以产出一个随机的无正负号值，并且内部状态改变，使得可以此后再产出一个新随机值。</p><h3 id="1、默认引擎：default-random-engine"><a href="#1、默认引擎：default-random-engine" class="headerlink" title="1、默认引擎：default_random_engine"></a>1、默认引擎：<code>default_random_engine</code></h3><h3 id="2、基础引擎：提供各种基本算法用以生成随机值"><a href="#2、基础引擎：提供各种基本算法用以生成随机值" class="headerlink" title="2、基础引擎：提供各种基本算法用以生成随机值"></a>2、基础引擎：提供各种基本算法用以生成随机值</h3><pre><code>（1）std::linear_congruential_engine（2）std::mersenne_twister_engine（3）std::subtract_with_carry_engine</code></pre><h3 id="3、引擎适配器：根据一个基础引擎而初始化"><a href="#3、引擎适配器：根据一个基础引擎而初始化" class="headerlink" title="3、引擎适配器：根据一个基础引擎而初始化"></a>3、引擎适配器：根据一个基础引擎而初始化</h3><pre><code>    （1）std::discard_block_engine    （2）std::independent_bits_engine    （3）std::shuffle_order_engine</code></pre><h3 id="4、适配器并带预定义参数："><a href="#4、适配器并带预定义参数：" class="headerlink" title="4、适配器并带预定义参数："></a>4、适配器并带预定义参数：</h3><pre><code>（1）minstd_rand0（2）minstd_rand（3）mt19937（4）mt19937_64（5）ranlux24_base（6）ranlux48_base（7）ranlux24（8）ranlux48（9）knuth_b</code></pre><h2 id="二、C-提供的分布"><a href="#二、C-提供的分布" class="headerlink" title="二、C++提供的分布"></a>二、C++提供的分布</h2><p>所谓分布是把引擎产生的随机数转换为真实而有用的随机数。产出数的概率取决于使用何种分布，后者可根据程序员的需要被参数化。</p><p>针对不同的随机值类型，C++标准库提供了多种分布：线性、正态/高斯、指数、伽马、伯努利等。</p><h3 id="1、均匀分布"><a href="#1、均匀分布" class="headerlink" title="1、均匀分布"></a>1、均匀分布</h3><pre><code>（1）uniform_int_distribution  ： IntType（2）uniform_real_distribution :  RealType</code></pre><h3 id="2、伯努利分布"><a href="#2、伯努利分布" class="headerlink" title="2、伯努利分布"></a>2、伯努利分布</h3><pre><code>（1）bernoulli_distribution           ：   bool（2）binomial_distribution           :   IntType（3）geometric_distribution           ：   IntType（4）negative_binomial_distribution :   IntType</code></pre><h3 id="3、泊松分布"><a href="#3、泊松分布" class="headerlink" title="3、泊松分布"></a>3、泊松分布</h3><pre><code>（1）poisson_distribution：          IntType（2）exponential_distribution:       RealType（3）gamma_distribution：            RealType（4）weibull_distribution:           RealType (5)extreme_value_distribution:     RealType</code></pre><h3 id="4、正态分布"><a href="#4、正态分布" class="headerlink" title="4、正态分布"></a>4、正态分布</h3><pre><code>（1）normal_distribution：          RealType（2）lognormal_distribution:        RealType（3）chi_squared_distribution：     RealType（4）cauchy_distribution:           RealType（5）fisher_f_distribution:         RealType（6）student_t_distribution:        RealType</code></pre><h3 id="5、抽样分布"><a href="#5、抽样分布" class="headerlink" title="5、抽样分布"></a>5、抽样分布</h3><pre><code>（1）discrete_distribution：                IntType（2）piecewise_constant_distribution:       RealType（3）piecewise_linear_distribution：        RealType</code></pre><h2 id="三、随机数生成实例"><a href="#三、随机数生成实例" class="headerlink" title="三、随机数生成实例"></a>三、随机数生成实例</h2><p>至此，我们只需要记住：</p><p><strong>随机数 = 随机数引擎 + 分布</strong></p><p>即可完成随机数的生成，至于选择何种引擎和分布方式，由自己决定，可查看引擎和分布的详细含义及结合自己的需要来决定。</p><p>另外，所有的引擎和分布都包含在头文件 random 中，因此需要包含此头文件。</p><p>生成随机数的三步骤：</p><p>1、选择引擎<br>2、选择分布<br>3、使用引擎+分布，生成随机数</p><p>以下是代码示例，正态分布（均值4，方差1.5）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>default_random_engine e;  <span class="hljs-comment">//随机数引擎</span><br>normal_distribution&lt;&gt;<span class="hljs-built_in">n</span>(<span class="hljs-number">4</span>, <span class="hljs-number">1.5</span>); <span class="hljs-comment">//均值4，方差1.5</span><br>vector&lt;<span class="hljs-keyword">unsigned</span>&gt;<span class="hljs-built_in">vals</span>(<span class="hljs-number">9</span>);    <span class="hljs-comment">//9个元素均为0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i != <span class="hljs-number">200</span>; ++i) &#123;<br><span class="hljs-keyword">unsigned</span> v = <span class="hljs-built_in">lround</span>(<span class="hljs-built_in">n</span>(e));   <span class="hljs-comment">//舍入到最接近的整数</span><br><span class="hljs-keyword">if</span> (v &lt; vals.<span class="hljs-built_in">size</span>())   <span class="hljs-comment">//如果在统计范围内</span><br>++vals[v];    <span class="hljs-comment">//统计出现多少次</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> j = <span class="hljs-number">0</span>; j != vals.<span class="hljs-built_in">size</span>(); ++j)<br>cout &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; <span class="hljs-built_in">string</span>(vals[j], <span class="hljs-string">&#x27;*&#x27;</span> )&lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">0: <span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-emphasis"><span class="hljs-strong">1: <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">2: <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**</span></span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">3: **</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**</span></span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">4: **</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">5: **</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**</span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">6: **</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">7: <span class="hljs-strong">****</span>*</span></span><br><span class="hljs-strong">8: <span class="hljs-emphasis">*</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>串的模式匹配算法</title>
    <link href="/2021/09/25/%E4%B8%B2%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/"/>
    <url>/2021/09/25/%E4%B8%B2%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>串的模式匹配算法在《大话数据结构》中一共讲了两种：朴素模式匹配算法和KMP算法。朴素模式匹配算法相对效率低且时间复杂度高，KMP算法就相对好得多。</p><span id="more"></span>　　<h1 id="引子："><a href="#引子：" class="headerlink" title="引子："></a>引子：</h1><p>首先得搞清楚几个概念：</p><ol><li>模式匹配：就是在一个主串里找出一个对应的子串（在一篇文章里找出一个单词，主串就是文章，子串就是单词）。</li><li>next数组：在KMP算法中使用，存储了每个子串前后缀相似的，需要移动的位数。</li><li>nextVal数组：在KMP算法修改版中使用，和next数组类似。</li></ol><h1 id="朴素模式匹配算法："><a href="#朴素模式匹配算法：" class="headerlink" title="朴素模式匹配算法："></a>朴素模式匹配算法：</h1><p>朴素模式算法算暴力破解，当我们将子串和主串进行比较时，遇到不匹配的地方就让子串向后移动一位重新比较，不断地重新比较，直到在主串里遇到和子串匹配的子串或者匹配失败。举个例子：</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stan">主串：   g o o d g o o g l <span class="hljs-built_in">e</span><br>子串：   g o o g l <span class="hljs-built_in">e</span><br>在子串第四位时不匹配（主串是d，子串是g），我们将子串向后移<br><br>主串：   g o o d g o o g l <span class="hljs-built_in">e</span><br>子串：     g o o g l <span class="hljs-built_in">e</span><br>子串第一位即匹配失败，继续将子串向后移动<br><br>主串：   g o o d g o o g l <span class="hljs-built_in">e</span><br>子串：       g o o g l <span class="hljs-built_in">e</span><br>第一位匹配失败，继续将子串向后移动<br><br>主串：   g o o d g o o g l <span class="hljs-built_in">e</span><br>子串：         g o o g l <span class="hljs-built_in">e</span><br>第一位匹配失败，继续将子串向后移动<br><br>主串：   g o o d g o o g l <span class="hljs-built_in">e</span><br>子串：           g o o g l <span class="hljs-built_in">e</span><br>匹配成功！<br></code></pre></td></tr></table></figure><p>上面即为朴素模式算法，理解起来也很容易，就是将子串不断向后移动，代码实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXSIZE = <span class="hljs-number">100</span>;  <span class="hljs-comment">//存储空间初始分配量 </span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> String[MAXSIZE + <span class="hljs-number">1</span>];  <span class="hljs-comment">//创建String，[0]号位置存储的是该串长度</span><br><span class="hljs-comment">//返回子串T在主串S中第pos个字符之后的位置。若不存在,则函数返回值为0</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">index</span><span class="hljs-params">(String S,String T,<span class="hljs-keyword">int</span> pos)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i = pos;   <span class="hljs-comment">//将i设置为pos</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;     <span class="hljs-comment">//j设置为子串起始位置，即1</span><br>    <span class="hljs-keyword">while</span>(i&lt;=S[<span class="hljs-number">0</span>]&amp;&amp;j&lt;=T[<span class="hljs-number">0</span>])&#123;    <span class="hljs-comment">//判断i和j的合法性</span><br>        <span class="hljs-keyword">if</span>(S[i]==T[j])&#123;     <span class="hljs-comment">//如果两个字符匹配</span><br>            ++i;            <span class="hljs-comment">//累加，继续比较下一个</span><br>            ++j;<br>        &#125;<span class="hljs-keyword">else</span>&#123;             <span class="hljs-comment">//比较失败</span><br>            i = i-j+<span class="hljs-number">2</span>;     <span class="hljs-comment">//i回退到开始的下一个位置</span><br>            j = <span class="hljs-number">1</span>;         <span class="hljs-comment">//j从起始位置重新开始</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j&gt;T[<span class="hljs-number">0</span>])             <span class="hljs-comment">//j&gt;T[0]，说明子串已经全部比较完成</span><br>        <span class="hljs-keyword">return</span> i - T[<span class="hljs-number">0</span>];   <span class="hljs-comment">//返回位置</span><br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;          <span class="hljs-comment">//未找到，返回0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>朴素模式匹配算法的最坏情况时间复杂度：O((n-m+1)*m)。</p><h1 id="KMP模式匹配算法："><a href="#KMP模式匹配算法：" class="headerlink" title="KMP模式匹配算法："></a>KMP模式匹配算法：</h1><p>朴素匹配模式算法好理解，但是这样一位一位比下去，效率实在太低，于是前辈们搞出来一个KMP算法（有点递推的味道）。朴素模式比较下去的痛点是什么？我们还是举个例子：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs stylus">        i=<span class="hljs-number">6</span><br>主串：<span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span><br>子串：<span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e x<br>        j=<span class="hljs-number">6</span><br>这里在子串的第六位x和主串f不相等，向后移动<br>    <br>       i=<span class="hljs-number">2</span><br>主串：<span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span><br>子串：  <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e x<br>        j=<span class="hljs-number">1</span><br>匹配失败，继续向后移动<br><br>        i=<span class="hljs-number">3</span><br>主串：<span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span><br>子串：    <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e x<br>         j=<span class="hljs-number">1</span><br>匹配失败，继续向后移动<br><br>         i=<span class="hljs-number">4</span><br>主串：<span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span><br>子串：      <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e x<br>         j=<span class="hljs-number">1</span><br>匹配失败，继续向后移动……<br><br>          i=<span class="hljs-number">5</span><br>主串：<span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span><br>子串：        <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e x<br>             j=<span class="hljs-number">1</span><br>匹配失败，继续向后移动<br><br>               i=<span class="hljs-number">6</span><br>主串：<span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span><br>子串：          <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e x<br>                j=<span class="hljs-number">1</span><br>匹配成功，继续向后移动……<br></code></pre></td></tr></table></figure><p>我们发现，对要匹配的子串来说，a和后面的串bcdex中任意的字符都不相等，但是在第一步中，前5位字符主串和子串分别相等，那也就是说a不可能和2到5位字符相等，所以，上面的2-5步都是多余的。这里就是KMP算法的关键！我们保持主串的指针位置保持不变，仅移动子串。将子串的指针每次需要移动的位数保存起来，这个数组则是next数组。</p><p>上代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXSIZE = <span class="hljs-number">100</span>;  <span class="hljs-comment">//存储空间初始分配量 </span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> String[MAXSIZE + <span class="hljs-number">1</span>];  <span class="hljs-comment">//创建String，[0]号位置存储的是该串长度</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getNext</span><span class="hljs-params">(String T,<span class="hljs-keyword">int</span>* next)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;     <span class="hljs-comment">//next数组一号默认为0</span><br>    <span class="hljs-keyword">while</span>(i&lt;T[<span class="hljs-number">0</span>])&#123;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>||next[i]==next[k])&#123;   <br>            ++i;<br>            ++k;<br>            next[i] = k;<br>        &#125;<span class="hljs-keyword">else</span><br>            k = next[k];   <span class="hljs-comment">//若字符不相同，则k值回溯</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//返回子串T在主串S中第pos个字符之后的位置。若不存在，则函数返回值为0。</span><br><span class="hljs-comment">//T非空，1≤pos≤StrLength(S)。</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">KMPIndex</span><span class="hljs-params">(String S,String T,<span class="hljs-keyword">int</span> pos)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i = pos;<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> next[<span class="hljs-number">255</span>];   <span class="hljs-comment">//定义next数组,长度要足够长</span><br>    <span class="hljs-built_in">getNext</span>(T,next);  <span class="hljs-comment">//对T进行分析，得到next数组</span><br>    <span class="hljs-keyword">while</span>(i&lt;=S[<span class="hljs-number">0</span>]&amp;&amp;j&lt;T[<span class="hljs-number">0</span>])&#123;  <span class="hljs-comment">//若i小于S的长度并且j小于T的长度时，循环继续</span><br>        <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>||S[i]==T[j])&#123;  <span class="hljs-comment">//两字母相等则继续，与朴素算法增加了j=0判断</span><br>            ++i;<br>            ++j;<br>        &#125;<span class="hljs-keyword">else</span>     <span class="hljs-comment">//指针后退重新开始匹配</span><br>            j = next[j];  <span class="hljs-comment">//j退回合适的位置，i值不变</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(j&gt;T[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> i - T[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样执行效率比原先的朴素模式算法会高很多，但是KMP算法还是存在一个问题，就是遇到一种前面字符都相同且只有最后一个字符不同时，依旧效率不高（next数组原因）。于是，就有了改进KMP算法。</p><h1 id="改进KMP算法："><a href="#改进KMP算法：" class="headerlink" title="改进KMP算法："></a>改进KMP算法：</h1><p>改进KMP算法和原KMP算法不同之处在于改变了next数组的值。上代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXSIZE = <span class="hljs-number">100</span>;  <span class="hljs-comment">//存储空间初始分配量 </span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> String[MAXSIZE + <span class="hljs-number">1</span>];  <span class="hljs-comment">//创建String，[0]号位置存储的是该串长度</span><br><span class="hljs-comment">//求模式串T的next函数修正值并存入数组nextval</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getNextVal</span><span class="hljs-params">(String T,<span class="hljs-keyword">int</span>* nextVal)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    nextVal[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;T[<span class="hljs-number">0</span>])&#123;   <span class="hljs-comment">//此处T[0]表示串T的长度</span><br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>||T[i]==T[k])&#123;  <span class="hljs-comment">//T[i]表示后缀的单个字符，T[k]表示前缀的单个字符</span><br>            ++i;<br>            ++k;<br>            <span class="hljs-keyword">if</span>(T[i]!=T[k])   <span class="hljs-comment">//若当前字符与前缀字符不同</span><br>                nextVal[i] = k;  <span class="hljs-comment">//则当前的j为nextval在i位置的值</span><br>            <span class="hljs-keyword">else</span><br>                nextVal[i] = nextVal[k]; <span class="hljs-comment">//如果与前缀字符相同，则将前缀字符的nextval值赋值                                                               给nextval在i位置的值</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            k = nextVal[k];   <span class="hljs-comment">//若字符不相同，则k值回溯</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//同KMP算法，只是</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">KMPIndexCharge</span><span class="hljs-params">(String S,String T,<span class="hljs-keyword">int</span> pos)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i = pos;<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> nextVal[<span class="hljs-number">255</span>];<br>    <span class="hljs-built_in">getNextVal</span>(T,nextVal);<br>    <span class="hljs-keyword">while</span>(i&lt;=S[<span class="hljs-number">0</span>]&amp;&amp;j&lt;T[<span class="hljs-number">0</span>])&#123;<br>        <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>||S[i]==T[j])&#123;<br>            ++i;<br>            ++j;<br>        &#125;<span class="hljs-keyword">else</span><br>            j = nextVal[j];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j&gt;T[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> i - T[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">else</span><br>        <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2021/09/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/09/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式?"></a>什么是正则表达式?</h2><blockquote><p>正则表达式是一组由字母和符号组成的特殊文本, 它可以用来从文本中找出满足你想要的格式的句子.</p></blockquote><p>一个正则表达式是在一个主体字符串中从左到右匹配字符串时的一种样式.<br>例如”Regular expression”是一个完整的句子, 但我们常使用缩写的术语”regex”或”regexp”.<br>正则表达式可以用来替换文本中的字符串,验证形式,提取字符串等等.</p><p>想象你正在写一个应用, 然后你想设定一个用户命名的规则, 让用户名包含字符,数字,下划线和连字符,以及限制字符的个数,好让名字看起来没那么丑.</p><p>这篇文章，来自GitHub：<a href="https://github.com/ziishaned/learn-regex">ziishaned/learn-regex: Learn regex the easy way (github.com)</a></p><span id="more"></span>　<h2 id="1-基本匹配"><a href="#1-基本匹配" class="headerlink" title="1. 基本匹配"></a>1. 基本匹配</h2><p>正则表达式其实就是在执行搜索时的格式, 它由一些字母和数字组合而成.<br>例如: 一个正则表达式 <code>the</code>, 它表示一个规则: 由字母<code>t</code>开始,接着是<code>h</code>,再接着是<code>e</code>.</p><pre>"the" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat. </pre><p>正则表达式<code>123</code>匹配字符串<code>123</code>. 它逐个字符的与输入的正则表达式做比较.</p><p>正则表达式是大小写敏感的, 所以<code>The</code>不会匹配<code>the</code>.</p><pre>"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.</pre><h2 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2. 元字符"></a>2. 元字符</h2><p>正则表达式主要依赖于元字符.<br>元字符不代表他们本身的字面意思, 他们都有特殊的含义. 一些元字符写在方括号中的时候有一些特殊的意思. 以下是一些元字符的介绍:</p><table><thead><tr><th align="center">元字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">.</td><td>句号匹配任意单个字符除了换行符.</td></tr><tr><td align="center">[ ]</td><td>字符种类. 匹配方括号内的任意字符.</td></tr><tr><td align="center">[^ ]</td><td>否定的字符种类. 匹配除了方括号里的任意字符</td></tr><tr><td align="center">*</td><td>匹配&gt;=0个重复的在*号之前的字符.</td></tr><tr><td align="center">+</td><td>匹配&gt;1个重复的+号前的字符.</td></tr><tr><td align="center">?</td><td>标记?之前的字符为可选.</td></tr><tr><td align="center">{n,m}</td><td>匹配num个中括号之前的字符 (n &lt;= num &lt;= m).</td></tr><tr><td align="center">(xyz)</td><td>字符集, 匹配与 xyz 完全相等的字符串.</td></tr><tr><td align="center">&#124;</td><td>或运算符,匹配符号前或后的字符.</td></tr><tr><td align="center">&#92;</td><td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) &#123; &#125; . * + ? ^ $ \ &#124;</code></td></tr><tr><td align="center">^</td><td>从开始行开始匹配.</td></tr><tr><td align="center">$</td><td>从末端开始匹配.</td></tr></tbody></table><h2 id="2-1-点运算符"><a href="#2-1-点运算符" class="headerlink" title="2.1 点运算符 ."></a>2.1 点运算符 <code>.</code></h2><p><code>.</code>是元字符中最简单的例子.<br><code>.</code>匹配任意单个字符, 但不匹配换行符.<br>例如, 表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串.</p><pre>".ar" => The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre><h2 id="2-2-字符集"><a href="#2-2-字符集" class="headerlink" title="2.2 字符集"></a>2.2 字符集</h2><p>字符集也叫做字符类.<br>方括号用来指定一个字符集.<br>在方括号中使用连字符来指定字符集的范围.<br>在方括号中的字符集不关心顺序.<br>例如, 表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>.</p><pre>"[Tt]he" => <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><p>方括号的句号就表示句号.<br>表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p><pre>"ar[.]" => A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a></pre><h3 id="2-2-1-否定字符集"><a href="#2-2-1-否定字符集" class="headerlink" title="2.2.1 否定字符集"></a>2.2.1 否定字符集</h3><p>一般来说 <code>^</code> 表示一个字符串的开头, 但它用在一个方括号的开头的时候, 它表示这个字符集是否定的.<br>例如, 表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符.</p><pre>"[^c]ar" => The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre><h2 id="2-3-重复次数"><a href="#2-3-重复次数" class="headerlink" title="2.3 重复次数"></a>2.3 重复次数</h2><p>后面跟着元字符 <code>+</code>, <code>*</code> or <code>?</code> 的, 用来指定匹配子模式的次数.<br>这些元字符在不同的情况下有着不同的意思.</p><h3 id="2-3-1-号"><a href="#2-3-1-号" class="headerlink" title="2.3.1 * 号"></a>2.3.1 <code>*</code> 号</h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次.<br>例如, 表达式 <code>a*</code> 匹配以0或更多个a开头的字符, 因为有0个这个条件, 其实也就匹配了所有的字符. 表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串.</p><pre>"[a-z]*" => T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.</pre><p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>.<br><code>*</code>和表示匹配空格的符号<code>\s</code>连起来用, 如表达式<code>\s*cat\s*</code>匹配0或更多个空格开头和0或更多个空格结尾的cat字符串.</p><pre>"\s*cat\s*" => The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the <a href="#learn-regex">con<strong>cat</strong>enation</a>.</pre><h3 id="2-3-2-号"><a href="#2-3-2-号" class="headerlink" title="2.3.2 + 号"></a>2.3.2 <code>+</code> 号</h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次个字符.<br>例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾,中间跟着任意个字符的字符串.</p><pre>"c.+t" => The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.</pre><h3 id="2-3-3-号"><a href="#2-3-3-号" class="headerlink" title="2.3.3 ? 号"></a>2.3.3 <code>?</code> 号</h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选, 即出现 0 或 1 次.<br>例如, 表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>.</p><pre>"[T]he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.</pre><pre>"[T]?he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.</pre><h2 id="2-4-号"><a href="#2-4-号" class="headerlink" title="2.4 {} 号"></a>2.4 <code>&#123;&#125;</code> 号</h2><p>在正则表达式中 <code>&#123;&#125;</code> 是一个量词, 常用来一个或一组字符可以重复出现的次数.<br>例如,  表达式 <code>[0-9]&#123;2,3&#125;</code> 匹配 2<del>3 位 0</del>9 的数字.</p><pre>"[0-9]{2,3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.</pre><p>我们可以省略第二个参数.<br>例如, <code>[0-9]&#123;2,&#125;</code> 匹配至少两位 0~9 的数字.</p><p>如果逗号也省略掉则表示重复固定的次数.<br>例如, <code>[0-9]&#123;3&#125;</code> 匹配3位数字</p><pre>"[0-9]{2,}" => The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.</pre><pre>"[0-9]{3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to 10.0.</pre><h2 id="2-5-特征标群"><a href="#2-5-特征标群" class="headerlink" title="2.5 (...) 特征标群"></a>2.5 <code>(...)</code> 特征标群</h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式. 例如之前说的 <code>&#123;&#125;</code> 是用来表示前面一个字符出现指定次数. 但如果在 <code>&#123;&#125;</code> 前加入特征标群则表示整个标群内的字符重复 N 次. 例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>.</p><p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或. 例如, <code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p><pre>"(c|g|p)ar" => The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre><h2 id="2-6-或运算符"><a href="#2-6-或运算符" class="headerlink" title="2.6 | 或运算符"></a>2.6 <code>|</code> 或运算符</h2><p>或运算符就表示或, 用作判断条件.</p><p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>.</p><pre>"(T|t)he|car" => <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><h2 id="2-7-转码特殊字符"><a href="#2-7-转码特殊字符" class="headerlink" title="2.7 转码特殊字符"></a>2.7 转码特殊字符</h2><p>反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符. 用于指定 <code>&#123; &#125; [ ] / \ + * . $ ^ | ?</code> 这些特殊字符. 如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\</code>.</p><p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的. 如果想要匹配句子中的 <code>.</code> 则要写成 <code>\.</code>.</p><pre>"(f|c|m)at\.?" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a></pre><h2 id="2-8-锚点"><a href="#2-8-锚点" class="headerlink" title="2.8 锚点"></a>2.8 锚点</h2><p>在正则表达式中, 想要匹配指定开头或结尾的字符串就要使用到锚点. <code>^</code> 指定开头, <code>$</code> 指定结尾.</p><h3 id="2-8-1-号"><a href="#2-8-1-号" class="headerlink" title="2.8.1 ^ 号"></a>2.8.1 <code>^</code> 号</h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头.</p><p>例如, 在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>. 但如果使用 <code>^b</code> 将匹配不到任何结果. 应为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头.</p><p>例如, <code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串.</p><pre>"(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><pre>"^(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.</pre><h3 id="2-8-2-号"><a href="#2-8-2-号" class="headerlink" title="2.8.2 $ 号"></a>2.8.2 <code>$</code> 号</h3><p>同理于 <code>^</code> 号, <code>$</code> 号用来匹配字符是否是最后一个.</p><p>例如, <code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串.</p><pre>"(at\.)" => The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a></pre><pre>"(at\.)$" => The fat cat. sat. on the m<a href="#learn-regex"><strong>at.</strong></a></pre><h2 id="3-简写字符集"><a href="#3-简写字符集" class="headerlink" title="3. 简写字符集"></a>3. 简写字符集</h2><p>正则表达式提供一些常用的字符集简写. 如下:</p><table><thead><tr><th align="center">简写</th><th>描述</th></tr></thead><tbody><tr><td align="center">.</td><td>除换行符外的所有字符</td></tr><tr><td align="center">\w</td><td>匹配所有字母数字, 等同于 <code>[a-zA-Z0-9_]</code></td></tr><tr><td align="center">\W</td><td>匹配所有非字母数字, 即符号, 等同于: <code>[^\w]</code></td></tr><tr><td align="center">\d</td><td>匹配数字: <code>[0-9]</code></td></tr><tr><td align="center">\D</td><td>匹配非数字: <code>[^\d]</code></td></tr><tr><td align="center">\s</td><td>匹配所有空格字符, 等同于: <code>[\t\n\f\r\p&#123;Z&#125;]</code></td></tr><tr><td align="center">\S</td><td>匹配所有非空格字符: <code>[^\s]</code></td></tr></tbody></table><h2 id="4-前后关联约束-前后预查"><a href="#4-前后关联约束-前后预查" class="headerlink" title="4. 前后关联约束(前后预查)"></a>4. 前后关联约束(前后预查)</h2><p>前置约束和后置约束都属于<strong>非捕获簇</strong>(用于匹配不在匹配列表中的格式).<br>前置约束用于判断所匹配的格式是否在另一个确定的格式之后.</p><p>例如, 我们想要获得所有跟在 <code>$</code> 符号后的数字, 我们可以使用正向向后约束 <code>(?&lt;=\$)[0-9\.]*</code>.<br>这个表达式匹配 <code>$</code> 开头, 之后跟着 <code>0,1,2,3,4,5,6,7,8,9,.</code> 这些字符可以出现大于等于 0 次.</p><p>前后关联约束如下:</p><table><thead><tr><th align="center">符号</th><th>描述</th></tr></thead><tbody><tr><td align="center">?=</td><td>前置约束-存在</td></tr><tr><td align="center">?!</td><td>前置约束-排除</td></tr><tr><td align="center">?&lt;=</td><td>后置约束-存在</td></tr><tr><td align="center">?&lt;!</td><td>后置约束-排除</td></tr></tbody></table><h3 id="4-1-前置约束-存在"><a href="#4-1-前置约束-存在" class="headerlink" title="4.1 ?=... 前置约束(存在)"></a>4.1 <code>?=...</code> 前置约束(存在)</h3><p><code>?=...</code> 前置约束(存在), 表示第一部分表达式必须跟在 <code>?=...</code>定义的表达式之后.</p><p>返回结果只瞒住第一部分表达式.<br>定义一个前置约束(存在)要使用 <code>()</code>. 在括号内部使用一个问号和等号: <code>(?=...)</code>. </p><p>前置约束的内容写在括号中的等号后面.<br>例如, 表达式 <code>[T|t]he(?=\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>, 在括号中我们又定义了前置约束(存在) <code>(?=\sfat)</code> ,即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>.</p><pre>"[T|t]he(?=\sfat)" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.</pre><h3 id="4-2-前置约束-排除"><a href="#4-2-前置约束-排除" class="headerlink" title="4.2 ?!... 前置约束-排除"></a>4.2 <code>?!...</code> 前置约束-排除</h3><p>前置约束-排除 <code>?!</code> 用于筛选所有匹配结果, 筛选条件为 其后不跟随着定义的格式<br><code>前置约束-排除</code>  定义和 <code>前置约束(存在)</code> 一样, 区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>. </p><p>表达式 <code>[T|t]he(?!\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>, 且其后不跟着 <code>(空格)fat</code>.</p><pre>"[T|t]he(?!\sfat)" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.</pre><h3 id="4-3-lt-后置约束-存在"><a href="#4-3-lt-后置约束-存在" class="headerlink" title="4.3 ?&lt;= ... 后置约束-存在"></a>4.3 <code>?&lt;= ...</code> 后置约束-存在</h3><p>后置约束-存在 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果, 筛选条件为 其前跟随着定义的格式.<br>例如, 表达式 <code>(?&lt;=[T|t]he\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>, 且其前跟着 <code>The</code> 或 <code>the</code>.</p><pre>"(?<=[T|t]he\s)(fat|mat)" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.</pre><h3 id="4-4-lt-后置约束-排除"><a href="#4-4-lt-后置约束-排除" class="headerlink" title="4.4 ?&lt;!... 后置约束-排除"></a>4.4 <code>?&lt;!...</code> 后置约束-排除</h3><p>后置约束-排除 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果, 筛选条件为 其前不跟着定义的格式.<br>例如, 表达式 <code>(?&lt;!(T|t)he\s)(cat)</code> 匹配 <code>cat</code>, 且其前不跟着 <code>The</code> 或 <code>the</code>.</p><pre>"(?&lt;![T|t]he\s)(cat)" => The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.</pre><h2 id="5-标志"><a href="#5-标志" class="headerlink" title="5. 标志"></a>5. 标志</h2><p>标志也叫修饰语, 因为它可以用来修改表达式的搜索结果.<br>这些标志可以任意的组合使用, 它也是整个正则表达式的一部分.</p><table><thead><tr><th align="center">标志</th><th>描述</th></tr></thead><tbody><tr><td align="center">i</td><td>忽略大小写.</td></tr><tr><td align="center">g</td><td>全局搜索.</td></tr><tr><td align="center">m</td><td>多行的: 锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始.</td></tr></tbody></table><h3 id="5-1-忽略大小写-Case-Insensitive"><a href="#5-1-忽略大小写-Case-Insensitive" class="headerlink" title="5.1 忽略大小写 (Case Insensitive)"></a>5.1 忽略大小写 (Case Insensitive)</h3><p>修饰语 <code>i</code> 用于忽略大小写.<br>例如, 表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>, 在后面的 <code>i</code> 将其条件修改为忽略大小写, 则变成搜索 <code>the</code> 和 <code>The</code>, <code>g</code> 表示全局搜索.</p><pre>"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.</pre><pre>"/The/gi" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.</pre><h3 id="5-2-全局搜索-Global-search"><a href="#5-2-全局搜索-Global-search" class="headerlink" title="5.2 全局搜索 (Global search)"></a>5.2 全局搜索 (Global search)</h3><p>修饰符 <code>g</code> 常用于执行一个全局搜索匹配, 即(不仅仅返回第一个匹配的, 而是返回全部).<br>例如, 表达式 <code>/.(at)/g</code> 表示搜索 任意字符(除了换行) + <code>at</code>, 并返回全部结果.</p><pre>"/.(at)/" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.</pre><pre>"/.(at)/g" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.</pre><h3 id="5-3-多行修饰符-Multiline"><a href="#5-3-多行修饰符-Multiline" class="headerlink" title="5.3 多行修饰符 (Multiline)"></a>5.3 多行修饰符 (Multiline)</h3><p>多行修饰符 <code>m</code> 常用于执行一个多行匹配.</p><p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾. 但我们如果想要它在每行的开头和结尾生效, 我们需要用到多行修饰符 <code>m</code>.</p><p>例如, 表达式 <code>/at(.)?$/gm</code> 表示在待检测字符串每行的末尾搜索 <code>at</code>后跟一个或多个 <code>.</code> 的字符串, 并返回全部结果.</p><pre>"/.at(.)?$/" => The fat                cat sat                on the <a href="#learn-regex"><strong>mat.</strong></a></pre><pre>"/.at(.)?$/gm" => The <a href="#learn-regex"><strong>fat</strong></a>                  cat <a href="#learn-regex"><strong>sat</strong></a>                  on the <a href="#learn-regex"><strong>mat.</strong></a></pre><h2 id="额外补充"><a href="#额外补充" class="headerlink" title="额外补充"></a>额外补充</h2><ul><li><em>正整数</em>: <code>^\d+$</code></li><li><em>负整数</em>: <code>^-\d+$</code></li><li><em>手机国家号</em>: <code>^+?[\d\s]&#123;3,&#125;$</code></li><li><em>手机号</em>: <code>^+?[\d\s]+(?[\d\s]&#123;10,&#125;$</code></li><li><em>整数</em>: <code>^-?\d+$</code></li><li><em>用户名</em>: <code>^[\w\d_.]&#123;4,16&#125;$</code></li><li><em>数字和英文字母</em>: <code>^[a-zA-Z0-9]*$</code></li><li><em>数字和应为字母和空格</em>: <code>^[a-zA-Z0-9 ]*$</code></li><li><em>密码</em>: <code>^(?=^.&#123;6,&#125;$)((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.*$</code></li><li><em>邮箱</em>: <code>^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,4&#125;)*$</code></li><li><em>IPv4 地址</em>: <code>^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$</code></li><li><em>纯小写字母</em>: <code>^([a-z])*$</code></li><li><em>纯大写字母</em>: <code>^([A-Z])*$</code></li><li><em>URL</em>: <code>^(((http|https|ftp):\/\/)?([[a-zA-Z0-9]\-\.])+(\.)([[a-zA-Z0-9]])&#123;2,4&#125;([[a-zA-Z0-9]\/+=%&amp;_\.~?\-]*))*$</code></li><li><em>VISA 信用卡号</em>: <code>^(4[0-9]&#123;12&#125;(?:[0-9]&#123;3&#125;)?)*$</code></li><li><em>日期 (MM/DD/YYYY)</em>: <code>^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]&#123;2&#125;$</code></li><li><em>日期 (YYYY/MM/DD)</em>: <code>^(19|20)?[0-9]&#123;2&#125;[- /.](0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])$</code></li><li><em>MasterCard 信用卡号</em>: <code>^(5[1-5][0-9]&#123;14&#125;)*$</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>-番外</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++中的函数式编程</title>
    <link href="/2021/08/29/C-%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <url>/2021/08/29/C-%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>函数式编程这块，是我的遗留问题，在看第一本书《C++ Primer Plus》时候感觉麻烦至极，但是在看完《C++ Primer》后，我直呼真香。</p><span id="more"></span>　<p>原因是在接触到C++算法库的时候，无论STL里内置的排序算法，还是遍历算法，都需要传入迭代器和执行策略。迭代器很简单，无非就是容器的<code>begin</code>和<code>end</code>迭代器的变化，坏就坏在这个执行策略上了。很多时候，我们都需要为这个执行策略定义一个函数，再将这个函数传入算法中才能生效，且因为算法的参数限制，有时候定义的函数传入两个参数就无法找到对应的算法实现（这些算法大部分都是一元谓词算法），这就让人无法适从。举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//for_each算法和find_if算法</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printStr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string&amp; s)</span></span>&#123;cout&lt;&lt;s&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">strSize</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string&amp; s,vector&lt;string&gt;::size_type sz)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">size</span>()&gt;sz;<br>&#125;<br><span class="hljs-comment">//假设有一个vector&lt;string&gt;数组，我们对它进行遍历，并且寻找到第一个大于指定长度的词</span><br>vector&lt;string&gt;vs = &#123; <span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-string">&quot;vector&quot;</span>,<span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-string">&quot;list&quot;</span>,<span class="hljs-string">&quot;Hi&quot;</span>,<span class="hljs-string">&quot;hashmap&quot;</span>,<span class="hljs-string">&quot;hashset&quot;</span> &#125;;<br>for_each(vs.<span class="hljs-built_in">begin</span>(),vs.<span class="hljs-built_in">end</span>(),printStr);    <span class="hljs-comment">//这里for_each需要传入一个执行策略，这个策略是一个函数</span><br><span class="hljs-built_in">find_if</span>(vs.<span class="hljs-built_in">begin</span>(),vs.<span class="hljs-built_in">end</span>(),strSize); <span class="hljs-comment">//错误，find_if算法只接受一元谓词，strSize是二元谓词，无法执行</span><br></code></pre></td></tr></table></figure><p>这时候<code>Lambda表达式</code>和<code>bind</code>函数适配器就可以很好的解决这些痛点。</p><h1 id="Lambda表达式："><a href="#Lambda表达式：" class="headerlink" title="Lambda表达式："></a>Lambda表达式：</h1><p>在我看来，<code>Lambda表达式</code>其实就是一个匿名函数，它省略了函数名。格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">[捕获列表](函数参数)&#123;函数体&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Lambda表达式```一般来说返回值默认为```auto```，但是我们可以在函数参数的小括号后使用```->```对其指定返回类型。且```Lambda表达式```的捕获列表也有值捕获和引用捕获两种方式，执行规则和变量相同。"><br>所以我们可以将上面的函数直接改写掉，即不在外声明函数，在算法中直接编写```Lambda表达式```来对执行策略进行改变。<br><br>```c++<br>for_each(vs.begin(),vs.end(),[](const string&amp; s)&#123;cout&lt;&lt;s&lt;&lt;&quot; &quot;;&#125;;<br>find_if(vs.begin(),vs.end(),[sz](const string&amp; s)&#123;return s.size&gt;sz;&#125;);//假设已经sz在外声明<br></code></pre></td></tr></table></figure><p>我们也可以在捕获列表中对捕获量进行隐式捕获，在<code>[]</code>写入一个<code>=</code>为值捕获，<code>&amp;</code>为引用捕获，且注意：引用捕获需要确保在<code>Lambda表达式</code>确保引用对象是存在的（一般来说，尽可能避免捕获引用方式）。</p><h1 id="bind函数适配器："><a href="#bind函数适配器：" class="headerlink" title="bind函数适配器："></a>bind函数适配器：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bind```函数适配器在头文件```functional```中，顾名思义，是用来解决算法中出现的谓词不匹配问题。就像上面的find_if算法，只接受一元谓词，但是我们定义的是一个二元谓词执行策略，这时候可以使用```bind```进行适配。"><br>注意：```bind1st```和```bind2nd```这两个适配器在C++11被弃用，在C++17被移除，不建议使用！<br><br>```c++<br>bool strSize(const string&amp; s,vector&lt;string&gt;::size_type sz)&#123;<br>    return s.size()&gt;sz;<br>&#125;<br><br>vector&lt;string&gt;vs = &#123; &quot;Hello&quot;,&quot;world&quot;,&quot;Hello&quot;,&quot;vector&quot;,&quot;Hello&quot;,&quot;list&quot;,&quot;Hi&quot;,&quot;hashmap&quot;,&quot;hashset&quot; &#125;;//定义一个vector<br>find_if(vs.begin(),vs.end(),bind(strSize,_1,5)); //在这里初始化sz为5<br></code></pre></td></tr></table></figure><p>这里的<code>_1</code>是占位符，在<code>std::placeholders</code>名称空间中。在算法中，我们这里同样省略了函数名。完整函数应该是像下面这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> strSize5 = <span class="hljs-built_in">bind</span>(strSize,_1,<span class="hljs-number">5</span>);  <span class="hljs-comment">//在这里初始化sz为5</span><br></code></pre></td></tr></table></figure><p>占位符<code>_1</code>是代表在前面这个函数名<code>strSIze5</code>中的位置（即<code>strSIze5(const string&amp; s)</code>，<code>_1</code>是代表了<code>const string&amp; s</code>),在后面的bind中第一个参数是原函数的名称，第二个以及之后的就是传入的参数，需要传入的参数用占位符代替，第一个就是<code>_1</code>，第二个就是<code>_2</code>以此类推。</p><p>其实还可以重载函数调用符来实现，但是我个人觉得有点麻烦，因为在习题中，重载函数调用符就意味着要声明一个类，这就显得更麻烦了。下面放一个完整的例子，用三种方式来进行编写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;functional&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::placeholders;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">strSize</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">int</span> size;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Ssize</span>(<span class="hljs-keyword">int</span> x):<span class="hljs-built_in">size</span>(x)&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string&amp; s)</span> </span>&#123; <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">length</span>() == size; &#125;     <span class="hljs-comment">//重载函数调用符()</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">equalLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">const</span> string&amp; s)</span> </span>&#123;      <span class="hljs-comment">//二元谓词执行策略</span><br><span class="hljs-keyword">return</span> s.<span class="hljs-built_in">length</span>() == x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;string&gt;vs = &#123; <span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;an&quot;</span>,<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;vector&quot;</span>,<span class="hljs-string">&quot;java&quot;</span> &#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> minSzie = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxSize = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = minSzie; i &lt;= maxSize; i++) &#123;<br><span class="hljs-function">strSize <span class="hljs-title">s</span><span class="hljs-params">(i)</span></span>;<br><span class="hljs-comment">//cout &lt;&lt; &quot;size: &quot; &lt;&lt; i &lt;&lt; &quot;is have &quot; &lt;&lt; count_if(vs.begin(), vs.end(), s) &lt;&lt; endl; //重载函数调用符</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;size: &quot; &lt;&lt; i &lt;&lt; &quot;is have &quot; &lt;&lt; count_if(vs.begin(), vs.end(), [i](const string&amp; s) &#123;return s.length() == i; &#125;) &lt;&lt; endl;    //Lamdba表达式，捕获i进行比较</span><br>cout &lt;&lt; <span class="hljs-string">&quot;size: &quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;is have &quot;</span> &lt;&lt; <span class="hljs-built_in">count_if</span>(vs.<span class="hljs-built_in">begin</span>(), vs.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">bind</span>(equalLength, i, _1)) &lt;&lt; endl;<br>        <span class="hljs-comment">//bind函数适配器</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++中的const限定符</title>
    <link href="/2021/08/13/C-%E4%B8%AD%E7%9A%84const%E9%99%90%E5%AE%9A%E7%AC%A6/"/>
    <url>/2021/08/13/C-%E4%B8%AD%E7%9A%84const%E9%99%90%E5%AE%9A%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>这个限定符单独拿出来说，是因为这个<code>const</code>太搞了，这个限定符绝对比Java中的<code>final</code>搞心态的多。</p><span id="more"></span>　<p>const限定符在C/C++中都是表示它所修饰的变为常量，即：不可修改。</p><p>但是在C++中，变量的复合类型有很多，比如指针和引用，以及<code>const</code>在函数不同位置所表示的意思也不尽相同。以下是几种用法：</p><h1 id="const和引用："><a href="#const和引用：" class="headerlink" title="const和引用："></a><code>const</code>和引用：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//const和引用</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//非常量引用无法指向常量对象，但是常量对象引用可以指向非常量对象（可以绑定字面值）</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//int &amp;y = x; 无法绑定</span><br><span class="hljs-keyword">int</span> y = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; z = y; <span class="hljs-comment">//可以绑定</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>引用基本不算太难，非常量或常量都可以用一个<code>const</code>常量数值来接收，但是能接受<code>const</code>常量数值只有<code>const</code>常量。</p><h1 id="const和指针："><a href="#const和指针：" class="headerlink" title="const和指针："></a><code>const</code>和指针：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//const和指针</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> y = <span class="hljs-number">10</span>;<br>    <br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>* <span class="hljs-keyword">const</span> i = &amp;x;    <span class="hljs-comment">//i是一个指向常量数值的常量指针</span><br><span class="hljs-comment">//第一个const意思是指向一个常量数值，第二个const意思是指针i是一个常量指针（即：指针地址不可以改变）</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">const</span>* j = &amp;y;    <span class="hljs-comment">//尽管y不是常量，但是依旧可以绑定为常量值，代表指针保留的值不变（j存储的副本就是10）</span><br><span class="hljs-keyword">int</span> p = *j + <span class="hljs-number">1</span>; <span class="hljs-comment">//但是原来的y还是可以通过解除引用修改，因为y不是常量</span><br>cout &lt;&lt; p;  <span class="hljs-comment">//这时候打印出来是11，y并不是一个常量</span><br><br><span class="hljs-comment">//int* q = &amp;x;  无法通过，非指向常量值指针无法指向常量数值</span><br><span class="hljs-comment">//int* const r;  无法通过，常量指针必须初始化</span><br>    <br>    <span class="hljs-comment">//更深层次的const分配</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>** pp2; <span class="hljs-comment">//二重常量指针，pp2是指向指针的地址的常量指针</span><br>    <span class="hljs-keyword">int</span>* p1;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> n = <span class="hljs-number">13</span>;<br>    <span class="hljs-comment">//pp2 = &amp;p1;   //语法合理，但是编译不通过，引发混乱</span><br>    *pp2 = &amp;n;<br>    *p1 = <span class="hljs-number">10</span>; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果数据类型不是指针，可以将非<code>const</code>数据或<code>const</code>数据的地址赋值给指向<code>const</code>的指针，但是只能将非<code>const</code>的<strong>数据的地址</strong>赋给非<code>const</code>指针，不可以赋给<code>const</code>指针。</p><h1 id="const和函数头："><a href="#const和函数头：" class="headerlink" title="const和函数头："></a><code>const</code>和函数头：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> <span class="hljs-title">num</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>;    <span class="hljs-comment">//代表num函数的返回值是int类型的常量</span><br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">num</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> <span class="hljs-keyword">const</span></span>;    <span class="hljs-comment">//代表num函数不能隐式的修改参数x的值</span><br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">num</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> x)</span></span>;    <span class="hljs-comment">//代表参数x是常量，不可修改</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++一阶段的总结</title>
    <link href="/2021/08/12/C-%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
    <url>/2021/08/12/C-%E4%B8%80%E9%98%B6%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<p>看完了《C++ Primer Plus》，之后又买了本《C++ Primer》。但是讲真话，《C++ Primer》的确没那么好懂，给的源码都断断续续的，这个搞得人很不舒服……</p><span id="more"></span>　<p>《C++ Primer》强在比较全（C++11标准多），看完《C++ Primer Plus》之后再看，也算查漏补缺，基础部分都是跳着看，都差不多：C++历史，变量类型，控制流语句，指针，数组，结构。基本都大差不差，难的是C++ OOP那块：什么虚函数，虚继承，多重继承，函数指针。在看《C++ Prime Plus》时候看的就云里雾里的。</p><p>其实花了两个月看完《C++ Primer Plus》，C++现在说到底就三部分：基础C++部分（有点编程基础很快能过掉），OOP部分，STL部分，还有一些是杂项（I/O、RTTI运行时识别、异常处理这种）。</p><p>基础部分比较抠细节（看《C++ Primer》就能感觉出来），比如：const限定符和指针，个人感觉挺吃理解的（<code>const int* const p = &amp;x</code>，这种解释出来成中文都挺拗口：p是一个指向常量x的常量指针），很多地方都很抠细节，我翻看C++面试题也喜欢抠基础部分这些难理解的地方，唉。</p><p>STL部分，容器库，迭代器库，算法库，多查查文档，这些接口还是比较好使的（文档是真的好用）。但是STL里面的泛型编程的确也很惊艳，这块以后还得买书去看。</p><p>OOP部分，继承还是挺绕的，不难理解，就是在写的时候，很绕。以及在基类和派生类中出现的析构函数调用顺序，看过很多次了，但是还是不太懂。</p><p>杂项里面：异常处理是一块大头，I/O也是。I/O中对于cout和cin的输出格式化倒也还好。但是在文件输出和输入，不是很好理解……嗯，反正学的不好。异常部分（我还是没搞懂异常部分到底是干啥的，抛出异常再捕获，输出一句话，到底为啥）。RTTI有个关键词，<code>dymanic_cast</code>，这东西就很怪。还有<code>const_cast</code>。</p><p>最后就是C++ 11新特性了，《C++ Primer》这本书比较偏向于使用新特性，比如范围for循环，好用就是有点怪（不太好控制，我还是喜欢普通for，写习惯了，得改）。</p><p>总的来说，《C++ Primer Plus》是本好书，《C++ Primer》看很多人说当字典就好。我寻思再把《C++ Primer》看一遍，也算补上在《C++ Primer Plus》里缺少的玩意，了解，知道有就行。</p><p>学C++也不知道到底图啥，Java不太想学……感觉Java大头就是JavaEE，后面全是框架，没意思。还是学C++这种造轮子好玩点（也没准以后转Java）。以后</p><p>再说吧，就这样。</p>]]></content>
    
    
    <categories>
      
      <category>-C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++STL库和string类</title>
    <link href="/2021/08/06/C-STL%E5%BA%93%E5%92%8Cstring%E7%B1%BB/"/>
    <url>/2021/08/06/C-STL%E5%BA%93%E5%92%8Cstring%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>题外话：C++基础部分相比于Java缺少一个网络编程，但是STL库基础部分和Java的集合框架基本差不多。</p><span id="more"></span>　<p>STL库：</p><p>STL就是Standard Template Library（标准模板库）。由容器类模板，迭代器模板，函数对象模板和算法函数模板的集合。它们都是遵循泛型编程原则。</p><p>容器库包括了：Vector，Deque，List，Set，Multiset，Map，Multimap和Bitset，以及适配器模板：queue，priority_queue和stack。这些类让底层容器能够提供适配器类模板名词所建议的特性接口。所以，Stack虽然是基于Vector，但是只允许栈顶进行删除和插入。</p><p>算法库则包含了很多容器类的非成员函数。一般这些算法在操作容器类时，都会使用容器的迭代器来进行操作。</p><p>容器的迭代器Iterator：最常用的是起始迭代器：begin，还有超尾迭代器：end，这个不指向容器的最后一个元素，而是指向最后一个元素后面一位。当然也有反向迭代器rbegin和rend。</p><p>string类在STL库中也提供了很多方法。</p><p>（这里没法说太多，心得不是教程，想用这些库，得去查文档，看懂文档是真的很舒服），举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//关于Vector和List在排序方面的性能差异</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;vi0;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000000</span>; i++) &#123;<br>vi0.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">rand</span>()%<span class="hljs-number">1000</span>);<br>&#125;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;vi;<br>list&lt;<span class="hljs-keyword">int</span>&gt;li;<br>vi.<span class="hljs-built_in">resize</span>(vi0.<span class="hljs-built_in">size</span>());<br>li.<span class="hljs-built_in">resize</span>(vi0.<span class="hljs-built_in">size</span>());<br><span class="hljs-built_in">copy</span>(vi0.<span class="hljs-built_in">begin</span>(), vi0.<span class="hljs-built_in">end</span>(), vi.<span class="hljs-built_in">begin</span>());<br><span class="hljs-built_in">copy</span>(vi0.<span class="hljs-built_in">begin</span>(), vi0.<span class="hljs-built_in">end</span>(), li.<span class="hljs-built_in">begin</span>());<br><br><span class="hljs-keyword">clock_t</span> startv = <span class="hljs-built_in">clock</span>();<br><span class="hljs-built_in">sort</span>(vi.<span class="hljs-built_in">begin</span>(), vi.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">clock_t</span> endv = <span class="hljs-built_in">clock</span>();<br>cout &lt;&lt;<span class="hljs-string">&quot;Vector数组耗时：&quot;</span> &lt;&lt;(<span class="hljs-keyword">double</span>)(endv - startv) / CLOCKS_PER_SEC&lt;&lt;endl;<br><br><span class="hljs-keyword">clock_t</span> startl = <span class="hljs-built_in">clock</span>();<br>li.<span class="hljs-built_in">sort</span>();<br><span class="hljs-keyword">clock_t</span> endl = <span class="hljs-built_in">clock</span>();<br>cout &lt;&lt;<span class="hljs-string">&quot;List链表耗时：&quot;</span> &lt;&lt; (<span class="hljs-keyword">double</span>)(endl - startl) / CLOCKS_PER_SEC&lt;&lt;endl;<br><br>li.<span class="hljs-built_in">clear</span>();<br>li.<span class="hljs-built_in">resize</span>(vi0.<span class="hljs-built_in">size</span>());<br><span class="hljs-built_in">copy</span>(vi0.<span class="hljs-built_in">begin</span>(), vi0.<span class="hljs-built_in">end</span>(), li.<span class="hljs-built_in">begin</span>());<br><span class="hljs-keyword">clock_t</span> startvli = <span class="hljs-built_in">clock</span>();<br><span class="hljs-built_in">copy</span>(li.<span class="hljs-built_in">begin</span>(), li.<span class="hljs-built_in">end</span>(), vi.<span class="hljs-built_in">begin</span>());<br><span class="hljs-built_in">sort</span>(vi.<span class="hljs-built_in">begin</span>(), vi.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">copy</span>(vi.<span class="hljs-built_in">begin</span>(), vi.<span class="hljs-built_in">end</span>(), li.<span class="hljs-built_in">begin</span>());<br><span class="hljs-keyword">clock_t</span> endvli = <span class="hljs-built_in">clock</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;最终耗时：&quot;</span> &lt;&lt; (<span class="hljs-keyword">double</span>)(endvli - startvli) / CLOCKS_PER_SEC &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个例子，创建了一千万个随机数，Vector使用算法库中的sort进行排序，List使用自带sort进行排序，两个不同的数据结构会出现明显的性能差异。Vector只用了4s，但是LIst用的12s。</p>]]></content>
    
    
    <categories>
      
      <category>-C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++的类继承</title>
    <link href="/2021/07/18/C-%E7%9A%84%E7%B1%BB%E7%BB%A7%E6%89%BF/"/>
    <url>/2021/07/18/C-%E7%9A%84%E7%B1%BB%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<p>类继承也算OOP老特性了，毕竟OOP也就那几个玩意，说来说去总绕不开……</p><span id="more"></span>　<p>类继承在Java里使用关键字<code>extends</code>，但是派生类在C++中使用<code>:</code>运算符来继承基类。且因为访问权限的考虑，派生类只能通过基类的公有方法来访问基类成员。所以，<strong>派生类必须使用基类的构造函数</strong>，我们一般通过在派生类的构造函数中使用初始化列表来完成这种操作。</p><h1 id="虚函数："><a href="#虚函数：" class="headerlink" title="虚函数："></a>虚函数：</h1><p>使用<code>virtual</code>关键字在函数原型内来表示哪些函数是虚函数。对于表示哪些函数是虚函数，准则是：<strong>如果要在派生类中重新定义基类的方法，那么就将它设置为虚方法。</strong>（注意：在函数原型中使用<code>virtual</code>关键字即可，在具体化时候不需要添加<code>virtual</code>关键字。）</p><p>构造函数不应该是虚函数，但是析构函数应该是虚函数（除非类不用做基类），友元函数也不该是虚函数（友元函数本身就不是类成员，所以不是）</p><p>对函数重新定义继承和函数重载不是一码事，尽管都是对一个函数重新定义。如果基类的虚拟成员函数在基类中被重载，那么在派生类中，需要将这些函数全部进行重新定义。</p><p>举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//基类和派生类构造函数的原型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">animal</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>string name;<br><span class="hljs-keyword">int</span> age;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">animal</span>(<span class="hljs-keyword">const</span> string&amp; n = <span class="hljs-string">&quot;none&quot;</span>,<span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>);<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">animal</span>()&#123;&#125;;  <span class="hljs-comment">//析构函数虚拟化</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;   <span class="hljs-comment">//animal类中虚函数原型</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dog</span>:</span><span class="hljs-keyword">public</span> animal&#123;  <span class="hljs-comment">//dog类继承animal类</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">long</span> num;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">dog</span>(<span class="hljs-keyword">long</span> nu = <span class="hljs-number">-1</span>,<span class="hljs-keyword">const</span> string&amp; n = <span class="hljs-string">&quot;none&quot;</span>,<span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>; <span class="hljs-comment">//dog类中的虚函数原型</span><br>&#125;;<br><br><span class="hljs-comment">//函数具体化</span><br>animal::<span class="hljs-built_in">animal</span>(<span class="hljs-keyword">const</span> string&amp; n,<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; a)&#123;<br>name = n;<br>age = a;<br>&#125;<br><br><span class="hljs-keyword">void</span> animal::()<span class="hljs-keyword">const</span>&#123;         <span class="hljs-comment">//虚函数具体化</span><br>    cout&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;eat foods&quot;</span>;<br>&#125;<br><br>dog::<span class="hljs-built_in">dog</span>(<span class="hljs-keyword">long</span> nu,<span class="hljs-keyword">const</span> string&amp; n,<span class="hljs-keyword">int</span> a):<span class="hljs-built_in">animal</span>(n,a)&#123;  <span class="hljs-comment">//初始化基类的列表</span><br>nu = num;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dog::eat</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;    <span class="hljs-comment">//虚函数具体化</span><br>    cout&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;eat meat&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="向上强制转换和向下强制转换："><a href="#向上强制转换和向下强制转换：" class="headerlink" title="向上强制转换和向下强制转换："></a>向上强制转换和向下强制转换：</h1><p>在C++类继承中有个<code>is-a</code>的关系。</p><p>将派生类的引用或指针转换为基类的引用或指针，叫做向上强制转换。这里的向上强制转换属于隐式转换，这使得公有继承不需要进行显示转换。这也说的通，派生类继承了基类所有的数据成员和成员方法，所以对基类的操作，派生类也能够实现（<code>dog</code>类继承了<code>animal</code>类所有的数据，对<code>animal</code>的操作，<code>dog</code>也肯定能实现）。</p><p>但是相反的，将基类的指针或引用转换为派生类的指针或引用，被称为向下强制转换。向下强制转换就必须是显式转换，因为派生类可以添加数据成员，但是这些基类中并没有。（不安全）</p><h1 id="动态联编和静态联编："><a href="#动态联编和静态联编：" class="headerlink" title="动态联编和静态联编："></a>动态联编和静态联编：</h1><p>静态联编即为在编译过程时完成的联编，动态联编适用于虚函数，会根据虚函数的定义来选择对象。</p><p><strong>编译器对非虚函数选择静态联编，对虚函数选择动态联编。</strong></p><h1 id="抽象基类（Abstract-base-class，ABC）："><a href="#抽象基类（Abstract-base-class，ABC）：" class="headerlink" title="抽象基类（Abstract base class，ABC）："></a>抽象基类（Abstract base class，ABC）：</h1><p>这个概念就是将本来的基类函数和派生类函数中的共有的数据成员，再向上抽出它们中的共有数据成员，组成一个基类。但是想要使一个类成为抽象基类，必须有纯虚函数（有纯虚函数的基类只能当抽象基类）。</p><p>纯虚函数，C++中用纯虚函数来提供未实现的函数（但是C++允许纯虚函数有定义），纯虚函数的末尾处等于0。当类中存在纯虚函数时，则无法创建该类的对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AcctABC</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>string name;<br><span class="hljs-keyword">long</span> num;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ViewAcct</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">//纯虚函数</span><br>&#125;;<br><br><span class="hljs-function">AcctABC <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-string">&quot;grz&quot;</span>,<span class="hljs-number">1111</span>)</span></span>; <span class="hljs-comment">//创建失败，抽象基类不允许创建对象</span><br></code></pre></td></tr></table></figure><h1 id="继承和内存分配："><a href="#继承和内存分配：" class="headerlink" title="继承和内存分配："></a>继承和内存分配：</h1><p>第一种：当基类使用<code>new</code>，派生类不使用<code>new</code>时，派生类则无需显式的定义析构函数，复制构造函数和赋值运算符。派生类会默认使用基类的函数。</p><p>第二种：当基类和派生类都使用了<code>new</code>运算符进行动态内存分配时，那么派生类的析构函数，复制构造函数，赋值运算符则都必须使用相应的基类方法来处理基类元素。</p><p>还有个问题，对于基类中定义的友元函数，派生类该怎么办？我们在这里则可以对派生类中的友元函数中的形参进行强制类型转换，转换成基类类型（根据向上强制转换，派生类对象满足基类的输出），之后再将派生类特有的对象再进行输出。</p><p>接下来举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//头文件</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">baseDMA</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">char</span>* label;<br><span class="hljs-keyword">int</span> rating;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">baseDMA</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* l = <span class="hljs-string">&quot;null&quot;</span>, <span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>); <span class="hljs-comment">//默认构造函数</span><br><span class="hljs-built_in">baseDMA</span>(<span class="hljs-keyword">const</span> baseDMA&amp; rs);                 <span class="hljs-comment">//复制构造函数</span><br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">baseDMA</span>();                         <span class="hljs-comment">//析构函数</span><br>baseDMA&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> baseDMA&amp; rs);      <span class="hljs-comment">//运算符重载</span><br><span class="hljs-keyword">friend</span> std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="hljs-keyword">const</span> baseDMA&amp; rs);  <span class="hljs-comment">//&lt;&lt;重载，友元函数</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lacksDMA</span> :</span><span class="hljs-keyword">public</span> baseDMA &#123;        <span class="hljs-comment">//继承</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-class"><span class="hljs-keyword">enum</span>&#123;</span>COL_LEN = <span class="hljs-number">40</span>&#125;;                 <span class="hljs-comment">//用枚举来定义字符数组长度</span><br><span class="hljs-keyword">char</span> color[COL_LEN];                <span class="hljs-comment">//没有使用动态分配</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">lacksDMA</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* c = <span class="hljs-string">&quot;blank&quot;</span>, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* l = <span class="hljs-string">&quot;null&quot;</span>, <span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>); <span class="hljs-comment">//默认构造函数</span><br><span class="hljs-built_in">lacksDMA</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* c, <span class="hljs-keyword">const</span> baseDMA&amp; rs);<br><span class="hljs-keyword">friend</span> std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="hljs-keyword">const</span> lacksDMA&amp; ls);<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hasDMA</span> :</span><span class="hljs-keyword">public</span> baseDMA &#123;          <span class="hljs-comment">//继承</span><br><span class="hljs-keyword">private</span>: <br><span class="hljs-keyword">char</span>* style;                              <br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">hasDMA</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s = <span class="hljs-string">&quot;none&quot;</span>, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* l = <span class="hljs-string">&quot;null&quot;</span>, <span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>);<br><span class="hljs-built_in">hasDMA</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s, <span class="hljs-keyword">const</span> baseDMA&amp; rs);<br><span class="hljs-built_in">hasDMA</span>(<span class="hljs-keyword">const</span> hasDMA&amp; hs);<br>~<span class="hljs-built_in">hasDMA</span>();<br>hasDMA&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> hasDMA&amp; rs);<br><span class="hljs-keyword">friend</span> std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="hljs-keyword">const</span> hasDMA&amp; hs);<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//函数具体化.cpp</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;dma.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> <span class="hljs-meta-keyword">warning</span>(disable:4996)</span><br>baseDMA::<span class="hljs-built_in">baseDMA</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* l, <span class="hljs-keyword">int</span> r) &#123;         <br>label = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(l) + <span class="hljs-number">1</span>];              <span class="hljs-comment">//这里用strlen()方法来获得字符数组长度</span><br><span class="hljs-built_in">strcpy</span>(label, l);                             <span class="hljs-comment">//+1是为了在最后添加&#x27;\0&#x27;空字符</span><br>rating = r;                                   <span class="hljs-comment">//strcpy()方法，将字符数组复制到另一个字符数组</span><br>&#125;<br><br>baseDMA::<span class="hljs-built_in">baseDMA</span>(<span class="hljs-keyword">const</span> baseDMA&amp; rs) &#123;             <span class="hljs-comment">//复制构造函数</span><br>label = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(rs.label) + <span class="hljs-number">1</span>];          <br><span class="hljs-built_in">strcpy</span>(label, rs.label);<br>rating = rs.rating;<br>&#125;<br><br>baseDMA::~<span class="hljs-built_in">baseDMA</span>() &#123;                           <span class="hljs-comment">//delete[]用来回收动态分配的label字符数组</span><br><span class="hljs-keyword">delete</span>[] label;<br>&#125;<br><br>baseDMA&amp; baseDMA::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> baseDMA&amp; rs) &#123;<br><span class="hljs-keyword">if</span> (&amp;rs == <span class="hljs-keyword">this</span>)<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br><span class="hljs-keyword">delete</span>[]label;<br>label = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(rs.label) + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">strcpy</span>(label, rs.label);<br>rating = rs.rating;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br>std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="hljs-keyword">const</span> baseDMA&amp; rs) &#123;<br>os &lt;&lt; <span class="hljs-string">&quot;label:&quot;</span> &lt;&lt; rs.label &lt;&lt; std::endl;<br>os &lt;&lt; <span class="hljs-string">&quot;rating:&quot;</span> &lt;&lt; rs.rating &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> os;<br>&#125;<br><br>lacksDMA::<span class="hljs-built_in">lacksDMA</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* c, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* l, <span class="hljs-keyword">int</span> r):<span class="hljs-built_in">baseDMA</span>(l,r) &#123;   <span class="hljs-comment">//初始化成员列表来对基类构造函数对象初始化</span><br><span class="hljs-built_in">strncpy</span>(color, c, <span class="hljs-number">39</span>);<br>color[<span class="hljs-number">39</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;                             <span class="hljs-comment">//设置最后一个元素为空字符</span><br>&#125;<br><br>lacksDMA::<span class="hljs-built_in">lacksDMA</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* c, <span class="hljs-keyword">const</span> baseDMA&amp; rs) : <span class="hljs-built_in">baseDMA</span>(rs) &#123;<br><span class="hljs-built_in">strncpy</span>(color, c, COL_LEN - <span class="hljs-number">1</span>);<br>color[COL_LEN - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><br>std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="hljs-keyword">const</span> lacksDMA&amp; ls) &#123;<br>os &lt;&lt; (<span class="hljs-keyword">const</span> baseDMA&amp;)ls;                   <span class="hljs-comment">//强制类型转换</span><br>os &lt;&lt; <span class="hljs-string">&quot;Color:&quot;</span> &lt;&lt; ls.color &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> os;<br>&#125;<br><br>hasDMA::<span class="hljs-built_in">hasDMA</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* l, <span class="hljs-keyword">int</span> r) :<span class="hljs-built_in">baseDMA</span>(l, r) &#123;<br>style = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(s) + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">strcpy</span>(style, s);<br>&#125;<br><br>hasDMA::<span class="hljs-built_in">hasDMA</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s, <span class="hljs-keyword">const</span> baseDMA&amp; rs) : <span class="hljs-built_in">baseDMA</span>(rs) &#123;<br>style = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(s) + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">strcpy</span>(style, s);<br>&#125;<br><br>hasDMA::<span class="hljs-built_in">hasDMA</span>(<span class="hljs-keyword">const</span> hasDMA&amp; hs) :<span class="hljs-built_in">baseDMA</span>(hs)&#123;<br>style = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(hs.style) + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">strcpy</span>(style, hs.style);<br>&#125;<br><br>hasDMA::~<span class="hljs-built_in">hasDMA</span>()&#123;                              <span class="hljs-comment">//析构函数用来释放在hasDMA中定义的动态内存对象style</span><br><span class="hljs-keyword">delete</span>[] style;<br>&#125;<br><br>hasDMA&amp; hasDMA::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> hasDMA&amp; hs) &#123;    <span class="hljs-comment">//因为使用了动态内存分配，所以对赋值运算符进行重定义</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == &amp;hs)<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>baseDMA::<span class="hljs-keyword">operator</span>=(hs);         <span class="hljs-comment">//调用基类复制运算符，显示基类的对象</span><br><span class="hljs-keyword">delete</span>[] style;<br>style = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(hs.style) + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">strcpy</span>(style, hs.style);<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br>std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="hljs-keyword">const</span> hasDMA&amp; hs) &#123;   <span class="hljs-comment">//友元函数重载</span><br>os &lt;&lt; (<span class="hljs-keyword">const</span> baseDMA&amp;)hs;       <span class="hljs-comment">//强制转换</span><br>os &lt;&lt; <span class="hljs-string">&quot;Style:&quot;</span> &lt;&lt; hs.style &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> os;<br>&#125; <br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//实现</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;dma.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><br><span class="hljs-function">baseDMA <span class="hljs-title">shirt</span><span class="hljs-params">(<span class="hljs-string">&quot;Portablelly&quot;</span>, <span class="hljs-number">8</span>)</span></span>;<br><span class="hljs-function">lacksDMA <span class="hljs-title">balloon</span><span class="hljs-params">(<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;Blimpo&quot;</span>, <span class="hljs-number">4</span>)</span></span>;<br><span class="hljs-function">hasDMA <span class="hljs-title">map</span><span class="hljs-params">(<span class="hljs-string">&quot;Mercator&quot;</span>, <span class="hljs-string">&quot;Buffalo Keys&quot;</span>, <span class="hljs-number">5</span>)</span></span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Displaying baseDMA object:\n&quot;</span>;<br>cout &lt;&lt; shirt &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Displaying lacksDMA object:\n&quot;</span>;<br>cout &lt;&lt; balloon &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Displaying hasDMA object:\n&quot;</span>;<br>cout &lt;&lt; map &lt;&lt; endl;<br><br>lacksDMA balloon2(balloon);      //c<br>cout &lt;&lt; &quot;Result of lacksDMA copy:\n&quot;;<br>cout &lt;&lt; balloon2 &lt;&lt; endl;<br><br>hasDMA map2;<br>map2 = map;          //赋值<br>cout &lt;&lt; &quot;Result of hasDMA assignment:\n&quot;;<br>cout &lt;&lt; map2 &lt;&lt; endl;<br><span class="hljs-keyword">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-OOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++中的面向对象</title>
    <link href="/2021/07/08/C-%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/07/08/C-%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p>因为学过Java的原因，所以C++中的面向对象（OOP）对我来说并不是那么难理解。</p><span id="more"></span>　　<h1 id="OOP："><a href="#OOP：" class="headerlink" title="OOP："></a>OOP：</h1><p>大体来说：类是抽象的，比如：狗，就是一个类。但是对象则是具体的，比如：我家养了柴犬叫豆豆，这就具体对了一个对象。类中可以包含很多特征（成员函数以及变量），方便我们来描述它（对象调用这些成员函数，用类中这些参数来描述这个对象）。</p><p>Java里一般是创建一个类（文件名和类名要相同，这个类我记得叫标准类<code>JavaBean</code>），但是在C++中，我们在头文件中创建一个类，之后再通过<code>include</code>将它引入到<code>.cpp</code>文件中。之后在<code>.cpp</code>中编写在头文件<code>.h</code>写的函数原型的函数的实现。最后在另一个<code>.cpp</code>的<code>mian()</code>中进行使用。</p><p>在C++中也存在公有对象<code>public</code>和私有对象<code>private</code>，下列是一般格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#ifndf 头文件名</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> 头文件名    <span class="hljs-comment">//注意：这里类名一般写C风格。比如：PERSON_H_</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> 类名&#123;</span><br><span class="hljs-keyword">private</span>:<br>私有对象（一般是变量）<br>……<br><span class="hljs-keyword">public</span>：<br>公有对象（一般为函数的原形）<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="构造函数："><a href="#构造函数：" class="headerlink" title="构造函数："></a>构造函数：</h1><h2 id="默认构造函数："><a href="#默认构造函数：" class="headerlink" title="默认构造函数："></a>默认构造函数：</h2><p>这个和Java的标准类相同，需要构造函数在公有对象中，同样的，在没有声明带参数的构造函数时，C++会自动创建一个没有参数的构造函数。但是当我们创建了一个带参数的构造函数时，我们也需要将这个没有参数的构造函数进行声明。<strong>默认构造函数，要么都没有参数，要么所有的参数都有默认值。</strong></p><h2 id="析构函数："><a href="#析构函数：" class="headerlink" title="析构函数："></a>析构函数：</h2><p>和Java不同的是，C++中有一种特有的函数：析构函数。它用<code>~构造函数名</code>来对类中的构造函数进行回收。一般我们只需要写出来即可，对它的函数内容无需关心。</p><p>举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//以老生常谈的student类来举例</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once   <span class="hljs-comment">//C++风格写法，和ifndef……endif作用相同</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">student</span>:</span>&#123;<br><span class="hljs-keyword">private</span>:<br>   <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>   <span class="hljs-keyword">unsigned</span> age;<br>   <br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">student <span class="hljs-title">studet</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//默认构造函数</span><br><span class="hljs-function">student <span class="hljs-title">student</span><span class="hljs-params">(<span class="hljs-keyword">char</span> n[<span class="hljs-number">20</span>],<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a)</span></span>;   <span class="hljs-comment">//构造函数重载</span><br>~student;    <span class="hljs-comment">//析构函数</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="this指针："><a href="#this指针：" class="headerlink" title="this指针："></a>this指针：</h1><p>如果希望对成员函数的多个对象进行操作，可以将额外的对象作为参数传递给它。如果方法需要显示的调用这个引用这个方法对象，就可以使用<code>this</code>指针，对<code>this</code>指针进行解除引用<code>*this</code>，就可以指定这个对象。</p><h1 id="抽象数据类型（ADT）："><a href="#抽象数据类型（ADT）：" class="headerlink" title="抽象数据类型（ADT）："></a>抽象数据类型（ADT）：</h1><p>使用关键字<code>typedef</code>，这个和泛型有那么一丢丢像。</p>]]></content>
    
    
    <categories>
      
      <category>-C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-OOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++中的指针</title>
    <link href="/2021/07/04/C-%E4%B8%AD%E7%9A%84%E6%8C%87%E9%92%88/"/>
    <url>/2021/07/04/C-%E4%B8%AD%E7%9A%84%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<p>指针是C/C++的特色所在，但是也让人头疼不已。 我只能讲讲我现在理解的指针。</p><span id="more"></span>　　<p>指针应该是在复合类型那一章初次接触。首先明确一个概念，指针就是一个地址。比如<code>int* x</code>,指的就是<code>&amp;*x</code>。其中这个解除引用运算符<code>*</code>会让人很疑惑。举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span>* x;<br>*x = <span class="hljs-number">100</span>;<br>x = &amp;*x;  <br></code></pre></td></tr></table></figure><p>在<code>int</code>类型后面跟了一个<code>*</code>，但是这个是用来定义<code>x</code>是一个指针。但是接下来<code>*x</code>又是什么？其实就是这个<code>int</code>类型指针<code>x</code>其中的值。最后一句是为了说明指针其实就是一个地址。</p><p>每定义一个指针，一般就会出现这几个问题：这个指针是什么类型？指针指向什么类型？指针又指向哪里？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//还是用int* x做例子</span><br><span class="hljs-keyword">int</span>* x;<br>*x = <span class="hljs-number">100</span>;<br><span class="hljs-comment">//这个指针是int*类型，指向int类型，值是100。</span><br><br><span class="hljs-comment">//接下来看点复杂的</span><br><span class="hljs-keyword">int</span> **ptr; <span class="hljs-comment">//指针类型是int**,指针所指向的的类型是 int*</span><br><span class="hljs-built_in"><span class="hljs-keyword">int</span></span> (*ptr)[<span class="hljs-number">3</span>]; <span class="hljs-comment">//指针类型是int(*)[3]，指针所指向的的类型是 int()[3]</span><br><span class="hljs-keyword">int</span> *(*ptr)[<span class="hljs-number">4</span>]; <span class="hljs-comment">//指针类型是int*(*)[4]，指针所指向的的类型是 int* ()[4]</span><br></code></pre></td></tr></table></figure><p>从语法的角度来说：</p><ul><li>指针是什么类型：一般只要把指针声明语句里的指针名字去掉，剩下的部分就是这个指针的类型。</li><li>指针指向什么类型：把指针声明语句中的指针名字和名字左边的指针声明符<code>*</code>去掉，剩下的就是指针所指向的类型。</li></ul><p>接下来，在C++中，更让人觉得迷惑的地方是指针和数组的关系。举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> arr[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>*arr = arr[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;  <span class="hljs-comment">//数组索引从0开始</span><br>arr = &amp;arr[<span class="hljs-number">0</span>];<br>*(arr+<span class="hljs-number">1</span>) = arr[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;  <span class="hljs-comment">//没错，数组名其实也是一个指针，我们可以对数组名进行解除引用，来获得其中的值。</span><br><span class="hljs-comment">//其实在C++中，数组中括号中的索引本质就是在内存中移动指针的位置（我怀疑Java也是，因为Java因为数组越界会报空指针异常错误）。</span><br></code></pre></td></tr></table></figure><p>在上面这个例子中，当<code>arr</code>是数组时，它的类型是<code>int</code>，但是当它成为了一个指针时，它的类型是<code>int*</code>。arr作为指针时，它指向数组的第一个元素的地址（索引为0）。当对指针<code>arr</code>操作时，比如：<code>arr+1</code>，其实在内存中就是将指针向后移动了<code>sizeof(int)</code>个单位（我们声明的是<code>int</code>类型，一般是<code>int</code>是4个字节），这样就指向了数组的第二个元素的地址（索引为1）。这时候我们对<code>arr+1</code>进行解除引用操作，即：<code>*(arr+1)</code>就可以得到数组第二个元素的值。</p><p>这就意味着：我们可以通过指针来操作数组。</p><p>第四章还有个是指针和结构<code>struct</code>的关系：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Mystruct</span>&#123;</span><br><span class="hljs-keyword">int</span> weight;<br><span class="hljs-keyword">double</span> height;<br>&#125;<br><br>Mystruct s = &#123;<span class="hljs-number">130</span>,<span class="hljs-number">187</span>&#125;;<br>Mystruct* ps = &amp;s;  <span class="hljs-comment">//让ps指针指向s的地址</span><br>ps-&gt;weight;   <span class="hljs-comment">//结构指针通过-&gt;来访问结构成员，这时候即为s中的weight成员</span><br>ps-&gt;height;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++内存模型</title>
    <link href="/2021/07/03/C-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/2021/07/03/C-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>在我们点击运行时候，其实编译器做了两件事：编译和链接。编译是检查你的文件可行性并且编译成一种为<code>.obj</code>格式的中间文件，而链接是把你在这个文件中使用到的头文件或者是在其他文件中使用的全局变量导入进来，最后形成一个可执行文件<code>exe</code>。</p><span id="more"></span>　　<h1 id="头文件："><a href="#头文件：" class="headerlink" title="头文件："></a>头文件：</h1><p>一般我们在写一个<code>.cpp</code>文件第一步是写<code>#include&lt;&gt;</code>，这个就是将一个库导入。其实<code>#include</code>做的事很简单，如果将VS编译过程中的输出中间文件打开，我们会发现输出了一个<code>.i</code>文件，在文件中会看到，其实就是简单的将导入的库复制过来到你所引用文件中。</p><p>在我们自己创建一个<code>.h</code>头文件时候，我们一般将这些内容放在其中：</p><ul><li>函数原型（注意不是函数定义）</li><li>使用#define或则const所定义的符号常量</li><li>结构声明（struct）</li><li>类声明</li><li>模板声明（template)</li><li>内联函数（incline）</li></ul><p>并且在头文件开头，我们需要遵循C++中的”单定义规则（BOD）“，所以一般在文件中会添加这样的预处理语句：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> 头文件名</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> 头文件名</span><br>……内容<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span>    </span><br></code></pre></td></tr></table></figure><p>在编译器第一次遇到该文件时，会查看<code>#ifndef</code>和<code>#endif</code>中的内容。如果在一个文件中已经定义过了，那个编译器就会直接跳到#<code>#endif</code>后面。</p><h1 id="存储持续性、作用域和链接性："><a href="#存储持续性、作用域和链接性：" class="headerlink" title="存储持续性、作用域和链接性："></a>存储持续性、作用域和链接性：</h1><p>在C++中，有四种存储持续性：</p><ul><li>自动存储持续性，这种比如在一个函数中所定义的变量，在该函数开始被调用时被输入到栈内存中，在函数时执行结束后被释放。</li><li>静态存储持续性：在C++中使用<code>static</code>定义的变量，它们在整个程序运行中都一直存在。</li><li>线程存储持续性：这是C++11新添加的，用<code>thread_local</code>关键词声明。在线程被使用时，它们将一直存在。</li><li>动态存储持续性：用关键字<code>new</code>创建的变量。比如指针，它们都被存储在堆内存中，只有在程序结束或使用<code>delete</code>关键字才会被释放。</li></ul><p>C++中，通过代码块<code>&#123;&#125;</code>来确定一个变量的作用域。但是有的变量因为定义在任何函数之前，它们可能作用域是整个文件。</p><table><thead><tr><th align="center">存储描述</th><th align="center">持续性</th><th align="center">作用域</th><th align="center">链接性</th><th align="center">如何声明</th></tr></thead><tbody><tr><td align="center">自动</td><td align="center">自动</td><td align="center">代码块</td><td align="center">无</td><td align="center">在代码块中</td></tr><tr><td align="center">寄存器</td><td align="center">自动</td><td align="center">代码块</td><td align="center">无</td><td align="center">在代码块中，使用关键字register</td></tr><tr><td align="center">静态，无链接性</td><td align="center">静态</td><td align="center">代码块</td><td align="center">无</td><td align="center">在代码块中，使用关键字static</td></tr><tr><td align="center">静态，外部链接性</td><td align="center">静态</td><td align="center">文件</td><td align="center">外部</td><td align="center">不在任何函数内</td></tr><tr><td align="center">静态，内部链接性</td><td align="center">静态</td><td align="center">文件</td><td align="center">内部</td><td align="center">不在任何函数内，使用关键字static</td></tr></tbody></table><p>单定义规则（BOD），在C++中，变量只能有一次定义。C++提供两种方式声明变量：一种是<strong>定义声明</strong>，这会给变量分配内存空间。还有一种是<strong>引用声明</strong>，不给变量分配内存空间。</p><p>如果在多个文件中，需要使用一个外部变量，需要使用关键字<code>extern</code>来声明它。（注意，这个变量只需要在任意一个文件中定义声明（初始化，定义时候也可以省略<code>extern</code>）且是一个外部变量，接下来只需要在其他的变量中用<code>extern</code>来声明就可以使用），举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//file1.cpp</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> x =<span class="hljs-number">200</span>;<br><span class="hljs-keyword">int</span> y = <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">//file2.cpp</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> x;         <span class="hljs-comment">//这时候在file1中定义的x就可以使用了。</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> y;         <span class="hljs-comment">//file1中省略了extern，但是不妨碍它还是个外部变量，还是可以用extern来声明</span><br></code></pre></td></tr></table></figure><p>但是问题来了，如果我想在上面例子里file2里定义一个属于file2的<code>int x</code>该怎么办？我们应该使用静态变量关键字<code>static</code>来对这个属于file2的<code>int x</code>进行修饰。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//file1.cpp</span><br><span class="hljs-keyword">int</span> x = <span class="hljs-number">200</span>;<br><br><span class="hljs-comment">//file2.cpp</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> x = <span class="hljs-number">100</span>;    <span class="hljs-comment">//尽管两个x的值相同，但是打印它们的内存地址，是不一样的</span><br></code></pre></td></tr></table></figure><p>static在用在代码块中的变量时，被static修饰的变量不会随着函数的结束而消失。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">strcount</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str)</span></span>&#123;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">3</span>;i++)&#123;<br>  x++;<br>  total += x;<br>  &#125;<br>cout&lt;&lt;x&lt;&lt;endl;<br>cout&lt;&lt;total&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果将上面这个函数多调用几次，你会发现<code>total</code>的值并不会归0，但是<code>x</code>的值会归0。</p><h1 id="再聊const："><a href="#再聊const：" class="headerlink" title="再聊const："></a>再聊const：</h1><p>再来聊聊<code>const</code>修饰符。<code>const</code>是在内存初始化后，防止对它进行修改的修饰符。但是如果一个值用<code>const</code>进行修饰后，就隐性说明它是被<code>static</code>所修饰，成为了一个内部链接性的变量。如果我们想把它变成外部链接性，只需要在<code>const</code>前面加上<code>extern</code>覆盖原来的<code>static</code>即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//file1</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> x = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> y = <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">//file2</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> x;   <span class="hljs-comment">//报错，链接性问题</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> y;   <span class="hljs-comment">//可以使用，因为在file1中使用extern对const隐性的static进行覆盖</span><br></code></pre></td></tr></table></figure><h1 id="new运算符："><a href="#new运算符：" class="headerlink" title="new运算符："></a>new运算符：</h1><p>第一次接触到<code>new</code>是在指针，那时候<code>new</code>一般拿来在堆内存中寻找到一个足够的空间来满足动态需求。但是在第九章中，<code>new</code>运算符有一种变体，叫做<strong>定位运算符</strong>。要使用，我们得先引入头文件<code>new</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#inclde<span class="hljs-meta-string">&lt;new&gt;</span></span><br><span class="hljs-keyword">double</span>* pd1,pd2;<br><span class="hljs-keyword">char</span> buffer[<span class="hljs-number">512</span>];<br>pd1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">5</span>];    <span class="hljs-comment">//pd1指针在堆内存中进行分配</span><br>pd2 = <span class="hljs-built_in"><span class="hljs-keyword">new</span></span> (buffer)<span class="hljs-keyword">double</span> [<span class="hljs-number">5</span>]; <span class="hljs-comment">//pd2在buffer数组中分配空间</span><br></code></pre></td></tr></table></figure><p>且使用定位<code>new</code>运算符，它不会跟踪哪些内存已经使用，如果我们在上面的例子里再初始化一个在<code>buffer</code>数组中的指针<code>pd3</code>,打印<code>pd3</code>和<code>pd2</code>的地址，你会发现它们是一样的初始地址。这不会像普通<code>new</code>运算符，重新分配地址。</p><p>另外，使用<code>delete</code>无法释放使用定位<code>new</code>分配的内存，在上面这个例子里，如果<code>buffer</code>是由普通<code>new</code>创建，想释放它们，只能将整个<code>buffer</code>释放掉。</p><h1 id="名称空间："><a href="#名称空间：" class="headerlink" title="名称空间："></a>名称空间：</h1><p>域解析运算符：<code>::</code></p><p>这个没办法说明白，看例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostreamm&gt;</span></span><br><span class="hljs-keyword">namespace</span> xx&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">100</span>;   <span class="hljs-comment">//在叫xx的名称空间中定义一个x =100</span><br>&#125;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">100</span>;   <span class="hljs-comment">//定义一个全局变量x = 100</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mian</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">using</span> std::cout;      <span class="hljs-comment">//只使用std名称空间里的cout和endl,单独导入会避免不同名称空间中重名问题</span><br>    <span class="hljs-keyword">using</span> std::endl;<br>    cout&lt;&lt;xx::x&lt;&lt;endl;   <span class="hljs-comment">//值是100，是xx命名空间里的x</span><br>    cout&lt;&lt;::x&lt;&lt;endl;     <span class="hljs-comment">//值也是100，但是是全局变量x</span><br>    cout&lt;&lt;&amp;xx::x&lt;&lt;endl;  <span class="hljs-comment">//打印地址</span><br>    cout&lt;&lt;&amp;::x&lt;&lt;endl;    <br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>我们同样可以在名称空间里放结构，函数，<code>const</code>定义的变量。只要正确使用就好。</p>]]></content>
    
    
    <categories>
      
      <category>-C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++中的复合类型</title>
    <link href="/2021/06/16/C-%E4%B8%AD%E7%9A%84%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/06/16/C-%E4%B8%AD%E7%9A%84%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>复合类型就有点难了，指针是重难点。当然，相对于Java的GC机制来说指针也算是C/C++里的特色。</p><span id="more"></span>　　<p>C++中的数组：这个得注意元素个数和元素的索引问题。数组中的元素的索引是从0开始，但是元素序号是从1开始。</p><p>创建数组格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typename</span> arrayname [arraysize]<br><br><span class="hljs-comment">//举个例子</span><br><span class="hljs-keyword">char</span> ch[<span class="hljs-number">20</span>];<br></code></pre></td></tr></table></figure><p>C++允许在数组创建时对数组进行初始化，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> array[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure><p>但是C++不允许将一个数组赋值给另一个数组，且只有在定义数组时候才可以使用初始化操作。如过需要将元素都初始化为0，很简单，只需要显式将第一个元素初始化为0即可。</p><p>当然，在数组中存在一种特殊的数组，就字符数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">char</span> ch[<span class="hljs-number">20</span>] = &#123;<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;z&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;      <span class="hljs-comment">//注意，在C++中，C的写法中的字符数组后一般都带有一个&#x27;\0&#x27;空字符！</span><br><span class="hljs-comment">//但是也可以像下面这样写</span><br><span class="hljs-keyword">char</span> ch[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;grz&quot;</span>;<br></code></pre></td></tr></table></figure><p>但是，有时候这个’\0’空字符会在使用cin&gt;&gt;输入带来意想不到的错误，这时候需要引入cin的两个成员函数，它们是面向行的输入的成员函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">cin.<span class="hljs-built_in">getline</span>()         <span class="hljs-comment">//getline()成员函数会丢弃换行符</span><br>cin.<span class="hljs-built_in">get</span>()             <span class="hljs-comment">//get()函数会将换行符保留在序列里</span><br></code></pre></td></tr></table></figure><p>这样，我们在输入时候即可输入空格。</p><p>C++中的string：在ISO/ANSI C++98标准通过了string类扩展了C++类库。同样的，使用string需要使用命名空间std。string类使用起来，比char数组表示字符串更加简单。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::string str1 = <span class="hljs-string">&quot;grz&quot;</span>;   <span class="hljs-comment">//初始化</span><br><span class="hljs-comment">//输出</span><br>cout&lt;&lt;str;<br><span class="hljs-comment">//拼接</span><br>std::string str2 = <span class="hljs-string">&quot;21&quot;</span>;<br>std::string str3;<br>str3 = str1 + str2;<br><span class="hljs-comment">//附加</span><br>str1 +=str2;        <br></code></pre></td></tr></table></figure><p>C++中的结构：结构使用struct关键字来进行定义，并且在大括号中定义这个结构包括的结构成员。一般来说，结构都定义在main()函数之前。</p><p>格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">name</span>&#123;</span><br><span class="hljs-keyword">typename</span> name;<br><span class="hljs-keyword">typename</span> name;<br><span class="hljs-keyword">typename</span> name;<br>&#125;;<br><br><span class="hljs-comment">//举个例子</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inflatable</span>&#123;</span><br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">float</span> volume;<br><span class="hljs-keyword">double</span> price;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义完这种结构之后，即可定义这种结构的类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//还是使用这个结构</span><br>inflatable a&#123;<br><span class="hljs-string">&quot;grz&quot;</span>;<br><span class="hljs-number">1.2</span><br><span class="hljs-number">2.11</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>同样的，有单一的结构，就有结构数组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">name</span>&#123;</span><br><span class="hljs-keyword">typename</span> name;<br><span class="hljs-keyword">typename</span> name;<br><span class="hljs-keyword">typename</span> name;<br>&#125;;<br><br><span class="hljs-comment">//举个例子</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inflatable</span>&#123;</span><br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">float</span> volume;<br><span class="hljs-keyword">double</span> price;<br>&#125;<br><br><span class="hljs-comment">//初始化</span><br>inflatable a[<span class="hljs-number">3</span>] = &#123;<br>&#123;<span class="hljs-string">&quot;grz&quot;</span>,<span class="hljs-number">1.2</span>,<span class="hljs-number">2.11</span>&#125;;<br>&#123;<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-number">3.1</span>,<span class="hljs-number">2.33</span>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>结构数组在定义结构和结构没有差别，差别在初始化我们将它初始化为一个我们定义类型名的数组，在一个元素中里面，也必须包含所有的结构所包含的结构成员。</p><p>C++共用体和枚举：</p><p>C++指针：</p>]]></content>
    
    
    <categories>
      
      <category>-C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++的简单变量</title>
    <link href="/2021/06/10/C-%E4%B8%AD%E7%9A%84%E7%AE%80%E5%8D%95%E5%8F%98%E9%87%8F/"/>
    <url>/2021/06/10/C-%E4%B8%AD%E7%9A%84%E7%AE%80%E5%8D%95%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>相比Java，C++提供的简单变量类型很多，包括在C++11中新增加的几种类型。</p><span id="more"></span>　　<p>其中的基本整形变量：bool，char、short、int、long以及在C++11中所提供的新类型long long。它们都有符号版本和无符号版本（即正数）。我们可以在climit文件中找到这些符号常量。其中，无符号类型一般在有符号类型前加上unsigned即可。无符号类型，在某些特殊的情况下比有符号类型更加适用（比如人口数量）。</p><p>C++的const限定符：这是一种来修改变量的声明和初始化的关键字。</p><p>const创建常量格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> type name = value; <br><br><span class="hljs-comment">//举个例子</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>C++浮点数：浮点数即为可以带小数的数，可以提供比整形大的多的值。C++有三种浮点数类型：float、double和long double。</p><p>C++算术运算符：常见的+、-、*、/和%。即加减乘除和取模运算（取余数）。</p><p>C++强制类型转换：高精度转低精度会有损失，低精度转高精度则不会。</p><p>强制转换格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in"><span class="hljs-keyword">typename</span></span>(value)<br><br> <span class="hljs-comment">//举个例子</span><br> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br></code></pre></td></tr></table></figure><p>总的来说，第三章没啥难的。</p>]]></content>
    
    
    <categories>
      
      <category>-C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++的历史和基础语法</title>
    <link href="/2021/06/07/C-%E7%9A%84%E5%8E%86%E5%8F%B2%E5%92%8C%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/06/07/C-%E7%9A%84%E5%8E%86%E5%8F%B2%E5%92%8C%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>今天开始看了《C++ Primer Plus》这本书，C++给我感觉还不错。</p><p>第一章和第二章分别讲了C++的历史和基础入门。</p><span id="more"></span>　　<p>第一章讲的主要是C++历史，美国贝尔实验室的<del>老哥</del>大佬因为C和汇编语言太过于繁琐而自己搞了这么一个语言。C++是C语言的超集(的确，从很多地方能看出来两者的相似之处，很多都是互相兼容的)，且C++用途广泛。美国标准化组织也制定了一系列C++的标准来规范。但是我看C++貌似还是分几个版本:在UNIX，Linux，Windows以及Mac OS上的C++以及编译器不尽相同。但是因为种种条件限制<del>主要是没钱和懒</del>，我个人还是选择了在Windows环境下进行开发。</p><p>开发工具是:Visual Studio 2019。<del>相对于Java，C++的环境还是比较好配置的，基本就是下载好之后即可使用。</del></p><hr><p>第二章里的基础部分讲了一个基本C++文件所包含的东西。</p><p>我们以一个经典的Hello world举例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span>         <span class="hljs-comment">//C++预处理器</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;                <span class="hljs-comment">//主函数</span><br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;   <span class="hljs-comment">//命名空间</span><br>    cout&lt;&lt;<span class="hljs-string">&quot;Hello world&quot;</span>;   <span class="hljs-comment">//基本输出语句</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;              <span class="hljs-comment">//返回值0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Cpp预处理器:<code>#include&lt;iostream&gt;</code></p><p>这个主要作用就是将<code>iostream</code>库加载进来(和C的.h头文件有点相似。</p><p>主函数以及返回值0:<code>int main()&#123;&#125;</code></p><p>主函数是一个程序的入口，C++中将它定义为int类型，且返回值为void(被隐性省略)。</p><p>命名空间:<code>using namespace std</code><br>使用std这个空间。(下面的输出语句cunt和输入语句cit都要使用)</p><p>返回值:<code>return 0</code></p><p>这个挺奇怪的，按照书的说法，进程返回0就是说明没问题。<del>但是我改成了1，程序依旧运行。就很怪？</del>有待研究。</p><p>接下来就是基本的输出和输入语句，这个都需要头文件<code>iostream</code>和<code>std</code>的支持。</p><p>基本输出语句：<code>cunt&lt;&lt;</code></p><p>有点奇怪。是通过重载符将数据输出。<del>Java输出是<code>System.out.println()</code>，C是<code>print()</code>，书中说使用这种重载的方法很智能</del>。且cunt输出根据命名空间存在来决定怎么写，接下来举几个例子说明:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//第一种，命名空间namespace std在全局起作用，放在main函数之前</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br><span class="hljs-comment">//第二种，在某个特定的函数中使用这个命名空间，用main函数举例,如果下面还有函数，要使用std这个命名空间，那必须再次声明</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>&#125;<br><span class="hljs-comment">//第三种，直接调用，以输出语句来举例</span><br>std::cunt&lt;&lt;<span class="hljs-string">&quot;直接同过::符号来调用&quot;</span>;<br></code></pre></td></tr></table></figure><p>cunt输出的花样也很多：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">cunt&lt;&lt;<span class="hljs-string">&quot;hello&quot;</span>&lt;&lt;<span class="hljs-string">&quot;world&quot;</span>;<br><br>cunt&lt;&lt;<span class="hljs-string">&quot;hello world&quot;</span>;<br><br>cunt&lt;&lt;<span class="hljs-string">&quot;hello&quot;</span><br>    &lt;&lt;<span class="hljs-string">&quot;world&quot;</span>;<br></code></pre></td></tr></table></figure><p>这三种方式都是输出的同样结果。</p><p>其他依旧重要的点：</p><p>输入语句：<code>cit&gt;&gt;</code></p><p>在控制台运行后继续等待键盘输入，和<code>cunt&lt;&lt;</code>刚好是一对。</p><hr><p>之后讲了第二章中最重要的点，函数和构造函数的概念。和Java最大的不同是调用函数时，需要在主函数之前先调用。</p><p>举个例子，以课后的两道习题为例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">//光年和天文单位的转化，构造函数带返回值</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">lightYears</span><span class="hljs-params">(<span class="hljs-keyword">double</span>)</span></span>;   <span class="hljs-comment">//使用构造函数需要在主函数前先导入</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入距离多少光年：&quot;</span>;<br><span class="hljs-keyword">double</span> LightYears;           <br>cin &gt;&gt; LightYears;           <span class="hljs-comment">//等待输入</span><br><span class="hljs-keyword">int</span> n = <span class="hljs-built_in">lightYears</span>(LightYears);      <span class="hljs-comment">//定义一个新变量来接受由构造函数产生的新变量</span><br>cout &lt;&lt; <span class="hljs-string">&quot;距离的天文单位是：&quot;</span> &lt;&lt; n;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">lightYears</span><span class="hljs-params">(<span class="hljs-keyword">double</span> astronomicalUnit)</span> </span>&#123;    <span class="hljs-comment">//创建的构造函数，double类型，返回值也是double类型</span><br><span class="hljs-keyword">return</span> astronomicalUnit * <span class="hljs-number">63240</span>;            <span class="hljs-comment">//返回值</span><br>&#125;<br><br><br><br><span class="hljs-comment">//用户输入小时与分钟，输出，无返回值，我们直接将输入和输出语句在构造函数中定义，在主函数中调用。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">time</span><span class="hljs-params">()</span></span>;      <span class="hljs-comment">//引入</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-built_in">time</span>();      <span class="hljs-comment">//直接调用，注意不需要带void</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">time</span><span class="hljs-params">()</span> </span>&#123;     <span class="hljs-comment">//void即无返回值，我们在这个函数中直接定义输入和输出语句</span><br><span class="hljs-keyword">int</span> hour,minute;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;请输入时：&quot;</span>;<br>std::cin &gt;&gt; hour;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;请输入分：&quot;</span>;<br>std::cin &gt;&gt; minute;<br>std::cout &lt;&lt;<span class="hljs-string">&quot;当前时间：&quot;</span> &lt;&lt; hour &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; minute;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis的了解与入门</title>
    <link href="/2020/06/17/Mybatis%E7%9A%84%E4%BA%86%E8%A7%A3%E4%B8%8E%E5%85%A5%E9%97%A8/"/>
    <url>/2020/06/17/Mybatis%E7%9A%84%E4%BA%86%E8%A7%A3%E4%B8%8E%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>SSM框架中的最后一个M，即：Mybatis。</p><p>SSM框架中的最后一个M，即：Mybatis。</p><p>前几天看前端看到CSS，实在看不下去了。还不如继续看后端这边。</p><p>SSM框架中的最后一个M，即：Mybatis。</p><span id="more"></span><h1 id="Mybatis是什么-中文官方文档-："><a href="#Mybatis是什么-中文官方文档-：" class="headerlink" title="Mybatis是什么(中文官方文档)："></a>Mybatis是什么(中文官方文档)：</h1><p>MyBatis 是一款优秀的<strong>持久层</strong>框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 <strong>XML</strong> 或<strong>注解</strong>来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><h1 id="使用Mybatis的好处-百度百科"><a href="#使用Mybatis的好处-百度百科" class="headerlink" title="使用Mybatis的好处(百度百科):"></a>使用Mybatis的好处(百度百科):</h1><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql</li></ul><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化:"></a>持久化:</h1><p>持久化（Persistence），即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</p><p>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</p><p>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</p><h1 id="持久层"><a href="#持久层" class="headerlink" title="持久层:"></a>持久层:</h1><p>完成持久化工作的代码块 .  —-&gt;  dao层 【DAO (Data Access Object)  数据访问对象】</p><p>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</p><p>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专注于数据持久化逻辑的实现.</p><p>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。【说白了就是用来操作数据库存在的！】</p><h1 id="我的第一个Mybatis程序"><a href="#我的第一个Mybatis程序" class="headerlink" title="我的第一个Mybatis程序:"></a>我的第一个Mybatis程序:</h1><p>首先要明确一点,Mybatis是来对JDBC代码简化。所以，我们还是得写SQL语句。</p><p>依旧使用IDEA+Mybatis+Maven+Mysql进行项目构建。</p><h2 id="编写SQL语句："><a href="#编写SQL语句：" class="headerlink" title="编写SQL语句："></a>编写SQL语句：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE `mybatis`;<br><br>USE `mybatis`;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `<span class="hljs-keyword">user</span>`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` (<br>`id` <span class="hljs-type">INT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`pwd` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`(`id`,`name`,`pwd`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;谷RZ&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;abcdef&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;987654&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="在pom-xml中导入依赖："><a href="#在pom-xml中导入依赖：" class="headerlink" title="在pom.xml中导入依赖："></a>在pom.xml中导入依赖：</h2><p>使用Maven把Mybatis，MySQL，junit依赖导入pom.xml。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--MySQL依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--junit依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mybatis依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Maven静态资源过滤问题（重要）："><a href="#Maven静态资源过滤问题（重要）：" class="headerlink" title="Maven静态资源过滤问题（重要）："></a><strong>Maven静态资源过滤问题</strong>（重要）：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>    <br></code></pre></td></tr></table></figure><h2 id="编写Mybatis核心配置文件（Mybatis-config-："><a href="#编写Mybatis核心配置文件（Mybatis-config-：" class="headerlink" title="编写Mybatis核心配置文件（Mybatis_config)："></a>编写Mybatis核心配置文件（Mybatis_config)：</h2><p>使用IDEA连接Mysql后，编写Mybatis核心配置文件（Mybatis_config)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span></span><br><span class="hljs-tag">                          <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编写Mybatis工具类："><a href="#编写Mybatis工具类：" class="headerlink" title="编写Mybatis工具类："></a>编写Mybatis工具类：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">//sqlSessionFactory--&gt;sqlSession</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtils</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//使用Mybatis第一步：获取sqlSession对象</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            InputStream inputStream = Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//Sqlsession包含了所有面向数据库执行sql的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写实体类："><a href="#编写实体类：" class="headerlink" title="编写实体类："></a>编写实体类：</h2><p>ORM映射，这里使用上面得MySQL导入的user类举例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>   <br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;  <span class="hljs-comment">//id</span><br>   <span class="hljs-keyword">private</span> String name;   <span class="hljs-comment">//姓名</span><br>   <span class="hljs-keyword">private</span> String pwd;   <span class="hljs-comment">//密码</span><br>   <br>   <span class="hljs-comment">//构造,有参,无参</span><br>   <span class="hljs-comment">//set/get</span><br>   <span class="hljs-comment">//toString()</span><br>   <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在dao层编写Mapper接口："><a href="#在dao层编写Mapper接口：" class="headerlink" title="在dao层编写Mapper接口："></a>在dao层编写Mapper接口：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.grz.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写Mapper-xml配置文件："><a href="#编写Mapper-xml配置文件：" class="headerlink" title="编写Mapper.xml配置文件："></a>编写Mapper.xml配置文件：</h2><p>接下来和原生的JDBC有不同，原生的JDBC是编写UserMapper的实现类来对执行sql，但是在Mybatis中，我们编写配置文件来执行sql。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--namespace=绑定一个对应的Mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.grz.dao.UserMapper&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--select查询语句--&gt;</span><br><span class="hljs-comment">&lt;!--id为绑定的Mapper接口中需要重写的方法，</span><br><span class="hljs-comment">resultType是重写方法返回的结果集类型（只针对这里的集合，写入泛型）</span><br><span class="hljs-comment">且需要为全限定名</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.grz.pojo.User&quot;</span>&gt;</span><br>-- 编写sql语句<br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="在Mybatis核心配置文件（Mybatis-config-绑定："><a href="#在Mybatis核心配置文件（Mybatis-config-绑定：" class="headerlink" title="在Mybatis核心配置文件（Mybatis_config)绑定："></a>在Mybatis核心配置文件（Mybatis_config)绑定：</h2><p>将Mapper.xml配置绑定。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/grz/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="最后编写Junit测试类："><a href="#最后编写Junit测试类：" class="headerlink" title="最后编写Junit测试类："></a>最后编写Junit测试类：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.grz.pojo.User;<br><span class="hljs-keyword">import</span> com.grz.util.MybatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>        SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        List&lt;User&gt; userList = mapper.getUserList();<br><br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>个人觉得，在写了一堆原生JDBC的代码后，使用Mybatis的确方便。JDBC中的Connection connection，Result result，Preparstatement preparStatement，String sql，Object[ ] params,都被省略。</p><p>但是写xml貌似有点难搞……</p><p>就这样，明天估计就是学CRUD套路了，不变的永远是sql语句。只不过，把JDBC换成了Mybatis。</p>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb中的CSS（第一部分）</title>
    <link href="/2020/06/15/JavaWeb%E4%B8%AD%E7%9A%84CSS%EF%BC%88%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%89/"/>
    <url>/2020/06/15/JavaWeb%E4%B8%AD%E7%9A%84CSS%EF%BC%88%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>在前端中，HTML是显示网页字体，CSS则是起到美化作用。第一部分的重点在于选择器。</p><span id="more"></span><h1 id="CSS简介："><a href="#CSS简介：" class="headerlink" title="CSS简介："></a>CSS简介：</h1><p>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。（百度百科）</p><h1 id="CSS导入的三种方式："><a href="#CSS导入的三种方式：" class="headerlink" title="CSS导入的三种方式："></a>CSS导入的三种方式：</h1><p>CSS是一种依赖于HTML的样式表，所以最后的显示应该也在网页中呈现。</p><p>所以，对于CSS导入，有以下三种方式：</p><ol><li>外部样式：将CSS文件夹下的CSS文件通过link标签导入。</li><li>内部样式：在HTML中通过style直接写入CSS。</li><li>行类样式：在HTML中使用style关键字直接导入。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS三种导入方式<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--外部样式--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;CSS/CSS.css&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--内部样式--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--行内样式--&gt;</span><br><br><span class="hljs-comment">&lt;!--样式生效原则：就近原则--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">STYLE</span>=<span class="hljs-string">&quot;color: yellow&quot;</span>&gt;</span>CSS三种导入方式<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：优先级的选择！</p><p>就近原则，导入的CSS和需要添加样式表的语句的先后有决定性关系。</p><h1 id="三种基本选择器："><a href="#三种基本选择器：" class="headerlink" title="三种基本选择器："></a>三种基本选择器：</h1><p>选择器，顾名思义，选择CSS样式的生效范围。通过选择器指定样式生效的范围。</p><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器:"></a>标签选择器:</h2><p>选定HTML中的对应的标签,对标签直接指定CSS。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标签选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#66ccff</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题3<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题4<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题5<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器:"></a>类选择器:</h2><p>对HTML中指定的标签的类class名指定CSS。</p><p>同名class会被一同选择通过.class名选择。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>类选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!--类选择器.class名,同名class会被一同选择--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.style1</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#66ccff</span>;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.style2</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: yellow;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;style1&quot;</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;style1&quot;</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;style2&quot;</span>&gt;</span>标题3<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;style2&quot;</span>&gt;</span>标题4<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器:"></a>id选择器:</h2><p>对HTML中指定的标签的类id名指定CSS。</p><p>id选择器全局唯一,通过#id名选择。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>id选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!--id选择器全局唯一,通过#id名选择--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">h1</span><span class="hljs-selector-id">#style1</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>:<span class="hljs-number">#66ccff</span></span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-tag">h1</span><span class="hljs-selector-id">#style2</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: yellow;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-tag">h1</span><span class="hljs-selector-id">#style3</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: aqua;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-comment">&lt;!--在三种基本选择器中，优先级：id选择器&gt;类选择器&gt;标签选择器--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;style1&quot;</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;style2&quot;</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;style3&quot;</span>&gt;</span>标题3<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>注意：优先级的选择！</p><p>在三种选择器中：id选择器&gt;类选择器&gt;标签选择器。</p><h1 id="高级选择器："><a href="#高级选择器：" class="headerlink" title="高级选择器："></a>高级选择器：</h1><p>解决基本选择器中的id选择器的麻烦。</p><h2 id="层次选择器："><a href="#层次选择器：" class="headerlink" title="层次选择器："></a>层次选择器：</h2><p>这个选择器得上图，他的四种子选择器略微麻烦。</p><h3 id="后代选择器："><a href="#后代选择器：" class="headerlink" title="后代选择器："></a>后代选择器：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">/*后代选择器，在某个元素的后面*/<br>   body p &#123;<br>       background: #66ccff;<br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="/JavaWeb%E4%B8%AD%E7%9A%84CSS%EF%BC%88%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%89/%E5%90%8E%E4%BB%A3%E9%80%89%E6%8B%A9%E5%99%A8.PNG"></p><h3 id="子选择器："><a href="#子选择器：" class="headerlink" title="子选择器："></a>子选择器：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">/*子选择器，选择父元素的下的全部第一个子元素*/<br>    body &gt; p &#123;<br>        background: #66ccff;<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/JavaWeb%E4%B8%AD%E7%9A%84CSS%EF%BC%88%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%89/%E5%AD%90%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.PNG"></p><h3 id="相邻兄弟选择器："><a href="#相邻兄弟选择器：" class="headerlink" title="相邻兄弟选择器："></a>相邻兄弟选择器：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">/*相邻兄弟选择器，同辈，对下不对上*/<br>    .active + p &#123;<br>        background: #66ccff;<br>    &#125;<br><br><span class="hljs-comment">&lt;!--注意p2绑定了class名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p5<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p6<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p7<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p8<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/JavaWeb%E4%B8%AD%E7%9A%84CSS%EF%BC%88%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%89/%E7%9B%B8%E9%82%BB%E5%85%84%E5%BC%9F%E9%80%89%E6%8B%A9%E5%99%A8.PNG"></p><h3 id="通用选择器："><a href="#通用选择器：" class="headerlink" title="通用选择器："></a>通用选择器：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">/*通用选择器，对下不对上，全部选择*/<br>    .active ~ p &#123;<br>        background: #66ccff;<br>    &#125;<br><br><span class="hljs-comment">&lt;!--注意p2绑定了class名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p5<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p6<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p7<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p8<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/JavaWeb%E4%B8%AD%E7%9A%84CSS%EF%BC%88%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%89/%E9%80%9A%E7%94%A8%E9%80%89%E6%8B%A9%E5%99%A8.PNG"></p><h2 id="结构伪类选择器："><a href="#结构伪类选择器：" class="headerlink" title="结构伪类选择器："></a>结构伪类选择器：</h2><p>这个相对于层次选择器要简单。大部分是通过关键词以及元素的位置来选择。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>结构伪类选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-comment">/*ul的第一个元素*/</span></span><br><span class="css">        <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first</span>-child &#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#66ccff</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-comment">/*ul的最后一个元素*/</span></span><br><span class="css">        <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#66ccff</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-comment">/*选择父元素下的第一个子元素*/</span></span><br><span class="css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#66ccff</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-comment">/*选择父元素中第一个类型为p的元素*/</span></span><br><span class="css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#66ccff</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css"></span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>l1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>l2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>l3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/JavaWeb%E4%B8%AD%E7%9A%84CSS%EF%BC%88%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%89/%E7%BB%93%E6%9E%9C%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.PNG"></p><h2 id="属性选择器（重点）："><a href="#属性选择器（重点）：" class="headerlink" title="属性选择器（重点）："></a>属性选择器（重点）：</h2><p>属性选择器更类似于将基础选择器中的id选择器和类选择器结合在了一起。且属性选择器可以使用正则表达式来对元素的属性进行筛选。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>属性选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    </span><br><span class="css">        <span class="hljs-selector-class">.demo</span> <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">            <span class="hljs-attribute">background</span>: black;</span><br><span class="css">            <span class="hljs-attribute">color</span>: azure;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">            <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">            <span class="hljs-attribute">font</span>: bold <span class="hljs-number">20px</span>/<span class="hljs-number">50px</span> Arial;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-comment">/*属性选择器格式：</span></span><br><span class="hljs-comment"><span class="css">        标签名[元素属性具体的值]&#123;&#125;</span></span><br><span class="hljs-comment"><span class="css">        元素属性具体的值 = 属性值（正则）</span></span><br><span class="hljs-comment"><span class="css">        = 绝对等于</span></span><br><span class="hljs-comment"><span class="css">        *=包含这个元素</span></span><br><span class="hljs-comment"><span class="css">        ^=以这个开头的元素</span></span><br><span class="hljs-comment"><span class="css">        $=以这个结尾的元素</span></span><br><span class="hljs-comment"><span class="css">         */</span></span><br><span class="css"></span><br><span class="css">        <span class="hljs-comment">/*举例*/</span></span><br><span class="css">        <span class="hljs-comment">/*id是first的元素*/</span></span><br><span class="css">        <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[id=first]</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#66ccff</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-comment">/*class中带有link的元素*/</span></span><br><span class="css">        <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[class*=link]</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: yellow;</span><br><span class="css">        &#125;</span><br><span class="css">        </span><br><span class="css">        <span class="hljs-comment">/*href是http开头的元素*/</span></span><br><span class="css">        <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href^=http]</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: aqua;</span><br><span class="css">        &#125;</span><br><span class="css">        </span><br><span class="css">        <span class="hljs-comment">/*href是pdf结尾的元素*/</span></span><br><span class="css">        <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href$=pdf]</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: green;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css"></span><br><span class="css"></span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;img/111.jpg&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;abc.pdf&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/JavaWeb%E4%B8%AD%E7%9A%84CSS%EF%BC%88%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%89/%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.PNG"></p>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Web前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb中的HTML</title>
    <link href="/2020/06/15/JavaWeb%E4%B8%AD%E7%9A%84HTML/"/>
    <url>/2020/06/15/JavaWeb%E4%B8%AD%E7%9A%84HTML/</url>
    
    <content type="html"><![CDATA[<p>HTML和CSS，还有JS都属于前端的范畴，SMBMS系统因为看不懂前端请求搞得流产了……只能回头再看前端了。HTML中重点在表单那块。</p><span id="more"></span><h1 id="HTML简介："><a href="#HTML简介：" class="headerlink" title="HTML简介："></a>HTML简介：</h1><p>HTML称为超文本标记语言，是一种标识性的语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。（百度百科）</p><h1 id="HTML中的基础标签："><a href="#HTML中的基础标签：" class="headerlink" title="HTML中的基础标签："></a>HTML中的基础标签：</h1><h2 id="标题标签："><a href="#标题标签：" class="headerlink" title="标题标签："></a>标题标签：</h2><p>这个类似于Markdown语法中的标题标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--标题标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>二级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>三级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>四级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>五极标签<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>六级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="段落标签："><a href="#段落标签：" class="headerlink" title="段落标签："></a>段落标签：</h2><p>分段用，html语言不会自动分段。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--段落标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>床前明月光，疑是地上霜。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>举头望明月，低头思故乡。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="换行标签："><a href="#换行标签：" class="headerlink" title="换行标签："></a>换行标签：</h2><p>这个和段落标签类似，但是区别在于行间距的大小。段落标签比换行标签大。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--换行标签--&gt;</span><br>床前明月光，疑是地上霜。<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>举头望明月，低头思故乡。<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="水平线标签："><a href="#水平线标签：" class="headerlink" title="水平线标签："></a>水平线标签：</h2><p>这个就是加一条水平分割线。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--水平线标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="字体标签："><a href="#字体标签：" class="headerlink" title="字体标签："></a>字体标签：</h2><p>这个就是调整字体样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--字体标签,比如:粗体和斜体--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>字体样式便签<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>粗体:<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>我是GRZ<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>斜体:<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>我是GRZ<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="特殊符号："><a href="#特殊符号：" class="headerlink" title="特殊符号："></a>特殊符号：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--特殊符号--&gt;</span><br><br><span class="hljs-comment">&lt;!--&amp;nbsp;代表空格--&gt;</span><br>空格:空<span class="hljs-symbol">&amp;nbsp;</span>格<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-comment">&lt;!--&amp;gt;代表大于号--&gt;</span><br><span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-comment">&lt;!--&amp;lt;代表小于号--&gt;</span><br><span class="hljs-symbol">&amp;lt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-comment">&lt;!--&amp;copy;版权符号--&gt;</span><br><span class="hljs-symbol">&amp;copy;</span>版权所有GRZ<br></code></pre></td></tr></table></figure><h1 id="图像标签："><a href="#图像标签：" class="headerlink" title="图像标签："></a>图像标签：</h1><p>这个就是image标签。但是需要填写文件路径。</p><p>注意绝对路径和相对路径的区别。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--img标签介绍</span><br><span class="hljs-comment">src:图片地址</span><br><span class="hljs-comment">相对地址（推荐使用）：</span><br><span class="hljs-comment">../：代表上级目录</span><br><span class="hljs-comment">之后找到图片使用/image</span><br><span class="hljs-comment">最后写图片名：/图片名</span><br><span class="hljs-comment">绝对地址（不建议使用）：G:\IntelliJ IDEA 2020.1Projects\com.grz\HTML\resources\image\java.png</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">alt:图片加载失败显示的文字</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../resources/image/java.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;java学习路线&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;悬停文字&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="多媒体标签："><a href="#多媒体标签：" class="headerlink" title="多媒体标签："></a>多媒体标签：</h1><p>多媒体也就两种，音频和视频。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--音频和视频</span><br><span class="hljs-comment">src:资源路径</span><br><span class="hljs-comment">controls:控制条</span><br><span class="hljs-comment">autoplay:自动播放</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span><span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="链接标签："><a href="#链接标签：" class="headerlink" title="链接标签："></a>链接标签：</h1><p>这个就是实现链接跳转的功能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--a标签</span><br><span class="hljs-comment">href:必填，表示跳转到哪个页面</span><br><span class="hljs-comment">target:表示窗口在哪里打开</span><br><span class="hljs-comment">_blank:在新标签页中打开</span><br><span class="hljs-comment">_self:在本页中跳转</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>锚链接顶部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;我的第一个HTML网页.html&quot;</span>&gt;</span>点击跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>点击跳转到百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--图片嵌套--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;我的第一个HTML网页.html&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../resources/image/java.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Java学习路线&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--target--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>点击跳转到百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--锚链接</span><br><span class="hljs-comment">1.需要一个锚标记</span><br><span class="hljs-comment">2.跳转到标记：#</span><br><span class="hljs-comment">实现页面间跳转</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--功能性链接</span><br><span class="hljs-comment">邮件链接：mailto：</span><br><span class="hljs-comment">QQ链接：QQ推广工具</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:3240367689@qq.com&quot;</span>&gt;</span>点击联系我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://wpa.qq.com/msgrd?v=3&amp;uin=&amp;site=qq&amp;menu=yes&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://wpa.qq.com/pa?p=2::52&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;你好&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;你好&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="iframe标签："><a href="#iframe标签：" class="headerlink" title="iframe标签："></a>iframe标签：</h1><p>这个类似于在一个网页中再嵌套一个网页。使用target可以搭配起来用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--网页中嵌套另一个网页--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;1000px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--通过name和target进行跳转--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;我的第一个HTML网页.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>点击跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="表格标签："><a href="#表格标签：" class="headerlink" title="表格标签："></a>表格标签：</h1><p>创建表格的标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--table</span><br><span class="hljs-comment">tr:行  colspan:跨行</span><br><span class="hljs-comment">td:列  rowspan:跨列</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>编程语言<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>开发<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>C/C++<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Ruby<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="列表标签："><a href="#列表标签：" class="headerlink" title="列表标签："></a>列表标签：</h1><p>这个分为三种：有序列表，无序列表，自定义列表。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--有序列表ol--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>PHP<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Ruby<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>C/C++<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--无序列表ul--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>PHP<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Ruby<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>C/C++<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--自定义列表</span><br><span class="hljs-comment">dl:标签</span><br><span class="hljs-comment">dt:列表标题</span><br><span class="hljs-comment">dd:列表名字</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>编程语言<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>C++<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>Ruby<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>Kotlin<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="form表单（重点）："><a href="#form表单（重点）：" class="headerlink" title="form表单（重点）："></a>form表单（重点）：</h1><p>这个是HTML中的重点。form表单里包含许多不同类型的标签，大部分是使用input type = “”什么类型实现。</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">type</td><td align="center">指定元素的类型：text、password、checkbox、radio、submit、reset、file、hidden、image和button，默认为text</td></tr><tr><td align="center">name</td><td align="center">指定表单元素的名称</td></tr><tr><td align="center">value</td><td align="center">元素的初始值。type为radio时必须指定一个值</td></tr><tr><td align="center">size</td><td align="center">指定表单元素的初始宽度。当type为text或者password时，表单元素的大小以字符为单位。对于其他的类型，宽度以像素为单位。</td></tr><tr><td align="center">maxlength</td><td align="center">type为text或者password时，输入的最大的字符数</td></tr><tr><td align="center">checked</td><td align="center">type为radio或者checkbox时候，指定的按钮是否被选中</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--form表单</span><br><span class="hljs-comment">action:跳转地址</span><br><span class="hljs-comment">method：</span><br><span class="hljs-comment">get：高效但是不安全，不可以传输大文件</span><br><span class="hljs-comment">post:安全但是不高效，可以传输大文件</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">表单应用：</span><br><span class="hljs-comment">只读：readonly</span><br><span class="hljs-comment">禁用：disabled</span><br><span class="hljs-comment">隐藏域：hidden</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">表单的初级验证：</span><br><span class="hljs-comment">提示信息：palceholder</span><br><span class="hljs-comment">非空判断：required</span><br><span class="hljs-comment">正则表达式：pattern（百度搜索正则表达式公式）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;我的第一个HTML网页.html&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--文本框:input type=&quot;text&quot;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--密码框:input type=&quot;password&quot;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userPwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--单选框标签:input type=&quot;radio&quot;</span><br><span class="hljs-comment">    value:值</span><br><span class="hljs-comment">    name：如果是单选框，只能选一个需要同组，即：name组名相同,多选框无视</span><br><span class="hljs-comment">    默认选择：checked</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        性别：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;man&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">checked</span>&gt;</span>男<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;woman&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span>女<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--多选框:input type=&quot;checkbox&quot;</span><br><span class="hljs-comment">    默认选择：checked</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        爱好：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sleep&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>睡觉<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;chat&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>聊天<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;game&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>游戏<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>写Java<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--按钮:</span><br><span class="hljs-comment">    input type=&quot;button&quot;:普通按钮</span><br><span class="hljs-comment">    input type=&quot;image&quot;:图片按钮</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击跳转&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;button1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../resources/image/java.png&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--文件域:input type=&quot;file&quot;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--下拉框:select</span><br><span class="hljs-comment">    默认选择：selected</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>国家：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;国家&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;china&quot;</span> <span class="hljs-attr">selected</span>&gt;</span>中国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;USA&quot;</span>&gt;</span>美国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UK&quot;</span>&gt;</span>英国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--文本域:textarea</span><br><span class="hljs-comment">    cols:行</span><br><span class="hljs-comment">    rows:列</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;textarea&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--邮箱验证:input type=&quot;email&quot;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>邮箱:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--url验证:input type=&quot;url&quot;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>url:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--数字验证:input type=&quot;number&quot;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>数字:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--滑块:input type=&quot;range&quot;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>滑块：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--搜索框:input type=&quot;search&quot;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>搜索：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="页面结构分析："><a href="#页面结构分析：" class="headerlink" title="页面结构分析："></a>页面结构分析：</h1><table><thead><tr><th align="center">元素名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">header</td><td align="center">标题头部区域的内容</td></tr><tr><td align="center">footer</td><td align="center">标题的脚部的内容</td></tr><tr><td align="center">section</td><td align="center">web页面中的一块独立区域</td></tr><tr><td align="center">article</td><td align="center">独立的文章内容</td></tr><tr><td align="center">aside</td><td align="center">相关内容或应用</td></tr><tr><td align="center">nav</td><td align="center">导航类辅助内容</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Web前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>特立独行不合群</title>
    <link href="/2020/06/06/%E7%89%B9%E7%AB%8B%E7%8B%AC%E8%A1%8C%E4%B8%8D%E5%90%88%E7%BE%A4/"/>
    <url>/2020/06/06/%E7%89%B9%E7%AB%8B%E7%8B%AC%E8%A1%8C%E4%B8%8D%E5%90%88%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<p>有几天没更新博客了，数据库那边在忙收尾工作。加上今天Android的实训刚结束，也没空更新，就把以前的写的发上去吧。</p><p>唉，今天写的超市管理系统业务层代码一直在报错，非常郁闷。改了半天，还是错，要考虑考虑是不是要重写了。</p><span id="more"></span>　　<p>说实话，个人感觉：我挺不合群的。</p><p>舍友四个在宿舍开黑，他们玩的很快乐也很吵。但是我这个人真的不太喜欢玩LOL这种MOBA游戏。在宿舍呆坐了半天，实在受不了，索性就洗个澡来到六楼的天台上，吹吹风听听歌吧。</p><p>　　</p><p>我这个人，看起来平常倒是挺能和别人扯东扯西。但是对于有的不喜欢的事情，我还是会选择不做。这就所谓的是不合群吧。有时候，我感觉自己挺孤单的，当然，也只是某种意义上。</p><p>　　</p><p>其实对于个人的未来，考虑过很多次。中国有句老话:男怕入错行，女怕嫁错娘。个人对于编程对兴趣到底有没有？答案是有的……但是回首再看，高考后选专业真是目光短浅，没有那么爱好这门科目。选这个专业，恐怕只是想为买台属于自己的笔记本电脑找一个合理的借口。自己到底对编程感兴趣吗？当时真的没有去深入考虑……现在感觉，个人只是喜欢那些和电脑或者其它电子产品的前沿的技术和硬件知识。对于编程这门，属于有兴趣，但是是附加值那种感觉。</p><p>　　</p><p>但是没有办法，就像很多次想过的那样，这也让我痛苦了很久。家长的对于你的期待，自己选这门专业的对以后就业的压力的恐惧，对这门专业的总是感觉吃不透以及周围环境的对你的努力嘲讽不屑，都压的我喘不过气来。</p><p>　　</p><p>生而为人，压力总是有的，为了以后的就业，只能不停的去学。就像我我QQ置顶的那句话:Java就像一条不归路，自己选的，总得走下去。但是对于这块，个人觉得，总是有种学了现在的，忘记了之前的。总是记不住。可能每次只是机械的照着别人的打一遍就过了，对于其中的原理和实现总是不理解。之后就是不会去运用。这就是一条while(true)的死循环一样，怎么也跳不出来。</p><p>　　</p><p>至于学历问题，其实我在考上大专之后，一年半都是在做一个混吃等死的人。没有考虑过未来。但是偏偏这次因为疫情影响，在家看了许多线上招聘，发现大专基本没有出路……特别又是这个软件专业……提升自己的学历也成了头等大事。</p><p>想起来两年前，家里对于高考失败的我，还是挺失望的。尽管父母没怎么说，但是，我也的确也让他们脸上无光。再者，我自己都看不起自己。家族里的一群同辈，就我上了个大专，是家族里比较没出息那个。</p><p>　</p><hr><p>　</p><p>有时候个人反省，活了快20年了，从小到大干了错事蠢事真多。</p><p>　</p><p>有时候晚上睡不着，躺在床上想这些事，感觉真的挺后悔的……虽然我总是说不悔过去，但是一个人经历就是这样，忘不了还是忘不了的。很多时候，因为成绩不好，会衍生出来很多的家庭矛盾而无法解决。所以这20年，父母也操了不少心。现在坐在天台上，看着对面的淮阴工学院，感觉也真的挺对不起他们的。</p><p>有时候，我只是想找一个人聊聊天，我想找一个信得过的人去聊一聊，倾述自己的压力（比如现在）。但是，找不到……我不想找父母，他们对于我的期待，我不想打击他们。只能写出来，理一理，有时候心里就会好受多了。</p><p>能信得过的朋友？我还是不相信周围的人。一直都很难去完全相信一个人，不知道为什么……</p><p>……</p><p>现在想起来自己居然20了，有时候居然还会抹眼泪，难啊……活着真累，哈哈哈。</p><p>但是，生活总是要继续……努力吧！</p><p>就像平凡之路里的唱的一样：向前走，就这样走。</p><p>路，是自己选择的，尽量别让自己后悔吧。</p>]]></content>
    
    
    <categories>
      
      <category>-日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL中的JDBC解释和事务操作</title>
    <link href="/2020/06/03/MySQL%E4%B8%AD%E7%9A%84JDBC%E8%A7%A3%E9%87%8A%E5%92%8CIDEA%E8%BF%9E%E6%8E%A5/"/>
    <url>/2020/06/03/MySQL%E4%B8%AD%E7%9A%84JDBC%E8%A7%A3%E9%87%8A%E5%92%8CIDEA%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>这是最后一个章节了，MySQL完结。</p><span id="more"></span><h1 id="JDBC中的对象解释和封装："><a href="#JDBC中的对象解释和封装：" class="headerlink" title="JDBC中的对象解释和封装："></a>JDBC中的对象解释和封装：</h1><h2 id="JDBC对象解释："><a href="#JDBC对象解释：" class="headerlink" title="JDBC对象解释："></a>JDBC对象解释：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">connection代表数据库<br>statement为执行对象<br>ResultSet是在查询select中使用的对象，用get()获取不同的返回值并输出    <br></code></pre></td></tr></table></figure><p>但是在昨天的第一个JDBC程序中，存在可以大量可以封装的成方法的代码，我们把抽取出来作为一个JDBCUtils类。至于用户名，参数，数据库驱动以及连接的数据库，我们只需要在一个properties文件中写入，在JDBCUtils类需要使用时候用load()方法读出来即可。</p><h2 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h2><h3 id="创建一个res-properties文件，写入用户名，密码，数据库驱动，连接的数据库。"><a href="#创建一个res-properties文件，写入用户名，密码，数据库驱动，连接的数据库。" class="headerlink" title="创建一个res.properties文件，写入用户名，密码，数据库驱动，连接的数据库。"></a>创建一个res.properties文件，写入用户名，密码，数据库驱动，连接的数据库。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">driver = com.mysql.jdbc.Driver<br>url = jdbc:mysql:<span class="hljs-comment">//localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=UTF8&amp;useSSL=true</span><br>username = root<br>password = <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h3 id="将properties使用load-读入JDBCUtils类中："><a href="#将properties使用load-读入JDBCUtils类中：" class="headerlink" title="将properties使用load()读入JDBCUtils类中："></a>将properties使用load()读入JDBCUtils类中：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.grz.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtils</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String username = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password = <span class="hljs-keyword">null</span>;<br><br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//把res.properties中的数据读进来，使用load()方法</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            InputStream in = JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;res.properties&quot;</span>);<br>            Properties properties = <span class="hljs-keyword">new</span> Properties();<br>            properties.load(in);<br><br>            driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>            url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            username = properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>            password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><br>            <span class="hljs-comment">//加载驱动</span><br>            Class.forName(driver);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//获取连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(url, username, password);<br>    &#125;<br><br>    <span class="hljs-comment">//关闭连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">(Connection conn, ResultSet re, Statement st)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (re != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                re.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (st != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                st.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于接下来的CUDA，除了查询，其他统一使用executeUpdate()，我们因为抽取了重复代码封装在JDBCUtils类中，所以只在Sql语句上有改动。</p><h3 id="插入insert："><a href="#插入insert：" class="headerlink" title="插入insert："></a>插入insert：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.grz;<br><br><span class="hljs-keyword">import</span> com.grz.JDBCUtils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInsert</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        Statement st = <span class="hljs-keyword">null</span>;<br>        ResultSet re = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//连接数据库，connection代表数据库</span><br>            conn = JDBCUtils.getConnection();<br>            <span class="hljs-comment">//创建SQL对象，statement为执行对象</span><br>            st = conn.createStatement();<br>            <span class="hljs-comment">//写sql语句</span><br>            String sql = <span class="hljs-string">&quot;insert into users (`id`, `NAME`, `PASSWORD`, `email`, `birthday`) VALUES (4,&#x27;grz&#x27;,&#x27;123456&#x27;,&#x27;3240367689@qq.com&#x27;,&#x27;2000-10-13&#x27;)&quot;</span>;<br>            <span class="hljs-comment">//执行</span><br>            <span class="hljs-keyword">int</span> i = st.executeUpdate(sql);<br>            <span class="hljs-comment">//返回int值，i&gt;0,则有一行受到影响，插入成功</span><br>            <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;插入成功&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-comment">//调用JDBCUtils方法中的release方法关闭，因为ResultSet没有使用，传入null值</span><br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>         JDBCUtils.release(conn,<span class="hljs-keyword">null</span>,st);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除delete："><a href="#删除delete：" class="headerlink" title="删除delete："></a>删除delete：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql">package com.grz;<br><br>import com.grz.JDBCUtils.JDBCUtils;<br><br>import java.sql.Connection;<br>import java.sql.ResultSet;<br>import java.sql.SQLException;<br>import java.sql.Statement;<br><br>public class TestDelete &#123;<br>    public <span class="hljs-keyword">static</span> void main(String[] args) &#123;<br>        Connection conn <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br>        Statement st <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br>        ResultSet re <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br><br>        try &#123;<br>            conn <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br>            st <span class="hljs-operator">=</span> conn.createStatement();<br>            String <span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;delete from users where id = 4&quot;;<br>            <span class="hljs-type">int</span> i <span class="hljs-operator">=</span> st.executeUpdate(<span class="hljs-keyword">sql</span>);<br>            if (i<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span>)&#123;<br>                System.out.println(&quot;删除成功&quot;);<br>            &#125;<br><br>        &#125; catch (<span class="hljs-keyword">SQLException</span> e) &#123;<br>            e.printStackTrace();<br>        &#125;finally &#123;<br>            JDBCUtils.release(conn,<span class="hljs-keyword">null</span>,st);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改update："><a href="#修改update：" class="headerlink" title="修改update："></a>修改update：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.grz;<br><br><span class="hljs-keyword">import</span> com.grz.JDBCUtils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUpdate</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        ResultSet re = <span class="hljs-keyword">null</span>;<br>        Statement st = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>           conn = JDBCUtils.getConnection();<br>          st = conn.createStatement();<br>          String sql = <span class="hljs-string">&quot;update users set PASSWORD = &#x27;111111&#x27; where id = 4&quot;</span>;<br>            <span class="hljs-keyword">int</span> i = st.executeUpdate(sql);<br>            <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.release(conn,<span class="hljs-keyword">null</span>,st);<br>        &#125;<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure><h3 id="查询select："><a href="#查询select：" class="headerlink" title="查询select："></a>查询select：</h3><p>最后是查询，查询需要使用ResultSet，并使用executeQuery()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.grz;<br><br><span class="hljs-keyword">import</span> com.grz.JDBCUtils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSelect</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        ResultSet re = <span class="hljs-keyword">null</span>;<br>        Statement st = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JDBCUtils.getConnection();<br>           st =  conn.createStatement();<br>            re = st.executeQuery(<span class="hljs-string">&quot;select * from users &quot;</span>);<br>            <span class="hljs-keyword">while</span> (re.next())&#123;<br>                System.out.println(<span class="hljs-string">&quot;id=&quot;</span>+re.getObject(<span class="hljs-string">&quot;id&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+re.getObject(<span class="hljs-string">&quot;NAME&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;password=&quot;</span>+re.getObject(<span class="hljs-string">&quot;PASSWORD&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;email=&quot;</span>+re.getObject(<span class="hljs-string">&quot;email&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;birthday=&quot;</span>+re.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.release(conn,re,st);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br>运行结果：<br>id=<span class="hljs-number">1</span><br>name=zhansan<br>password=<span class="hljs-number">123456</span><br>email=zs<span class="hljs-meta">@sina</span>.com<br>birthday=<span class="hljs-number">1980</span>-<span class="hljs-number">12</span>-<span class="hljs-number">04</span><br>===============<br>id=<span class="hljs-number">2</span><br>name=lisi<br>password=<span class="hljs-number">123456</span><br>email=lisi<span class="hljs-meta">@sina</span>.com<br>birthday=<span class="hljs-number">1981</span>-<span class="hljs-number">12</span>-<span class="hljs-number">04</span><br>===============<br>id=<span class="hljs-number">3</span><br>name=wangwu<br>password=<span class="hljs-number">123456</span><br>email=wangwu<span class="hljs-meta">@sina</span>.com<br>birthday=<span class="hljs-number">1979</span>-<span class="hljs-number">12</span>-<span class="hljs-number">04</span><br>===============<br>id=<span class="hljs-number">4</span><br>name=grz<br>password=<span class="hljs-number">111111</span><br>email=<span class="hljs-number">3240367689</span><span class="hljs-meta">@qq</span>.com<br>birthday=<span class="hljs-number">2000</span>-<span class="hljs-number">10</span>-<span class="hljs-number">13</span><br>===============<br><br>Process finished with exit code <span class="hljs-number">0</span><br>    <br></code></pre></td></tr></table></figure><p>但是，我们只使用Statement会导致问题：<strong>SQL注入！</strong></p><h1 id="SQL注入："><a href="#SQL注入：" class="headerlink" title="SQL注入："></a>SQL注入：</h1><p>概述:SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。(百度百科)</p><p>对此，我们使用PreparedStatement对Sql进行预加载（使用?占位符）。在预加载后，手动添加值进入sql语句。</p><p>我们还是用上面的代码，但是将 Statement替换为 PreparedStatement。</p><h2 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h2><h3 id="插入insert：-1"><a href="#插入insert：-1" class="headerlink" title="插入insert："></a>插入insert：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.grz.SqlInject;<br><br><span class="hljs-keyword">import</span> com.grz.JDBCUtils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSqlInjectInsert</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement st = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JDBCUtils.getConnection();<br><br>            <span class="hljs-comment">//区别</span><br>            <span class="hljs-comment">//使用？占位符代替参数</span><br>            st =  conn.prepareStatement(<span class="hljs-string">&quot;insert into users(`id`,`NAME`,`PASSWORD`,`email`,`birthday`) values (?,?,?,?,?)&quot;</span>);<br>            <span class="hljs-comment">//手动赋值,第一个数值parameterIndex为sql语句中的参数位置，第二个数值x是传入的值</span><br>            st.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);<br>            st.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;xyz&quot;</span>);<br>            st.setString(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>            st.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;10000@qq.com&quot;</span>);<br>            <span class="hljs-comment">//注意sql.Date java.sql.Date()</span><br>            <span class="hljs-comment">//    java.util.Date()时间戳</span><br>            st.setDate(<span class="hljs-number">5</span>,<span class="hljs-keyword">new</span> java.sql.Date(<span class="hljs-keyword">new</span> Date().getTime()));<br><br>            <span class="hljs-comment">//执行</span><br>            <span class="hljs-keyword">int</span> i = st.executeUpdate();<br>            <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;插入成功&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.release(conn,<span class="hljs-keyword">null</span>,st);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除delete：-1"><a href="#删除delete：-1" class="headerlink" title="删除delete："></a>删除delete：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.grz.SqlInject;<br><br><span class="hljs-keyword">import</span> com.grz.JDBCUtils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSqlInjectDelete</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement st = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JDBCUtils.getConnection();<br>            st = conn.prepareStatement(<span class="hljs-string">&quot;delete from `users` where `id`=? &quot;</span>);<br><br>            st.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);<br><br>            <span class="hljs-keyword">int</span> i = st.executeUpdate();<br>            <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.release(conn,<span class="hljs-keyword">null</span>,st);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改update：-1"><a href="#修改update：-1" class="headerlink" title="修改update："></a>修改update：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.grz.SqlInject;<br><br><span class="hljs-keyword">import</span> com.grz.JDBCUtils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSqlInjectUpdate</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement st = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JDBCUtils.getConnection();<br>            st = conn.prepareStatement(<span class="hljs-string">&quot;update `users` set `PASSWORD` = ? where `id` = ?&quot;</span>);<br><br>            st.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;111111&quot;</span>);<br>            st.setInt(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>);<br><br><br>            <span class="hljs-keyword">int</span> i = st.executeUpdate();<br>            <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">1</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;更新成功&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.release(conn,<span class="hljs-keyword">null</span>,st);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查询select：-1"><a href="#查询select：-1" class="headerlink" title="查询select："></a>查询select：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.grz.SqlInject;<br><br><span class="hljs-keyword">import</span> com.grz.JDBCUtils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSqlInjectSelect</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        ResultSet re = <span class="hljs-keyword">null</span>;<br>        PreparedStatement st = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JDBCUtils.getConnection();<br>            st = conn.prepareStatement(<span class="hljs-string">&quot;select * from `users` where `id`=?&quot;</span>);<br><br>            st.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>            re = st.executeQuery();<br><br>            <span class="hljs-keyword">while</span> (re.next()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;编号:&quot;</span> + re.getObject(<span class="hljs-string">&quot;id&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;名字：&quot;</span> + re.getObject(<span class="hljs-string">&quot;NAME&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;密码：&quot;</span> + re.getObject(<span class="hljs-string">&quot;PASSWORD&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;邮箱：&quot;</span> + re.getObject(<span class="hljs-string">&quot;email&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;生日：&quot;</span> + re.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.release(conn, re, st);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JDBC事务操作："><a href="#JDBC事务操作：" class="headerlink" title="JDBC事务操作："></a>JDBC事务操作：</h1><p>这块和在SQLyog中略有不同。</p><p>在SQL yog中，开启事务需要：</p><ol><li>关闭自动提交</li><li>创建一个事务</li><li>执行sql语句</li><li>成功就commit（提交），失败则rollback（回滚）</li><li>开启自动提交</li></ol><p>但是在JDBC中，对于事务操作，在关闭自动提交的同时，事务就被创建。</p><h2 id="举例：-2"><a href="#举例：-2" class="headerlink" title="举例："></a>举例：</h2><p>我们依旧使用转账案例来说明(使用JDBCUtils类)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.grz.TestTransaction;<br><br><span class="hljs-keyword">import</span> com.grz.JDBCUtils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTransaction</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement st = <span class="hljs-keyword">null</span>;<br>        ResultSet re = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JDBCUtils.getConnection();<br>            <span class="hljs-comment">//关闭自动提交，默认也开启了事务</span><br>            conn.setAutoCommit(<span class="hljs-keyword">false</span>);<br>            <br>            <span class="hljs-comment">//转账依旧使用update</span><br>            String sql1 = <span class="hljs-string">&quot;update `account` set `money`=`money`-100 where `name`=&#x27;grz&#x27;&quot;</span>;<br>            st = conn.prepareStatement(sql1);<br>            st.executeUpdate();<br><br>            String sql2 = <span class="hljs-string">&quot;update  `account` set `money`=`money`+100 where `name`=&#x27;xyz&#x27;&quot;</span>;<br>            st = conn.prepareStatement(sql2);<br>            st.executeUpdate();<br><br>            <span class="hljs-comment">//业务完毕，提交</span><br>            conn.commit();<br>            System.out.println(<span class="hljs-string">&quot;提交成功&quot;</span>);<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//失败则回滚</span><br>                conn.rollback();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e1) &#123;<br>                e1.printStackTrace();<br>            &#125;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.release(conn,<span class="hljs-keyword">null</span>,st);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL中的三大范式和第一个JDBC程序</title>
    <link href="/2020/06/02/MySQL%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F%E5%92%8C%E7%AC%AC%E4%B8%80%E4%B8%AAJDBC%E7%A8%8B%E5%BA%8F/"/>
    <url>/2020/06/02/MySQL%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F%E5%92%8C%E7%AC%AC%E4%B8%80%E4%B8%AAJDBC%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>三大范式在面试会问，JDBC需要手动导入MySQL驱动包，Maven仓库可以找到。</p><span id="more"></span><h1 id="规范化数据库设计和三大范式："><a href="#规范化数据库设计和三大范式：" class="headerlink" title="规范化数据库设计和三大范式："></a>规范化数据库设计和三大范式：</h1><h2 id="规范化数据库设计："><a href="#规范化数据库设计：" class="headerlink" title="规范化数据库设计："></a>规范化数据库设计：</h2><h3 id="为什么需要数据库设计？"><a href="#为什么需要数据库设计？" class="headerlink" title="为什么需要数据库设计？"></a>为什么需要数据库设计？</h3><p><strong>当数据库比较复杂时我们需要设计数据库</strong></p><p><strong>糟糕的数据库设计 :</strong> </p><ul><li>数据冗余,存储空间浪费</li><li>数据更新和插入的异常</li><li>程序性能差</li></ul><p><strong>良好的数据库设计 :</strong> </p><ul><li>节省数据的存储空间</li><li>能够保证数据的完整性</li><li>方便进行数据库应用系统的开发</li></ul><p> <strong>软件项目开发周期中数据库设计 :</strong></p><ul><li>需求分析阶段: 分析客户的业务和数据处理需求</li><li>概要设计阶段:设计数据库的E-R模型图 , 确认需求信息的正确和完整.</li></ul><p><strong>设计数据库步骤</strong></p><ul><li><p>收集信息</p></li><li><ul><li>与该系统有关人员进行交流 , 座谈 , 充分了解用户需求 , 理解数据库需要完成的任务.</li></ul></li><li><p>标识实体[Entity]</p></li><li></li><li><ul><li>标识数据库要管理的关键对象或实体,实体一般是名词</li></ul></li><li><p>标识每个实体需要存储的详细信息[Attribute]</p></li><li><p>标识实体之间的关系[Relationship]</p></li></ul><p><strong>问题 : 为什么需要数据规范化?</strong></p><p>不合规范的表设计会导致的问题：</p><ul><li><p>信息重复</p></li><li><p>更新异常</p></li><li><p>插入异常</p></li><li><ul><li>无法正确表示信息</li></ul></li><li><p>删除异常</p></li><li><ul><li>丢失有效信息</li></ul></li></ul><hr><ul><li></li></ul><h2 id="三大范式："><a href="#三大范式：" class="headerlink" title="三大范式："></a>三大范式：</h2><p><strong>第一范式 (1st NF)</strong></p><p>第一范式的目标是确保每列的原子性,如果每列都是不可再分的最小数据单元,则满足第一范式</p><p><strong>第二范式(2nd NF)</strong></p><p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。</p><p>第二范式要求每个表只描述一件事情</p><p><strong>第三范式(3rd NF)</strong></p><p>如果一个关系满足第二范式,并且除了主键以外的其他列都不传递依赖于主键列,则满足第三范式.</p><p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p><p><strong>规范化和性能的关系</strong></p><p>为满足某种商业目标 , 数据库性能比规范化数据库更重要</p><p>在数据规范化的同时 , 要综合考虑数据库的性能</p><p>通过在给定的表中添加额外的字段,以大量减少需要从中搜索信息所需的时间</p><p>通过在给定的表中插入计算列,以方便查询</p><h1 id="创建第一个JDBC程序："><a href="#创建第一个JDBC程序：" class="headerlink" title="创建第一个JDBC程序："></a>创建第一个JDBC程序：</h1><p>需要导入驱动，在Maven仓库里搜索数据库对应版本下载，在项目的目录下创建lib，导入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.grz;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">//我的第一个JDBC程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcFirstDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br>        <span class="hljs-comment">//加载驱动，固定写法</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br><br>        <span class="hljs-comment">//创建用户信息和url，useUnicode=true&amp;characterEncoding=UTF8&amp;useSSL=true是固定写法，使用?连接</span><br>        String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=UTF8&amp;useSSL=true&quot;</span>;<br>        String username = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;123456&quot;</span>;<br><br>        <span class="hljs-comment">//连接数据库，connection代表数据库</span><br>        Connection connection = DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//创建SQL对象，statement为执行对象</span><br>        Statement statement = connection.createStatement();<br><br>        <span class="hljs-comment">//执行SQL</span><br>        String sql = <span class="hljs-string">&quot;SELECT * FROM users&quot;</span>;<br>        ResultSet resultSet = statement.executeQuery(sql);<span class="hljs-comment">//返回结果集</span><br>        <span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>            System.out.println(<span class="hljs-string">&quot;id=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;id&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;NAME&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;password=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;PASSWORD&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;email=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;email&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;birthday=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//释放连接</span><br>        resultSet.close();<br>        statement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL中的权限和导出</title>
    <link href="/2020/06/01/MySQL%E4%B8%AD%E7%9A%84%E6%9D%83%E9%99%90%E5%92%8C%E5%AF%BC%E5%87%BA/"/>
    <url>/2020/06/01/MySQL%E4%B8%AD%E7%9A%84%E6%9D%83%E9%99%90%E5%92%8C%E5%AF%BC%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<p>权限是防止删库用，导出和导入需要在命令行中使用。</p><span id="more"></span><h1 id="用户管理："><a href="#用户管理：" class="headerlink" title="用户管理："></a>用户管理：</h1><p>用户管理需要在MySQL.user表中进行修改。</p><p>其实说到底，也是一个表，和普通表操作基本没有区别。</p><p>关键字：</p><p>创建：create</p><p>设置：set</p><p>删除：drop</p><p>撤销：revoke</p><p>查看：show</p><p>分配：grant</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/* 用户和权限管理 */</span> <span class="hljs-comment">------------------</span><br>用户信息表：mysql.user<br><br><span class="hljs-comment">-- 刷新权限</span><br>FLUSH PRIVILEGES<br><br><span class="hljs-comment">-- 增加用户 CREATE USER grz IDENTIFIED BY &#x27;123456&#x27;</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> 用户名 IDENTIFIED <span class="hljs-keyword">BY</span> [PASSWORD] 密码(字符串)<br>  <span class="hljs-operator">-</span> 必须拥有mysql数据库的全局<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span>权限，或拥有<span class="hljs-keyword">INSERT</span>权限。<br>  <span class="hljs-operator">-</span> 只能创建用户，不能赋予权限。<br>  <span class="hljs-operator">-</span> 用户名，注意引号：如 <span class="hljs-string">&#x27;user_name&#x27;</span>@<span class="hljs-string">&#x27;192.168.1.1&#x27;</span><br>  <span class="hljs-operator">-</span> 密码也需引号，纯数字密码也要加引号<br>  <span class="hljs-operator">-</span> 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD<br><br><span class="hljs-comment">-- 重命名用户 RENAME USER grz TO grz2</span><br>RENAME <span class="hljs-keyword">USER</span> old_user <span class="hljs-keyword">TO</span> new_user<br><br><span class="hljs-comment">-- 设置密码</span><br><span class="hljs-keyword">SET</span> PASSWORD <span class="hljs-operator">=</span> PASSWORD(<span class="hljs-string">&#x27;密码&#x27;</span>)    <span class="hljs-comment">-- 为当前用户设置密码</span><br><span class="hljs-keyword">SET</span> PASSWORD <span class="hljs-keyword">FOR</span> 用户名 <span class="hljs-operator">=</span> PASSWORD(<span class="hljs-string">&#x27;密码&#x27;</span>)    <span class="hljs-comment">-- 为指定用户设置密码</span><br><br><span class="hljs-comment">-- 删除用户 DROP USER grz2</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> 用户名<br><br><span class="hljs-comment">-- 分配权限/添加用户</span><br><span class="hljs-keyword">GRANT</span> 权限列表 <span class="hljs-keyword">ON</span> 表名 <span class="hljs-keyword">TO</span> 用户名 [IDENTIFIED <span class="hljs-keyword">BY</span> [PASSWORD] <span class="hljs-string">&#x27;password&#x27;</span>]<br>  <span class="hljs-operator">-</span> <span class="hljs-keyword">all</span> privileges 表示所有权限<br>  <span class="hljs-operator">-</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> 表示所有库的所有表<br>  <span class="hljs-operator">-</span> 库名.表名 表示某库下面的某表<br><br><span class="hljs-comment">-- 查看权限   SHOW GRANTS FOR root@localhost;</span><br><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> 用户名<br>   <span class="hljs-comment">-- 查看当前用户权限</span><br>  <span class="hljs-keyword">SHOW</span> GRANTS; 或 <span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> <span class="hljs-built_in">CURRENT_USER</span>; 或 <span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> <span class="hljs-built_in">CURRENT_USER</span>();<br><br><span class="hljs-comment">-- 撤消权限</span><br><span class="hljs-keyword">REVOKE</span> 权限列表 <span class="hljs-keyword">ON</span> 表名 <span class="hljs-keyword">FROM</span> 用户名<br><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">ALL</span> PRIVILEGES, <span class="hljs-keyword">GRANT</span> OPTION <span class="hljs-keyword">FROM</span> 用户名    <span class="hljs-comment">-- 撤销所有权限</span><br></code></pre></td></tr></table></figure><p>权限说明：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 权限列表</span><br><span class="hljs-keyword">ALL</span> [PRIVILEGES]    <span class="hljs-comment">-- 设置除GRANT OPTION之外的所有简单权限</span><br><span class="hljs-keyword">ALTER</span>    <span class="hljs-comment">-- 允许使用ALTER TABLE</span><br><span class="hljs-keyword">ALTER</span> ROUTINE    <span class="hljs-comment">-- 更改或取消已存储的子程序</span><br><span class="hljs-keyword">CREATE</span>    <span class="hljs-comment">-- 允许使用CREATE TABLE</span><br><span class="hljs-keyword">CREATE</span> ROUTINE    <span class="hljs-comment">-- 创建已存储的子程序</span><br><span class="hljs-keyword">CREATE</span> TEMPORARY TABLES        <span class="hljs-comment">-- 允许使用CREATE TEMPORARY TABLE</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span>        <span class="hljs-comment">-- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span>        <span class="hljs-comment">-- 允许使用CREATE VIEW</span><br><span class="hljs-keyword">DELETE</span>    <span class="hljs-comment">-- 允许使用DELETE</span><br><span class="hljs-keyword">DROP</span>    <span class="hljs-comment">-- 允许使用DROP TABLE</span><br><span class="hljs-keyword">EXECUTE</span>        <span class="hljs-comment">-- 允许用户运行已存储的子程序</span><br>FILE    <span class="hljs-comment">-- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span><br>INDEX     <span class="hljs-comment">-- 允许使用CREATE INDEX和DROP INDEX</span><br><span class="hljs-keyword">INSERT</span>    <span class="hljs-comment">-- 允许使用INSERT</span><br>LOCK TABLES        <span class="hljs-comment">-- 允许对您拥有SELECT权限的表使用LOCK TABLES</span><br>PROCESS     <span class="hljs-comment">-- 允许使用SHOW FULL PROCESSLIST</span><br><span class="hljs-keyword">REFERENCES</span>    <span class="hljs-comment">-- 未被实施</span><br>RELOAD    <span class="hljs-comment">-- 允许使用FLUSH</span><br>REPLICATION CLIENT    <span class="hljs-comment">-- 允许用户询问从属服务器或主服务器的地址</span><br>REPLICATION SLAVE    <span class="hljs-comment">-- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span><br><span class="hljs-keyword">SELECT</span>    <span class="hljs-comment">-- 允许使用SELECT</span><br><span class="hljs-keyword">SHOW</span> DATABASES    <span class="hljs-comment">-- 显示所有数据库</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">VIEW</span>    <span class="hljs-comment">-- 允许使用SHOW CREATE VIEW</span><br>SHUTDOWN    <span class="hljs-comment">-- 允许使用mysqladmin shutdown</span><br>SUPER    <span class="hljs-comment">-- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span><br>UPDATE    <span class="hljs-comment">-- 允许使用UPDATE</span><br>USAGE    <span class="hljs-comment">-- “无权限”的同义词</span><br><span class="hljs-keyword">GRANT</span> OPTION    <span class="hljs-comment">-- 允许授予权限</span><br><br><br><span class="hljs-comment">/* 表维护 */</span><br><br><span class="hljs-comment">-- 分析和存储表的关键字分布</span><br>ANALYZE [<span class="hljs-keyword">LOCAL</span> <span class="hljs-operator">|</span> NO_WRITE_TO_BINLOG] <span class="hljs-keyword">TABLE</span> 表名 ...<br><span class="hljs-comment">-- 检查一个或多个表是否有错误</span><br><span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">TABLE</span> tbl_name [, tbl_name] ... [option] ...<br>option <span class="hljs-operator">=</span> &#123;QUICK <span class="hljs-operator">|</span> FAST <span class="hljs-operator">|</span> MEDIUM <span class="hljs-operator">|</span> EXTENDED <span class="hljs-operator">|</span> CHANGED&#125;<br><span class="hljs-comment">-- 整理数据文件的碎片</span><br>OPTIMIZE [<span class="hljs-keyword">LOCAL</span> <span class="hljs-operator">|</span> NO_WRITE_TO_BINLOG] <span class="hljs-keyword">TABLE</span> tbl_name [, tbl_name] ...<br><br></code></pre></td></tr></table></figure><h1 id="MySQL备份："><a href="#MySQL备份：" class="headerlink" title="MySQL备份："></a>MySQL备份：</h1><p>这个需要在CMD命令行中实现。</p><p>数据库备份必要性</p><ul><li>保证重要数据不丢失</li><li>数据转移</li></ul><p>MySQL数据库备份方法</p><ul><li>mysqldump备份工具</li><li>数据库管理工具,如SQLyog</li><li>直接拷贝数据库文件和相关配置文件</li></ul><p><strong>mysqldump客户端</strong></p><p>作用 :</p><ul><li>转储数据库</li><li>搜集数据库进行备份</li><li>将数据转移到另一个SQL服务器,不一定是MySQL服务器</li></ul><h2 id="导出使用mysqldump"><a href="#导出使用mysqldump" class="headerlink" title="导出使用mysqldump:"></a>导出使用mysqldump:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 导出一张表 -- mysqldump -uroot -p123456 school student &gt;D:/a.sql<br>　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)<br>2. 导出多张表 -- mysqldump -uroot -p123456 school student result &gt;D:/a.sql<br>　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)<br>3. 导出所有表 -- mysqldump -uroot -p123456 school &gt;D:/a.sql<br>　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)<br>4. 导出一个库 -- mysqldump -uroot -p123456 -B school &gt;D:/a.sql<br>　　mysqldump -u用户名 -p密码 -B 库名 &gt; 文件名(D:/a.sql)<br><br>可以-w携带备份条件<br></code></pre></td></tr></table></figure><h2 id="导入source："><a href="#导入source：" class="headerlink" title="导入source："></a>导入source：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">-- 导入<br>1. 在登录mysql的情况下：-- <span class="hljs-built_in">source</span> D:/a.sql<br>　　<span class="hljs-built_in">source</span> 备份文件<br>2. 在不登录的情况下<br>　　mysql -u用户名 -p密码 库名 &lt; 备份文件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL中的事务和索引</title>
    <link href="/2020/05/30/MySQL%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%92%8C%E7%B4%A2%E5%BC%95/"/>
    <url>/2020/05/30/MySQL%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%92%8C%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<p>事务是为后期和Java中的try……catch语句结合起来写。使用索引是提高MySQL查询速度。</p><span id="more"></span><h1 id="事务："><a href="#事务：" class="headerlink" title="事务："></a>事务：</h1><h2 id="事务具有四种属性：ACID"><a href="#事务具有四种属性：ACID" class="headerlink" title="事务具有四种属性：ACID"></a><strong>事务具有四种属性：ACID</strong></h2><p>A：<strong>原子性(Atomic)</strong></p><ul><li>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。</li></ul><p>C：<strong>一致性(Consist)</strong></p><ul><li>一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。</li></ul><p>I：<strong>隔离性(Isolated)</strong></p><ul><li>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</li></ul><p>D：<strong>持久性(Durable)</strong></p><ul><li>在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</li></ul><h2 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用set语句来改变自动提交模式</span><br><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">/*关闭*/</span><br><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;   <span class="hljs-comment">/*开启*/</span><br><br><span class="hljs-comment">-- 注意:</span><br><span class="hljs-comment">--- 1.MySQL中默认是自动提交</span><br><span class="hljs-comment">--- 2.使用事务时应先关闭自动提交</span><br><br><span class="hljs-comment">-- 开始一个事务,标记事务的起始点</span><br><span class="hljs-keyword">START</span> TRANSACTION  <br><br><span class="hljs-comment">-- 提交一个事务给数据库</span><br><span class="hljs-keyword">COMMIT</span><br><br><span class="hljs-comment">-- 将事务回滚,数据回到本次事务的初始状态</span><br><span class="hljs-keyword">ROLLBACK</span><br><br><span class="hljs-comment">-- 还原MySQL数据库的自动提交</span><br><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><br><span class="hljs-comment">-- 保存点</span><br><span class="hljs-keyword">SAVEPOINT</span> 保存点名称 <span class="hljs-comment">-- 设置一个事务保存点</span><br><span class="hljs-keyword">ROLLBACK</span> <span class="hljs-keyword">TO</span> <span class="hljs-keyword">SAVEPOINT</span> 保存点名称 <span class="hljs-comment">-- 回滚到保存点</span><br><span class="hljs-keyword">RELEASE</span> <span class="hljs-keyword">SAVEPOINT</span> 保存点名称 <span class="hljs-comment">-- 删除保存点</span><br></code></pre></td></tr></table></figure><p>我们使用转账来举例：</p><p>创建一个表并插入例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `account` (<br>`id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) AUTO_INCREMENT,<br>`name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`moeny` <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">9</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY(`id`)<br>)ENGINE <span class="hljs-operator">=</span> INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `account`(`name`,`moeny`)<span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;GRZ&#x27;</span>,<span class="hljs-string">&#x27;10000.00&#x27;</span>),(<span class="hljs-string">&#x27;XYZ&#x27;</span>,<span class="hljs-number">2000.00</span>)<br></code></pre></td></tr></table></figure><p>在MySQL中，自动提交是保持打卡的状态的，我们写一个事务，第一步需要将自动提交关闭。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 自动提交的状态分为打开：1，和关闭：0，两个状态。</span><br><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>之后开启一个事务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">START</span> TRANSACTION<br></code></pre></td></tr></table></figure><p>写入转账的语句，即update语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- GRZ的账户-500，XYZ+500</span><br>UPDATE `account` <span class="hljs-keyword">set</span> `moeny` <span class="hljs-operator">=</span> `moeny`<span class="hljs-number">-500</span> <span class="hljs-keyword">where</span> `name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;GRZ&#x27;</span><br>UPDATE `account` <span class="hljs-keyword">set</span> `moeny` <span class="hljs-operator">=</span> `moeny`<span class="hljs-operator">+</span><span class="hljs-number">500</span> <span class="hljs-keyword">where</span> `name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;XYZ&#x27;</span><br></code></pre></td></tr></table></figure><p>两种选择，commit和rollback</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span> <span class="hljs-comment">--提交</span><br><span class="hljs-keyword">rollback</span> <span class="hljs-comment">-- 回滚</span><br></code></pre></td></tr></table></figure><p>将自动提交打开：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="索引："><a href="#索引：" class="headerlink" title="索引："></a>索引：</h1><h2 id="索引作用："><a href="#索引作用：" class="headerlink" title="索引作用："></a>索引作用：</h2><ul><li>提高查询速度</li><li>确保数据的唯一性</li><li>可以加速表和表之间的连接 , 实现表与表之间的参照完整性</li><li>使用分组和排序子句进行数据检索时 , 可以显著减少分组和排序的时间</li><li>全文检索字段进行搜索优化.</li></ul><h2 id="索引分类："><a href="#索引分类：" class="headerlink" title="索引分类："></a>索引分类：</h2><h3 id="主键索引-Primary-Key-："><a href="#主键索引-Primary-Key-：" class="headerlink" title="主键索引(Primary Key)："></a>主键索引(Primary Key)：</h3><p>主键 : 某一个属性组能唯一标识一条记录</p><p>特点 :</p><ul><li>最常见的索引类型</li><li>确保数据记录的唯一性</li><li>确定特定数据记录在数据库中的位置</li></ul><h3 id="唯一索引-Unique-："><a href="#唯一索引-Unique-：" class="headerlink" title="唯一索引(Unique)："></a>唯一索引(Unique)：</h3><p>作用 : 避免同一个表中某数据列中的值重复</p><p>与主键索引的区别</p><ul><li>主键索引只能有一个</li><li>唯一索引可能有多个</li></ul><h3 id="普通索引-Index-："><a href="#普通索引-Index-：" class="headerlink" title="普通索引 (Index)："></a>普通索引 (Index)：</h3><p>作用 : 快速定位特定数据</p><p>注意 :</p><ul><li>index 和 key 关键字都可以设置常规索引</li><li>应加在查询找条件的字段</li><li>不宜添加太多常规索引,影响数据的插入,删除和修改操作</li></ul><h3 id="全文索引-FullText-："><a href="#全文索引-FullText-：" class="headerlink" title="全文索引(FullText)："></a>全文索引(FullText)：</h3><p>作用 : 快速定位特定数据</p><p>注意 :</p><ul><li>只能用于MyISAM类型的数据表</li><li>只能用于CHAR , VARCHAR , TEXT数据列类型</li><li>适合大型数据集</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">#方法一：创建表时</span><br><span class="hljs-comment">  　　CREATE TABLE 表名 (</span><br><span class="hljs-comment">               字段名1 数据类型 [完整性约束条件…],</span><br><span class="hljs-comment">               字段名2 数据类型 [完整性约束条件…],</span><br><span class="hljs-comment">               [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY</span><br><span class="hljs-comment">               [索引名] (字段名[(长度)] [ASC |DESC])</span><br><span class="hljs-comment">               );</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#方法二：CREATE在已存在的表上创建索引</span><br><span class="hljs-comment">       CREATE [UNIQUE | FULLTEXT | SPATIAL ] INDEX 索引名</span><br><span class="hljs-comment">                    ON 表名 (字段名[(长度)] [ASC |DESC]) ;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#方法三：ALTER TABLE在已存在的表上创建索引</span><br><span class="hljs-comment">       ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL ] INDEX</span><br><span class="hljs-comment">                            索引名 (字段名[(长度)] [ASC |DESC]) ;</span><br><span class="hljs-comment">                           </span><br><span class="hljs-comment">                           </span><br><span class="hljs-comment">#删除索引：DROP INDEX 索引名 ON 表名字;</span><br><span class="hljs-comment">#删除主键索引: ALTER TABLE 表名 DROP PRIMARY KEY;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#显示索引信息: SHOW INDEX FROM student;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*增加全文索引*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `school`.`student` <span class="hljs-keyword">ADD</span> FULLTEXT INDEX `studentname` (`StudentName`);<br><br><span class="hljs-comment">/*EXPLAIN : 分析SQL语句执行性能*/</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> studentno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1000&#x27;</span>;<br><br><span class="hljs-comment">/*使用全文索引*/</span><br><span class="hljs-comment">-- 全文搜索通过 MATCH() 函数完成。</span><br><span class="hljs-comment">-- 搜索字符串作为 against() 的参数被给定。搜索以忽略字母大小写的方式执行。对于表中的每个记录行，MATCH() 返回一个相关性值。即，在搜索字符串与记录行在 MATCH() 列表中指定的列的文本之间的相似性尺度。</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">MATCH</span>(studentname) AGAINST(<span class="hljs-string">&#x27;love&#x27;</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">开始之前，先说一下全文索引的版本、存储引擎、数据类型的支持情况</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">MySQL 5.6 以前的版本，只有 MyISAM 存储引擎支持全文索引；</span><br><span class="hljs-comment">MySQL 5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引;</span><br><span class="hljs-comment">只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。</span><br><span class="hljs-comment">测试或使用全文索引时，要先看一下自己的 MySQL 版本、存储引擎和数据类型是否支持全文索引。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>测试全文索引，我们在数据库中插入100万条数据来测试举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `app_user` (<br>`id` <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>) UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;用户昵称&#x27;</span>,<br>`email` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户邮箱&#x27;</span>,<br>`phone` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;手机号&#x27;</span>,<br>`gender` TINYINT(<span class="hljs-number">4</span>) UNSIGNED <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;性别（0:男；1：女）&#x27;</span>,<br>`password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>`age` TINYINT(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>`create_time` DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>`update_time` <span class="hljs-type">TIMESTAMP</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">ON</span> UPDATE <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;app用户表&#x27;</span><br><br><span class="hljs-comment">-- 插入100万条数据</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> IF <span class="hljs-keyword">EXISTS</span> mock_data;<br>DELIMITER $$<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> mock_data()<br><span class="hljs-keyword">RETURNS</span> <span class="hljs-type">INT</span><br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> num <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1000000</span>;<br><span class="hljs-keyword">DECLARE</span> i <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br>WHILE i <span class="hljs-operator">&lt;</span> num DO<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> app_user(`name`, `email`, `phone`, `gender`, `password`, `age`)<br>   <span class="hljs-keyword">VALUES</span>(CONCAT(<span class="hljs-string">&#x27;用户&#x27;</span>, i), <span class="hljs-string">&#x27;24736743@qq.com&#x27;</span>, CONCAT(<span class="hljs-string">&#x27;18&#x27;</span>, <span class="hljs-built_in">FLOOR</span>(RAND()<span class="hljs-operator">*</span>(<span class="hljs-number">999999999</span><span class="hljs-number">-100000000</span>)<span class="hljs-operator">+</span><span class="hljs-number">100000000</span>)),<span class="hljs-built_in">FLOOR</span>(RAND()<span class="hljs-operator">*</span><span class="hljs-number">2</span>),UUID(), <span class="hljs-built_in">FLOOR</span>(RAND()<span class="hljs-operator">*</span><span class="hljs-number">100</span>));<br>  <span class="hljs-keyword">SET</span> i <span class="hljs-operator">=</span> i <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">END</span> WHILE;<br><span class="hljs-keyword">RETURN</span> i;<br><span class="hljs-keyword">END</span>;<br><span class="hljs-keyword">SELECT</span> mock_data();<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> app_user <span class="hljs-keyword">WHERE</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;用户9999&#x27;</span>; <span class="hljs-comment">-- 无索引使用1s</span><br><br><span class="hljs-keyword">CREATE</span> INDEX idx_app_user_name <span class="hljs-keyword">ON</span> app_user(`name`);  <span class="hljs-comment">-- 插入索引</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> app_user <span class="hljs-keyword">WHERE</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;用户9999&#x27;</span>; <span class="hljs-comment">-- 插入索引后效率提高使用使用0.01s</span><br></code></pre></td></tr></table></figure><h2 id="索引准则："><a href="#索引准则：" class="headerlink" title="索引准则："></a>索引准则：</h2><ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表建议不要加索引</li><li>索引一般应加在查找条件的字段</li></ul><h2 id="索引的数据结构："><a href="#索引的数据结构：" class="headerlink" title="索引的数据结构："></a>索引的数据结构：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 我们可以在创建上述索引的时候，为其指定索引类型，分两类</span><br>hash类型的索引：查询单条快，范围查询慢<br>btree类型的索引：b<span class="hljs-operator">+</span>树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）<br><br><span class="hljs-comment">-- 不同的存储引擎支持的索引类型也不一样</span><br>InnoDB 支持事务，支持行级别锁定，支持 B<span class="hljs-operator">-</span>tree、<span class="hljs-keyword">Full</span><span class="hljs-operator">-</span>text 等索引，不支持 Hash 索引；<br>MyISAM 不支持事务，支持表级别锁定，支持 B<span class="hljs-operator">-</span>tree、<span class="hljs-keyword">Full</span><span class="hljs-operator">-</span>text 等索引，不支持 Hash 索引；<br>Memory 不支持事务，支持表级别锁定，支持 B<span class="hljs-operator">-</span>tree、Hash 等索引，不支持 <span class="hljs-keyword">Full</span><span class="hljs-operator">-</span>text 索引；<br>NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B<span class="hljs-operator">-</span>tree、<span class="hljs-keyword">Full</span><span class="hljs-operator">-</span>text 等索引；<br>Archive 不支持事务，支持表级别锁定，不支持 B<span class="hljs-operator">-</span>tree、Hash、<span class="hljs-keyword">Full</span><span class="hljs-operator">-</span>text 等索引；<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL中的SQL函数</title>
    <link href="/2020/05/30/MySQL%E4%B8%AD%E7%9A%84SQL%E5%87%BD%E6%95%B0/"/>
    <url>/2020/05/30/MySQL%E4%B8%AD%E7%9A%84SQL%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>这块……第二部分的聚合函数需要掌握，第一部分常用函数……类似于Java中的常用类，需要了解常用部分（不过也挺多的）。</p><span id="more"></span><h1 id="常用函数："><a href="#常用函数：" class="headerlink" title="常用函数："></a>常用函数：</h1><h2 id="数据函数："><a href="#数据函数：" class="headerlink" title="数据函数："></a>数据函数：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">ABS</span>(<span class="hljs-number">-8</span>);  <span class="hljs-comment">/*绝对值*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CEILING</span>(<span class="hljs-number">9.4</span>); <span class="hljs-comment">/*向上取整*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">9.4</span>);   <span class="hljs-comment">/*向下取整*/</span><br><span class="hljs-keyword">SELECT</span> RAND();  <span class="hljs-comment">/*随机数,返回一个0-1之间的随机数*/</span><br><span class="hljs-keyword">SELECT</span> SIGN(<span class="hljs-number">0</span>); <span class="hljs-comment">/*符号函数: 负数返回-1,正数返回1,0返回0*/</span><br></code></pre></td></tr></table></figure><h2 id="字符串函数："><a href="#字符串函数：" class="headerlink" title="字符串函数："></a>字符串函数：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CHAR_LENGTH</span>(<span class="hljs-string">&#x27;狂神说坚持就能成功&#x27;</span>); <span class="hljs-comment">/*返回字符串包含的字符数*/</span><br><span class="hljs-keyword">SELECT</span> CONCAT(<span class="hljs-string">&#x27;我&#x27;</span>,<span class="hljs-string">&#x27;爱&#x27;</span>,<span class="hljs-string">&#x27;程序&#x27;</span>);  <span class="hljs-comment">/*合并字符串,参数可以有多个*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INSERT</span>(<span class="hljs-string">&#x27;我爱编程helloworld&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;超级热爱&#x27;</span>);  <span class="hljs-comment">/*替换字符串,从某个位置开始替换某个长度*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">LOWER</span>(<span class="hljs-string">&#x27;KuangShen&#x27;</span>); <span class="hljs-comment">/*小写*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">UPPER</span>(<span class="hljs-string">&#x27;KuangShen&#x27;</span>); <span class="hljs-comment">/*大写*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">LEFT</span>(<span class="hljs-string">&#x27;hello,world&#x27;</span>,<span class="hljs-number">5</span>);   <span class="hljs-comment">/*从左边截取*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">RIGHT</span>(<span class="hljs-string">&#x27;hello,world&#x27;</span>,<span class="hljs-number">5</span>);  <span class="hljs-comment">/*从右边截取*/</span><br><span class="hljs-keyword">SELECT</span> REPLACE(<span class="hljs-string">&#x27;狂神说坚持就能成功&#x27;</span>,<span class="hljs-string">&#x27;坚持&#x27;</span>,<span class="hljs-string">&#x27;努力&#x27;</span>);  <span class="hljs-comment">/*替换字符串*/</span><br><span class="hljs-keyword">SELECT</span> SUBSTR(<span class="hljs-string">&#x27;狂神说坚持就能成功&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>); <span class="hljs-comment">/*截取字符串,开始和长度*/</span><br><span class="hljs-keyword">SELECT</span> REVERSE(<span class="hljs-string">&#x27;狂神说坚持就能成功&#x27;</span>); <span class="hljs-comment">/*反转</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">-- 查询姓周的同学,改成邹</span><br><span class="hljs-comment">SELECT REPLACE(studentname,&#x27;周&#x27;,&#x27;邹&#x27;) AS 新名字</span><br><span class="hljs-comment">FROM student WHERE studentname LIKE &#x27;周%&#x27;;</span><br></code></pre></td></tr></table></figure><h2 id="日期和时间函数："><a href="#日期和时间函数：" class="headerlink" title="日期和时间函数："></a>日期和时间函数：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CURRENT_DATE</span>();   <span class="hljs-comment">/*获取当前日期*/</span><br><span class="hljs-keyword">SELECT</span> CURDATE();   <span class="hljs-comment">/*获取当前日期*/</span><br><span class="hljs-keyword">SELECT</span> NOW();   <span class="hljs-comment">/*获取当前日期和时间*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">LOCALTIME</span>();   <span class="hljs-comment">/*获取当前日期和时间*/</span><br><span class="hljs-keyword">SELECT</span> SYSDATE();   <span class="hljs-comment">/*获取当前日期和时间*/</span><br><br><span class="hljs-comment">-- 获取年月日,时分秒</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MONTH</span>(NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DAY</span>(NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">HOUR</span>(NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MINUTE</span>(NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">SECOND</span>(NOW());<br></code></pre></td></tr></table></figure><h2 id="系统函数："><a href="#系统函数：" class="headerlink" title="系统函数："></a>系统函数：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> VERSION();  <span class="hljs-comment">/*版本*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">USER</span>();     <span class="hljs-comment">/*用户*/</span><br></code></pre></td></tr></table></figure><h1 id="聚合函数："><a href="#聚合函数：" class="headerlink" title="聚合函数："></a>聚合函数：</h1><table><thead><tr><th align="center">函数名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">count()</td><td align="center">返回满足select条件的记录总数，如select count（*）【不建议使用】</td></tr><tr><td align="center">sum()</td><td align="center">返回数字字段或表达式列作统计，返回一列的总和</td></tr><tr><td align="center">avg()</td><td align="center">返回数字字段或表达式列作统计，返回一列的平均值</td></tr><tr><td align="center">max()</td><td align="center">返回数字字段或表达式列作统计，返回一列的最大值</td></tr><tr><td align="center">min()</td><td align="center">返回数字字段或表达式列作统计，返回一列的最小值</td></tr></tbody></table><p>对count几种不同情况的说明和其他函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 聚合函数</span><br><span class="hljs-comment">/*COUNT:非空的*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(studentname) <span class="hljs-keyword">FROM</span> student;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> student;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">FROM</span> student;  <span class="hljs-comment">/*推荐*/</span><br><br><span class="hljs-comment">-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。</span><br><span class="hljs-comment">-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。</span><br><span class="hljs-comment">-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；</span><br><span class="hljs-comment">-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">下面它们之间的一些对比：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1）在表没有主键时，count(1)比count(*)快</span><br><span class="hljs-comment">2）有主键时，主键作为计算条件，count(主键)效率最高；</span><br><span class="hljs-comment">3）若表格只有一个字段，则count(*)效率较高。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(StudentResult) <span class="hljs-keyword">AS</span> 总和 <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(StudentResult) <span class="hljs-keyword">AS</span> 平均分 <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(StudentResult) <span class="hljs-keyword">AS</span> 最高分 <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(StudentResult) <span class="hljs-keyword">AS</span> 最低分 <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>;<br></code></pre></td></tr></table></figure><p>题目：</p><p>建议和DQL最后的having和group by配合起来看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询不同课程的平均分,最高分,最低分</span><br><span class="hljs-comment">-- 前提:根据不同的课程进行分组</span><br><br><span class="hljs-keyword">SELECT</span> subjectname,<span class="hljs-built_in">AVG</span>(studentresult) <span class="hljs-keyword">AS</span> 平均分,<span class="hljs-built_in">MAX</span>(StudentResult) <span class="hljs-keyword">AS</span> 最高分,<span class="hljs-built_in">MIN</span>(StudentResult) <span class="hljs-keyword">AS</span> 最低分<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">AS</span> r<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> s.subjectno<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> r.subjectno<br><span class="hljs-keyword">HAVING</span> 平均分<span class="hljs-operator">&gt;</span><span class="hljs-number">80</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">where写在group by前面.</span><br><span class="hljs-comment">要是放在分组后面的筛选</span><br><span class="hljs-comment">要使用HAVING..</span><br><span class="hljs-comment">因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h1><h2 id="MD5函数："><a href="#MD5函数：" class="headerlink" title="MD5函数："></a>MD5函数：</h2><p>这个函数用于加密，在数据库存储密码使用。</p><p>举例：</p><p>新建一个表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `TESTMD5`(<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `pwd` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>)<br></code></pre></td></tr></table></figure><p>在表中插入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `TESTMD5`(`id`,`name`,`pwd`) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;GRZ&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这个时候，我们的插入的密码是明文。</p><p>我们对密码只用MD5函数进行加密：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE `TESTMD5` <span class="hljs-keyword">SET</span> `pwd`<span class="hljs-operator">=</span> MD5(`pwd`)<br></code></pre></td></tr></table></figure><p>同样的，我们也可以使用where子句对指定行进行加密：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 对id是1的用户进行MD5加密</span><br>UPDATE `TESTMD5` <span class="hljs-keyword">SET</span> `pwd`<span class="hljs-operator">=</span> MD5(`pwd`)<br><span class="hljs-keyword">where</span> `id` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ================ 内置函数 ================</span><br><span class="hljs-comment">-- 数值函数</span><br><span class="hljs-built_in">abs</span>(x)            <span class="hljs-comment">-- 绝对值 abs(-10.9) = 10</span><br>format(x, d)    <span class="hljs-comment">-- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span><br><span class="hljs-built_in">ceil</span>(x)            <span class="hljs-comment">-- 向上取整 ceil(10.1) = 11</span><br><span class="hljs-built_in">floor</span>(x)        <span class="hljs-comment">-- 向下取整 floor (10.1) = 10</span><br>round(x)        <span class="hljs-comment">-- 四舍五入去整</span><br><span class="hljs-built_in">mod</span>(m, n)        <span class="hljs-comment">-- m%n m mod n 求余 10%3=1</span><br>pi()            <span class="hljs-comment">-- 获得圆周率</span><br>pow(m, n)        <span class="hljs-comment">-- m^n</span><br><span class="hljs-built_in">sqrt</span>(x)            <span class="hljs-comment">-- 算术平方根</span><br>rand()            <span class="hljs-comment">-- 随机数</span><br><span class="hljs-keyword">truncate</span>(x, d)    <span class="hljs-comment">-- 截取d位小数</span><br><br><span class="hljs-comment">-- 时间日期函数</span><br>now(), <span class="hljs-built_in">current_timestamp</span>();     <span class="hljs-comment">-- 当前日期时间</span><br><span class="hljs-built_in">current_date</span>();                    <span class="hljs-comment">-- 当前日期</span><br><span class="hljs-built_in">current_time</span>();                    <span class="hljs-comment">-- 当前时间</span><br><span class="hljs-type">date</span>(<span class="hljs-string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>);    <span class="hljs-comment">-- 获取日期部分</span><br><span class="hljs-type">time</span>(<span class="hljs-string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>);    <span class="hljs-comment">-- 获取时间部分</span><br>date_format(<span class="hljs-string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>, <span class="hljs-string">&#x27;%d %y %a %d %m %b %j&#x27;</span>);    <span class="hljs-comment">-- 格式化时间</span><br>unix_timestamp();                <span class="hljs-comment">-- 获得unix时间戳</span><br>from_unixtime();                <span class="hljs-comment">-- 从时间戳获得时间</span><br><br><span class="hljs-comment">-- 字符串函数</span><br>length(string)            <span class="hljs-comment">-- string长度，字节</span><br><span class="hljs-keyword">char_length</span>(string)        <span class="hljs-comment">-- string的字符个数</span><br><span class="hljs-built_in">substring</span>(str, position [,length])        <span class="hljs-comment">-- 从str的position开始,取length个字符</span><br>replace(str ,search_str ,replace_str)    <span class="hljs-comment">-- 在str中用replace_str替换search_str</span><br>instr(string ,substring)    <span class="hljs-comment">-- 返回substring首次在string中出现的位置</span><br>concat(string [,...])    <span class="hljs-comment">-- 连接字串</span><br>charset(str)            <span class="hljs-comment">-- 返回字串字符集</span><br>lcase(string)            <span class="hljs-comment">-- 转换成小写</span><br><span class="hljs-keyword">left</span>(string, length)    <span class="hljs-comment">-- 从string2中的左边起取length个字符</span><br>load_file(file_name)    <span class="hljs-comment">-- 从文件读取内容</span><br>locate(substring, string [,start_position])    <span class="hljs-comment">-- 同instr,但可指定开始位置</span><br>lpad(string, length, pad)    <span class="hljs-comment">-- 重复用pad加在string开头,直到字串长度为length</span><br>ltrim(string)            <span class="hljs-comment">-- 去除前端空格</span><br>repeat(string, count)    <span class="hljs-comment">-- 重复count次</span><br>rpad(string, length, pad)    <span class="hljs-comment">--在str后用pad补充,直到长度为length</span><br>rtrim(string)            <span class="hljs-comment">-- 去除后端空格</span><br>strcmp(string1 ,string2)    <span class="hljs-comment">-- 逐字符比较两字串大小</span><br><br><span class="hljs-comment">-- 聚合函数</span><br><span class="hljs-built_in">count</span>()<br><span class="hljs-built_in">sum</span>();<br><span class="hljs-built_in">max</span>();<br><span class="hljs-built_in">min</span>();<br><span class="hljs-built_in">avg</span>();<br>group_concat()<br><br><span class="hljs-comment">-- 其他常用函数</span><br>md5();<br><span class="hljs-keyword">default</span>();<br></code></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL中的DQL</title>
    <link href="/2020/05/26/MySQL%E4%B8%AD%E7%9A%84DQL/"/>
    <url>/2020/05/26/MySQL%E4%B8%AD%E7%9A%84DQL/</url>
    
    <content type="html"><![CDATA[<p>在MySQL中，大部分时候，我们其实都是用DQL进行查询操作。所以这部分可以说是MySQL重点。需要全部记下来。</p><p>重难点在联表查询的join SQL语句。</p><span id="more"></span><h1 id="DQL语句："><a href="#DQL语句：" class="headerlink" title="DQL语句："></a>DQL语句：</h1><p>即查询操作。</p><h2 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `需要查询的列名称` <span class="hljs-keyword">from</span> `对应的表`;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-symbol">`studentname`</span> <span class="hljs-keyword">FROM</span> <span class="hljs-symbol">`student`</span>;<br></code></pre></td></tr></table></figure><h2 id="扩充语法："><a href="#扩充语法：" class="headerlink" title="扩充语法："></a>扩充语法：</h2><h3 id="as关键字："><a href="#as关键字：" class="headerlink" title="as关键字："></a>as关键字：</h3><p>使用as对指定查询列名称进行替换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `需要查询的列名称` <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;指定名称&#x27;</span> <span class="hljs-keyword">from</span> `对应的表`;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `studentname` <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;学生姓名&#x27;</span> <span class="hljs-keyword">FROM</span> `student`;<br></code></pre></td></tr></table></figure><h3 id="concat关键字："><a href="#concat关键字：" class="headerlink" title="concat关键字："></a>concat关键字：</h3><p>使用concat进行拼接操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> concat (<span class="hljs-string">&#x27;拼接字符&#x27;</span>,`查询的列名称`) <span class="hljs-keyword">from</span> `对应的表`<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用concat函数进行拼接</span><br><span class="hljs-keyword">SELECT</span> CONCAT (<span class="hljs-string">&#x27;姓名：&#x27;</span>,`studentname`) <span class="hljs-keyword">FROM</span> `student`;<br></code></pre></td></tr></table></figure><h3 id="distinct关键字："><a href="#distinct关键字：" class="headerlink" title="distinct关键字："></a>distinct关键字：</h3><p>使用distinct进行去重操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> `查询的列名称` <span class="hljs-keyword">from</span> `对应的表`<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> `gradeid` <span class="hljs-keyword">FROM</span> `student`;<br></code></pre></td></tr></table></figure><p>其他：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询版本的函数</span><br><span class="hljs-keyword">SELECT</span> VERSION();<br><span class="hljs-comment">-- 查询步长</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@auto</span>_increment_increment;<br></code></pre></td></tr></table></figure><h2 id="where子句："><a href="#where子句：" class="headerlink" title="where子句："></a>where子句：</h2><h3 id="逻辑运算符："><a href="#逻辑运算符：" class="headerlink" title="逻辑运算符："></a>逻辑运算符：</h3><table><thead><tr><th align="center">操作符名称</th><th align="center">语法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">AND或&amp;&amp;</td><td align="center">a  AND  b或a &amp;&amp; b</td><td align="center">逻辑与</td></tr><tr><td align="center">OR或||</td><td align="center">a OR b或a || b</td><td align="center">逻辑或</td></tr><tr><td align="center">NOT或！</td><td align="center">a 或!a</td><td align="center">逻辑非</td></tr></tbody></table><p>这块个人觉得没啥好说的，类似Java中的逻辑运算符……</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 满足条件的查询(where)</span><br><span class="hljs-keyword">SELECT</span> Studentno,StudentResult <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>;<br><br><span class="hljs-comment">-- 查询考试成绩在95-100之间的</span><br><span class="hljs-keyword">SELECT</span> Studentno,StudentResult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> StudentResult<span class="hljs-operator">&gt;=</span><span class="hljs-number">95</span> <span class="hljs-keyword">AND</span> StudentResult<span class="hljs-operator">&lt;=</span><span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- AND也可以写成 &amp;&amp;</span><br><span class="hljs-keyword">SELECT</span> Studentno,StudentResult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> StudentResult<span class="hljs-operator">&gt;=</span><span class="hljs-number">95</span> <span class="hljs-operator">&amp;&amp;</span> StudentResult<span class="hljs-operator">&lt;=</span><span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 模糊查询(对应的词:精确查询)</span><br><span class="hljs-keyword">SELECT</span> Studentno,StudentResult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> StudentResult <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">95</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 除了1000号同学,要其他同学的成绩</span><br><span class="hljs-keyword">SELECT</span> studentno,studentresult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> studentno<span class="hljs-operator">!=</span><span class="hljs-number">1000</span>;<br><br><span class="hljs-comment">-- 使用NOT</span><br><span class="hljs-keyword">SELECT</span> studentno,studentresult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> studentno<span class="hljs-operator">=</span><span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><h3 id="模糊查询："><a href="#模糊查询：" class="headerlink" title="模糊查询："></a>模糊查询：</h3><table><thead><tr><th align="center">操作符名称</th><th align="center">语法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IS NULL</td><td align="center">a IS NULL</td><td align="center">若操作符为NULL，结果为真</td></tr><tr><td align="center">IS NOT NULL</td><td align="center">a IS NOT NULL</td><td align="center">若操作符不为NULL，结果为真</td></tr><tr><td align="center">BETWEEN</td><td align="center">a BETWEEN b AND c</td><td align="center">若a范围在b和c之间，则结果为真</td></tr><tr><td align="center">LIKE</td><td align="center">a LIKE b</td><td align="center">SQL模式匹配，若a匹配b，则结果为真</td></tr><tr><td align="center">IN</td><td align="center">a IN (a1,a2,a3)</td><td align="center">若a等于a1,a2,a3……中的某一个，则结果为真</td></tr></tbody></table><p>注意：</p><ul><li>数值数据类型的记录之间才能进行算术运算 ;</li><li>相同数据类型的数据之间才能进行比较 ;</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 模糊查询 between and \ like \ in \ null</span><br><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- LIKE</span><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- 查询姓刘的同学的学号及姓名</span><br><span class="hljs-comment">-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘%&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓刘的同学,后面只有一个字的</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘_&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓刘的同学,后面只有两个字的</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘__&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓名中含有 嘉 字的</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%嘉%&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓名中含有特殊字符的需要使用转义符号 &#x27;\&#x27;</span><br><span class="hljs-comment">-- 自定义转义符关键字: ESCAPE &#x27;:&#x27;</span><br><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- IN</span><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- 查询学号为1000,1001,1002的学生姓名</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentno <span class="hljs-keyword">IN</span> (<span class="hljs-number">1000</span>,<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>);<br><br><span class="hljs-comment">-- 查询地址在北京,南京,河南洛阳的学生</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname,address <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> address <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;南京&#x27;</span>,<span class="hljs-string">&#x27;河南洛阳&#x27;</span>);<br><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- NULL 空</span><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- 查询出生日期没有填写的同学</span><br><span class="hljs-comment">-- 不能直接写=NULL , 这是代表错误的 , 用 is null</span><br><span class="hljs-keyword">SELECT</span> studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> BornDate <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-comment">-- 查询出生日期填写的同学</span><br><span class="hljs-keyword">SELECT</span> studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> BornDate <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-comment">-- 查询没有写家庭住址的同学(空字符串不等于null)</span><br><span class="hljs-keyword">SELECT</span> studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> Address<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">OR</span> Address <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h2 id="联表查询-join子句："><a href="#联表查询-join子句：" class="headerlink" title="联表查询 join子句："></a>联表查询 join子句：</h2><p>联表查询一共有七种情况，但是一般来说，我们只使用三种，其他四种需要进行特殊筛选。</p><table><thead><tr><th align="center">操作符名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">inner join……on</td><td align="center">如果表中有至少一个匹配，则返回行</td></tr><tr><td align="center">right join……on</td><td align="center">即使右表没有匹配，也要从左表中返回所有行</td></tr><tr><td align="center">left join……on</td><td align="center">即使左表没有匹配，也要从右表中返回所有行</td></tr></tbody></table><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">连接查询</span><br><span class="hljs-comment">   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询</span><br><span class="hljs-comment">内连接 inner join</span><br><span class="hljs-comment">   查询两个表中的结果集中的交集</span><br><span class="hljs-comment">外连接 outer join</span><br><span class="hljs-comment">   左外连接 left join</span><br><span class="hljs-comment">       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)</span><br><span class="hljs-comment">   右外连接 right join</span><br><span class="hljs-comment">       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">等值连接和非等值连接</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">自连接</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>;<br><br><span class="hljs-comment">/*思路:</span><br><span class="hljs-comment">(1):分析需求,确定查询的列来源于两个类,student result,连接查询</span><br><span class="hljs-comment">(2):确定使用哪种连接查询?(内连接)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><br><span class="hljs-comment">-- 右连接(也可实现)</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><br><span class="hljs-comment">-- 等值连接</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult<br><span class="hljs-keyword">FROM</span> student s , <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">WHERE</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><br><span class="hljs-comment">-- 左连接 (查询了所有同学,不考试的也会查出来)</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><br><span class="hljs-comment">-- 查一下缺考的同学(左连接应用场景)</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">WHERE</span> StudentResult <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><br><span class="hljs-comment">-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> sub.subjectno <span class="hljs-operator">=</span> r.subjectno<br></code></pre></td></tr></table></figure><h2 id="order-by和limit子句："><a href="#order-by和limit子句：" class="headerlink" title="order by和limit子句："></a>order by和limit子句：</h2><p>这两个并不难……</p><p>order by是属于排序用。</p><h3 id="order-by关键字："><a href="#order-by关键字：" class="headerlink" title="order by关键字："></a>order by关键字：</h3><table><thead><tr><th align="center">order by关键字</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ASC</td><td align="center">升序</td></tr><tr><td align="center">DESC</td><td align="center">降序</td></tr></tbody></table><h3 id="limit用法："><a href="#limit用法：" class="headerlink" title="limit用法："></a>limit用法：</h3><p>limit一般拿来分页使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">limit 开始的数值，结束的数值<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*============== 排序 ================</span><br><span class="hljs-comment">语法 : ORDER BY</span><br><span class="hljs-comment">   ORDER BY 语句用于根据指定的列对结果集进行排序。</span><br><span class="hljs-comment">   ORDER BY 语句默认按照ASC升序对记录进行排序。</span><br><span class="hljs-comment">   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span><br><span class="hljs-comment">-- 按成绩降序排序</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> sub.subjectno<br><span class="hljs-keyword">WHERE</span> subjectname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库结构-1&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> StudentResult <span class="hljs-keyword">DESC</span><br><br><span class="hljs-comment">/*============== 分页 ================</span><br><span class="hljs-comment">语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset</span><br><span class="hljs-comment">好处 : (用户体验,网络传输,查询压力)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">推导:</span><br><span class="hljs-comment">   第一页 : limit 0,5</span><br><span class="hljs-comment">   第二页 : limit 5,5</span><br><span class="hljs-comment">   第三页 : limit 10,5</span><br><span class="hljs-comment">   ......</span><br><span class="hljs-comment">   第N页 : limit (pageNo-1)*pageSzie,pageSzie</span><br><span class="hljs-comment">   [pageNo:页码,pageSize:单页面显示条数]</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 每页显示5条数据</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> sub.subjectno<br><span class="hljs-keyword">WHERE</span> subjectname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库结构-1&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> StudentResult <span class="hljs-keyword">DESC</span> , studentno<br>LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">5</span><br><br><span class="hljs-comment">-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> sub.subjectno<br><span class="hljs-keyword">WHERE</span> subjectname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;JAVA第一学年&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> StudentResult <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="group-by和having子句："><a href="#group-by和having子句：" class="headerlink" title="group by和having子句："></a>group by和having子句：</h2><p>这个建议结合下一章的SQL函数的聚合函数看……</p><p>group by子句是使用某个行名进行分组：</p><p>having子句和where基本一样，但是where只能指定单条筛选对象，having可以使用多条筛选对象。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询不同课程的平均分,最高分,最低分</span><br><span class="hljs-comment">-- 前提:根据不同的课程进行分组</span><br><br><span class="hljs-keyword">SELECT</span> subjectname,<span class="hljs-built_in">AVG</span>(studentresult) <span class="hljs-keyword">AS</span> 平均分,<span class="hljs-built_in">MAX</span>(StudentResult) <span class="hljs-keyword">AS</span> 最高分,<span class="hljs-built_in">MIN</span>(StudentResult) <span class="hljs-keyword">AS</span> 最低分<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">AS</span> r<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> s.subjectno<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> r.subjectno<br><span class="hljs-keyword">HAVING</span> 平均分<span class="hljs-operator">&gt;</span><span class="hljs-number">80</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">where写在group by前面.</span><br><span class="hljs-comment">要是放在分组后面的筛选</span><br><span class="hljs-comment">要使用HAVING..</span><br><span class="hljs-comment">因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL中的物理外键和DML</title>
    <link href="/2020/05/26/MySQL%E4%B8%AD%E7%9A%84%E7%89%A9%E7%90%86%E5%A4%96%E9%94%AE%E5%92%8CDML/"/>
    <url>/2020/05/26/MySQL%E4%B8%AD%E7%9A%84%E7%89%A9%E7%90%86%E5%A4%96%E9%94%AE%E5%92%8CDML/</url>
    
    <content type="html"><![CDATA[<p>在MySQL中，物理外键一般不定义，我们一般在Java代码中写。</p><p>至于DML语句，需要全部背下来。</p><span id="more"></span><h1 id="MySQL中表中的外键："><a href="#MySQL中表中的外键：" class="headerlink" title="MySQL中表中的外键："></a>MySQL中表中的外键：</h1><p>这个只做了解……物理外键设置起来后期难修改。</p><p>在创建表时建外键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 年级表 (id\年级名称)</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `grade` (<br>`gradeid` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;年级ID&#x27;</span>,<br>`gradename` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;年级名称&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`gradeid`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-comment">-- 学生信息表 (学号,姓名,性别,年级,手机,地址,出生日期,邮箱,身份证号)</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student` (<br>`studentno` <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;学号&#x27;</span>,<br>`studentname` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;匿名&#x27;</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>`sex` TINYINT(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;1&#x27;</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>`gradeid` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;年级&#x27;</span>,<br>`phoneNum` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;手机&#x27;</span>,<br>`address` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;地址&#x27;</span>,<br>`borndate` DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;生日&#x27;</span>,<br>`email` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>`idCard` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">18</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;身份证号&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`studentno`),<br>KEY `FK_gradeid` (`gradeid`),<br><span class="hljs-keyword">CONSTRAINT</span> `FK_gradeid` <span class="hljs-keyword">FOREIGN</span> KEY (`gradeid`) <span class="hljs-keyword">REFERENCES</span> `grade` (`gradeid`)   <span class="hljs-comment">-- 外键创建</span><br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><p>或者先建表，再增加外键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `student`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> `FK_gradeid` <span class="hljs-keyword">FOREIGN</span> KEY (`gradeid`) <span class="hljs-keyword">REFERENCES</span> `grade` (`gradeid`);<br></code></pre></td></tr></table></figure><h1 id="MySQL中的DML"><a href="#MySQL中的DML" class="headerlink" title="MySQL中的DML"></a>MySQL中的DML</h1><h2 id="添加：insert"><a href="#添加：insert" class="headerlink" title="添加：insert"></a>添加：insert</h2><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `表名` (`列对应的名称<span class="hljs-number">1</span>`,`列对应的名称<span class="hljs-number">2</span>`,`列对应的名称<span class="hljs-number">3</span>`,……) <span class="hljs-keyword">values</span> (`值<span class="hljs-number">1</span>`,`值<span class="hljs-number">2</span>`,`值<span class="hljs-number">3</span>`,……) ;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `grade`(`gradename`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;大一&#x27;</span>),(<span class="hljs-string">&#x27;大二&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注意事项：</p><p>列对应名称和值要一一对应</p><h2 id="修改：update"><a href="#修改：update" class="headerlink" title="修改：update"></a>修改：update</h2><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">update `表名` <span class="hljs-keyword">set</span> `列对应名称`<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;原来的值 [,`列对应名称`= &#x27;</span>原来的值<span class="hljs-string">&#x27;,...] [WHERE `列对应名称`= &#x27;</span>原来的值<span class="hljs-string">&#x27;];</span><br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE `student` <span class="hljs-keyword">SET</span> `studentname`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;GRZ&#x27;</span> <span class="hljs-keyword">WHERE</span> `studentname` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span><br></code></pre></td></tr></table></figure><p>注意事项：</p><p>where中可以包含多个筛选条件，用逗号隔开</p><h2 id="删除：delete和truncate"><a href="#删除：delete和truncate" class="headerlink" title="删除：delete和truncate"></a>删除：delete和truncate</h2><p>语法：</p><p>delete:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> `列对应名称`<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;原来的值&#x27;</span>];<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `student` <span class="hljs-keyword">WHERE</span> `studentno`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><p>truncate:</p><p>这个颇有删库那味……</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">truncate</span> [<span class="hljs-keyword">table</span>] 表名;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> `student`<br></code></pre></td></tr></table></figure><h3 id="delete和truncate的区别："><a href="#delete和truncate的区别：" class="headerlink" title="delete和truncate的区别："></a>delete和truncate的区别：</h3><ul><li><p>相同 : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</p></li><li><p>不同 :</p></li><li><ul><li>使用TRUNCATE TABLE 重新设置AUTO_INCREMENT（自增）计数器</li><li>使用TRUNCATE TABLE不会对事务有影响 </li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL的基本数据库操作</title>
    <link href="/2020/05/23/MySQL%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/05/23/MySQL%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>严格来说，本来应该先看数据库的，但是这学期学的是Web后端，就略过了，导致后端那边JDBC无法操作，还是得回来看数据库。</p><p>但是数据库这边个人觉得有点麻烦，环境有可视化图形界面，但是在Linux部署还是得在命令行敲。有点难办。</p><span id="more"></span><p>全程使用数据库MYSQL5.7版本，可视化使用SQLyog。</p><h1 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h1><h2 id="创建一个数据库："><a href="#创建一个数据库：" class="headerlink" title="创建一个数据库："></a>创建一个数据库：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> databases [if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>] 数据库名;   <span class="hljs-comment">-- if not exists为判断语句</span><br></code></pre></td></tr></table></figure><h2 id="删除一个数据库："><a href="#删除一个数据库：" class="headerlink" title="删除一个数据库："></a>删除一个数据库：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> databases [if <span class="hljs-keyword">exists</span>] 数据库名; <span class="hljs-comment">--if exists为判断语句</span><br></code></pre></td></tr></table></figure><h2 id="查看系统中数据库"><a href="#查看系统中数据库" class="headerlink" title="查看系统中数据库:"></a>查看系统中数据库:</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure><h2 id="使用某个数据库："><a href="#使用某个数据库：" class="headerlink" title="使用某个数据库："></a>使用某个数据库：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">use 数据库名<br></code></pre></td></tr></table></figure><h2 id="刷新数据库："><a href="#刷新数据库：" class="headerlink" title="刷新数据库："></a>刷新数据库：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">flush privileges; <br></code></pre></td></tr></table></figure><hr><p>在创建表之前，搞懂下面这些概念：</p><h1 id="数据值和列的数据类型："><a href="#数据值和列的数据类型：" class="headerlink" title="数据值和列的数据类型："></a>数据值和列的数据类型：</h1><ul><li><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2></li></ul><table><thead><tr><th align="center">类型</th><th align="center">说明</th><th align="center">储存需求</th></tr></thead><tbody><tr><td align="center">tinyint</td><td align="center">非常小的数据</td><td align="center">1字节</td></tr><tr><td align="center">smallint</td><td align="center">较小的数据</td><td align="center">2字节</td></tr><tr><td align="center">mediumint</td><td align="center">中等大小的数据</td><td align="center">3字节</td></tr><tr><td align="center">int</td><td align="center">标准数据</td><td align="center">4字节</td></tr><tr><td align="center">bigint</td><td align="center">较大的整数</td><td align="center">8字节</td></tr><tr><td align="center">float</td><td align="center">单精度浮点数</td><td align="center">4字节</td></tr><tr><td align="center">double</td><td align="center">双精度浮点数</td><td align="center">8字节</td></tr><tr><td align="center">decimal</td><td align="center">字符串形式的浮点数</td><td align="center">9个字节</td></tr></tbody></table><ul><li><h2 id="字符串类型："><a href="#字符串类型：" class="headerlink" title="字符串类型："></a>字符串类型：</h2></li></ul><table><thead><tr><th align="center">类型</th><th align="center">说明</th><th align="center">最大长度</th></tr></thead><tbody><tr><td align="center">char[(M)]</td><td align="center">固定长字符串，快但是浪费空间。0&lt;M&lt;255</td><td align="center">M字符</td></tr><tr><td align="center">varchar[(M)]</td><td align="center">可变字符串。0&lt;=M&lt;=65535</td><td align="center">可变长度</td></tr><tr><td align="center">tinytext</td><td align="center">微型文本串</td><td align="center">2^8-1</td></tr><tr><td align="center">text</td><td align="center">文本串</td><td align="center">2^16-1</td></tr></tbody></table><ul><li><h2 id="日期和时间数值类型："><a href="#日期和时间数值类型：" class="headerlink" title="日期和时间数值类型："></a>日期和时间数值类型：</h2></li></ul><table><thead><tr><th align="center">类型</th><th align="center">说明</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">DATE</td><td align="center">YYYY-MM-DD，日期格式</td><td align="center">1000-01-01~9999-12-31</td></tr><tr><td align="center">TIME</td><td align="center">Hh:mm:ss，时间格式</td><td align="center">-838：59：59~838：59：59</td></tr><tr><td align="center">DATATIME</td><td align="center">YY-MM-DD hh:mm:ss</td><td align="center">1000-01-01 00:00:00至9999-12-31 23：59：59</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">YYYYMMDDhhmmss表示的时间戳</td><td align="center">1970010101000000~2037年某个时刻</td></tr><tr><td align="center">YEAR</td><td align="center">YYYY格式的年份值</td><td align="center">1901~2155</td></tr></tbody></table><ul><li><h2 id="NULL值："><a href="#NULL值：" class="headerlink" title="NULL值："></a>NULL值：</h2></li><li><p>理解为 “没有值” 或 “未知值”</p></li><li><p>不要用NULL进行算术运算 , 结果仍为NULL</p></li></ul><h1 id="数据字段属性："><a href="#数据字段属性：" class="headerlink" title="数据字段属性："></a>数据字段属性：</h1><p><strong>UnSigned</strong></p><ul><li>无符号的</li><li>声明该数据列不允许负数 .</li></ul><p><strong>ZEROFILL</strong></p><ul><li>0填充的</li><li>不足位数的用0来填充 , 如int(3),5则为005</li></ul><p><strong>Auto_InCrement</strong></p><ul><li><p>自动增长的 , 每添加一条数据 , 自动在上一个记录数上加 1(默认)</p></li><li><p>通常用于设置<strong>主键</strong> , 且为整数类型</p></li><li><p>可定义起始值和步长</p></li><li><ul><li>当前表设置步长(AUTO_INCREMENT=100) : 只影响当前表</li><li>SET @@auto_increment_increment=5 ; 影响所有使用自增的表(全局)</li></ul></li></ul><p><strong>NULL 和 NOT NULL</strong></p><ul><li>默认为NULL , 即没有插入该列的数值</li><li>如果设置为NOT NULL , 则该列必须有值</li></ul><p><strong>DEFAULT</strong></p><ul><li>默认的</li><li>用于设置默认值</li><li>例如,性别字段,默认为”男” , 否则为 “女” ; 若无指定该列的值 , 则默认值为”男”的值</li></ul><h1 id="数据库引擎："><a href="#数据库引擎：" class="headerlink" title="数据库引擎："></a>数据库引擎：</h1><p>MySQL的数据表的类型 : <strong>MyISAM</strong> , <strong>InnoDB</strong> , HEAP , BOB , CSV等…</p><p>大部分时候使用MyISAM和InnoDB。</p><table><thead><tr><th align="center">名称</th><th align="center">MyISAM</th><th align="center">InnoDB</th></tr></thead><tbody><tr><td align="center">事务处理</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">数据行锁定</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">外键约束</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">全文索引</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">表空间大小</td><td align="center">较小</td><td align="center">较大，约2倍</td></tr></tbody></table><p>接下来就是对数据库中的表的操作：</p><h1 id="在数据库中对表的创建："><a href="#在数据库中对表的创建：" class="headerlink" title="在数据库中对表的创建："></a>在数据库中对表的创建：</h1><p>使用create关键字：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> [if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>] `表名`(<br>`参数名` 列的数据类型(长度)   <span class="hljs-keyword">null</span>或<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>   auto_increment  comment `备注`,<br>`参数名` 列的数据类型(长度)   <span class="hljs-keyword">null</span>或<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>  <span class="hljs-keyword">default</span><span class="hljs-string">&#x27;默认值&#x27;</span>  comment `备注`,<br><br><span class="hljs-keyword">primary</span> key (`参数名`)<br>) engine <span class="hljs-operator">=</span> 数据库引擎 <span class="hljs-keyword">default</span> charset <span class="hljs-operator">=</span> 字符编码<br></code></pre></td></tr></table></figure><p><strong>注意：自增auto_increment和default’默认值’不可以同时选中。``反引号用于区别MySQL保留字与普通字符而引入的 (键盘esc下面的键)。</strong></p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `teacher`(<br>`name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;佚名&#x27;</span> COMMENT <span class="hljs-string">&#x27;老师姓名&#x27;</span>,<br>`id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;工号&#x27;</span>,<br>`password` <span class="hljs-type">INT</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;123456&#x27;</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>)ENGINE INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-comment">-- 设置引擎和字符集</span><br></code></pre></td></tr></table></figure><p>但是一般我们使用可视化界面创建，再通过以下语句读出创建时自动生成的语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看数据库的定义</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> DATABASE school;<br><span class="hljs-comment">-- 查看数据表的定义</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student;<br><span class="hljs-comment">-- 显示表结构</span><br><span class="hljs-keyword">DESC</span> student;  <span class="hljs-comment">-- 设置严格检查模式(不能容错了)SET sql_mode=&#x27;STRICT_TRANS_TABLES&#x27;;</span><br></code></pre></td></tr></table></figure><h1 id="数据库中对表的修改："><a href="#数据库中对表的修改：" class="headerlink" title="数据库中对表的修改："></a>数据库中对表的修改：</h1><p>使用Alter关键字：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">修改表名 :<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 旧表名 RENAME <span class="hljs-keyword">AS</span> 新表名<br><br>添加字段 : <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span>字段名 列属性[属性]<br><br>修改字段 :<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 字段名 列类型[属性]<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 列属性[属性]<br><br>删除字段 :  <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> 字段名<br></code></pre></td></tr></table></figure><h1 id="数据库中的对表的删除："><a href="#数据库中的对表的删除：" class="headerlink" title="数据库中的对表的删除："></a>数据库中的对表的删除：</h1><p>使用drop关键字：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] 表名<br><br>IF <span class="hljs-keyword">EXISTS</span>为可选 , 判断是否存在该数据表<br><br>如删除不存在的数据表会抛出错误<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb总结</title>
    <link href="/2020/05/21/JavaWeb%E6%80%BB%E7%BB%93/"/>
    <url>/2020/05/21/JavaWeb%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>   JavaWeb中，我们有这几个部分:Maven，Tomcat，Http，Servlet，HttpRequest，HttpResponce，ServletContext，Cookie，Session(重点)，JSP基础语法，JSTL语法，EL表达式，JSP九大对象中的四个重点对象作用域，Filter过滤器(重点)。</p><span id="more"></span><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven:"></a>Maven:</h1><p>JavaWeb中，Maven可以理解成是一个管理项目需要的依赖的项目管理软件。使用需要配置环境变量。</p><p>同样的，在使用需要的依赖时候，需要在网络上的Maven仓库寻找合适的api版本导入并刷新并使用。</p><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat:"></a>Tomcat:</h1><p>和Maven一样，在JavaWeb中，Tomcat充当的是一个服务器。在IDEA中，Tomcat配置很简单，不再赘述。</p><h1 id="Http"><a href="#Http" class="headerlink" title="Http:"></a>Http:</h1><p>超文本传输协议，分为1.0代和1.1代，一般来说现在大部分都使用SSH证书对其进行加密处理为Https。</p><p>在网站响应时候点击Network可以对其进行抓包。抓包内容显示头文件一般会分为<strong>Request</strong>和<strong>Response</strong>。</p><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet:"></a>Servlet:</h1><p>Servlet属于JavaWeb中的核心块，即服务器程序。在Java中使用Servlet中的类，我们需要继承并且重写抽象类HttpServlet中的doGet和doPost方法。因为这两个方法返回值一样，所以我们可以将doPost方法中的语句改为调用doGet方法。在doGet中写逻辑控制语句。</p><p>写完之后，我们同时也需要在Web.xml中注册Servlet跳转到的路径和Java类。</p><h1 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext:"></a>ServletContext:</h1><p>这个是在Request和Respose之外的一个对象。我们可以通过Context进行请求转发和储存数据，以及跨Servlet共享数据。</p><h2 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据:"></a>共享数据:</h2><p>在第一个Servlet中使用getContext()方法和setAttribute()方法将数据储存进Context中，再使用另一个Servlet中的getContext()方法和getAttribute()方法将数据取出来。</p><p>setAttribute():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.servlet.ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br>String username = <span class="hljs-string">&quot;GRZ&quot;</span>;<br>context.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);<br></code></pre></td></tr></table></figure><p>getAttribute():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java">ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>String username = (String) servletContext.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br><br><span class="hljs-comment">//使用resp设定响应格式</span><br>resp.setContentType(<span class="hljs-string">&quot;text.html&quot;</span>);<br>resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>resp.getWriter().print(<span class="hljs-string">&quot;名字&quot;</span>+username);<br></code></pre></td></tr></table></figure><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发:"></a>请求转发:</h2><p>使用getRequestDispatcher()将本Servlet的请求通过Context转发给另一个Servlet，同样的，需要指明跳转路径。</p><p>getRequestDispatcher()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br><span class="hljs-comment">//将RequestForwarding这个类创建的路径/rf转给/get</span><br>RequestDispatcher requestDispatcher = context.getRequestDispatcher(<span class="hljs-string">&quot;/get&quot;</span>);<br><span class="hljs-comment">//通过req,resp来接收</span><br>requestDispatcher.forward(req,resp);<br></code></pre></td></tr></table></figure><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据:"></a>读取数据:</h2><p>getResourceAsStream()方法，在括号中填写需要读取的文件的路径，并且创建一个流对象。</p><p>getResourceAsStream():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java">ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br><span class="hljs-comment">//读取配置文件properties的路径，在target目录下</span><br>InputStream resourceAsStream = context.getResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/db.properties&quot;</span>);<br><br><span class="hljs-comment">//使用Properties方法</span><br>Properties prop = <span class="hljs-keyword">new</span> Properties();<br>prop.load(resourceAsStream);<br>String name = prop.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>String pwd = prop.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><br><span class="hljs-comment">//输出打印</span><br>resp.getWriter().print(name+<span class="hljs-string">&quot;:&quot;</span>+pwd);<br></code></pre></td></tr></table></figure><h1 id="HttpRequest"><a href="#HttpRequest" class="headerlink" title="HttpRequest:"></a>HttpRequest:</h1><p>请求。</p><p>在Request中，我们也可以实现类似Context中的请求转发的功能。使用getRequestDispatcher()方法。</p><p>getParameter()，.getParameterValues()，getRequestDispatcher()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过req.getParameter()和req.getParameterValues()方法来获取参数，getParameterValues()用来获取多个参数。</span><br>String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>String[] hobbies = req.getParameterValues(<span class="hljs-string">&quot;hobbies&quot;</span>);<br><span class="hljs-comment">//请求转发</span><br>req.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(req,resp);<br></code></pre></td></tr></table></figure><h1 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse:"></a>HttpResponse:</h1><p>响应。</p><p>在Response中，我们更多的是通过设置头文件的功能来指定该Servlet对应的响应。</p><p>setHeader():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置下载头文件（Content-Disposition）和文件名字符转码（使用URLEncoder)</span><br>resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(FileName,<span class="hljs-string">&quot;UTF-8&quot;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这个页面怎么打开，定义格式</span><br>resp.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br><span class="hljs-comment">//网络存在缓存,缓存控制</span><br>resp.setDateHeader(<span class="hljs-string">&quot;expires&quot;</span>, -<span class="hljs-number">1</span>);<br>resp.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br>resp.setHeader(<span class="hljs-string">&quot;Pragma&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br></code></pre></td></tr></table></figure><p>sendRedirect()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        resp.setHeader(&quot;Location&quot;,&quot;/servlet_03_war/image&quot;);</span><br><span class="hljs-comment">//        resp.setStatus(302);      重定向原理，设置头文件，地址和状态码302</span><br><br>resp.sendRedirect(<span class="hljs-string">&quot;/servlet_03_war/image&quot;</span>);   <span class="hljs-comment">//重定向</span><br></code></pre></td></tr></table></figure><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie:"></a>Cookie:</h1><p>小饼干。客户端技术。</p><p>getCookies()，getname()，getValue()，setMaxAge()，addCookie()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = req.getCookies(); <span class="hljs-comment">//获得Cookie</span><br>cookie.getName(); <span class="hljs-comment">//获得cookie中的key</span><br>cookie.getValue(); <span class="hljs-comment">//获得cookie中的vlaue</span><br><span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//新建一个cookie</span><br>cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>); <span class="hljs-comment">//设置cookie的有效期</span><br>resp.addCookie(cookie); <span class="hljs-comment">//响应给客户端一个cookie</span><br></code></pre></td></tr></table></figure><p>getCookies()方法创建的是一个Cookie类型的数组。</p><p>setMaxAge()如果设置值是0，那么即为关闭浏览器就过期。</p><h1 id="Session（重点）"><a href="#Session（重点）" class="headerlink" title="Session（重点）:"></a>Session（重点）:</h1><p>会话。服务器技术。一个浏览器打开时候即创建了一个会话。</p><p>相对于Cookie，Session中的方法更少，但是却更重要。同样的，再Session中也可以取到Context的值。</p><p>getSession()，setAttribute()，getAttribute()，getId()，getServletContext()，invalidate()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.servlet;<br><br><span class="hljs-keyword">import</span> com.kuang.pojo.Person;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <br>        <span class="hljs-comment">//解决乱码问题</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <br>        <span class="hljs-comment">//得到Session</span><br>        HttpSession session = req.getSession();<br>        <span class="hljs-comment">//给Session中存东西</span><br>        session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;秦疆&quot;</span>,<span class="hljs-number">1</span>));<br>        <span class="hljs-comment">//获取Session的ID</span><br>        String sessionId = session.getId();<br><br>        <span class="hljs-comment">//判断Session是不是新创建</span><br>        <span class="hljs-keyword">if</span> (session.isNew())&#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;session创建成功,ID:&quot;</span>+sessionId);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;session以及在服务器中存在了,ID:&quot;</span>+sessionId);<br>        &#125;<br><br>        <span class="hljs-comment">//Session创建的时候做了什么事情；</span><br><span class="hljs-comment">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span><br><span class="hljs-comment">//        resp.addCookie(cookie);</span><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//得到Session</span><br>HttpSession session = req.getSession();<br><br>Person person = (Person) session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br><br>System.out.println(person.toString());<br><br>HttpSession session = req.getSession();<br>session.removeAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//手动注销Session</span><br>session.invalidate();<br></code></pre></td></tr></table></figure><p>注销也可以再Web.xml中配置为自动注销：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Session自动失效--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-comment">&lt;!--15分钟后，Session失效--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="JSP基本语法、JSTL表达式、EL表达式："><a href="#JSP基本语法、JSTL表达式、EL表达式：" class="headerlink" title="JSP基本语法、JSTL表达式、EL表达式："></a>JSP基本语法、JSTL表达式、EL表达式：</h1><h2 id="JSP基本语法："><a href="#JSP基本语法：" class="headerlink" title="JSP基本语法："></a>JSP基本语法：</h2><p>JSP中支持所有Java的所有语法，同时，也支持下面三个扩充：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%%&gt;<br>&lt;%= 变量或者表达式%&gt;   JSP脚本片段<br>&lt;%!%&gt;    JSP声明<br><br>&lt;%--注释--%&gt;<br></code></pre></td></tr></table></figure><h2 id="JSTL标签："><a href="#JSTL标签：" class="headerlink" title="JSTL标签："></a>JSTL标签：</h2><p><strong>JSTL标签库使用步骤</strong></p><ul><li>引入对应的 taglib</li><li>使用其中的方法</li><li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li></ul><p>c：if   相当于Java中的if语句</p><p>c:choose   c:when   相当于Java中的switch语句</p><p>c:forEach   相当于for循环</p><h2 id="EL表达式："><a href="#EL表达式：" class="headerlink" title="EL表达式：  ${ }"></a>EL表达式：  ${ }</h2><ul><li><strong>获取数据</strong></li><li><strong>执行运算</strong></li><li><strong>获取web开发的常用对象</strong></li></ul><h1 id="JSP九大对象以及四个重点对象作用域："><a href="#JSP九大对象以及四个重点对象作用域：" class="headerlink" title="JSP九大对象以及四个重点对象作用域："></a>JSP九大对象以及四个重点对象作用域：</h1><p>九大对象：</p><p>PageContext：存东西</p><p>Out：输出</p><p>Session：存东西</p><p>Page：用不上……</p><p>Response：</p><p>Request：存东西</p><p>Application：ServletContext，存东西</p><p>config：ServletConfing</p><p>exception: 错误</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    pageContext.setAttribute(<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;grz1&quot;</span>);<span class="hljs-comment">//在一个页面中有效</span><br>    request.setAttribute(<span class="hljs-string">&quot;name2&quot;</span>,<span class="hljs-string">&quot;grz2&quot;</span>);<span class="hljs-comment">//在一个请求中有效，请求转发会携带数据</span><br>    session.setAttribute(<span class="hljs-string">&quot;name3&quot;</span>,<span class="hljs-string">&quot;grz3&quot;</span>);<span class="hljs-comment">//在一个会话中有效</span><br>    application.setAttribute(<span class="hljs-string">&quot;name4&quot;</span>,<span class="hljs-string">&quot;grz4&quot;</span>);<span class="hljs-comment">//在一个服务器中有效，服务器关闭就消失  </span><br> %&gt;<br></code></pre></td></tr></table></figure><h1 id="Filter过滤器-重点-："><a href="#Filter过滤器-重点-：" class="headerlink" title="Filter过滤器(重点)："></a>Filter过滤器(重点)：</h1><p>init()，doFilter()，destroy()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br><br>servletResponse.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>servletRequest.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>servletResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><span class="hljs-comment">//固定套路</span><br>filterChain.doFilter(servletRequest,servletResponse);<br>&#125;<br><span class="hljs-comment">//销毁</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>之后需要再Web.xml中注册：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册过滤器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.grz.filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/t<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-comment">&lt;!--过滤走/t的请求--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Web后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb中的过滤器（重点）和监听器</title>
    <link href="/2020/05/20/JavaWeb%E4%B8%AD%E7%9A%84%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <url>/2020/05/20/JavaWeb%E4%B8%AD%E7%9A%84%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>过滤器在JSP中算第二个重点，监听器则不经常使用……</p><span id="more"></span><h1 id="过滤器（Filter）："><a href="#过滤器（Filter）：" class="headerlink" title="过滤器（Filter）："></a>过滤器（Filter）：</h1><p>在大部分时候，我们使用过滤器来对客户端的Request进行过滤……再通过服务器来返回值。</p><h2 id="举例：通过过滤器实现对文本格式设定。"><a href="#举例：通过过滤器实现对文本格式设定。" class="headerlink" title="举例：通过过滤器实现对文本格式设定。"></a>举例：通过过滤器实现对文本格式设定。</h2><p>测试Java部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    resp.getWriter().write(<span class="hljs-string">&quot;你好，世界&quot;</span>);  <span class="hljs-comment">//不设定字符格式再浏览器输出是乱码</span><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>   doGet(req, resp);<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤器部分，继承Filter接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">filter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>    servletResponse.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    servletRequest.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>    servletResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>    <span class="hljs-comment">//固定套路</span><br>    filterChain.doFilter(servletRequest,servletResponse);<br>    &#125;<br>    <br>    <span class="hljs-comment">//销毁</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注册过滤器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册过滤器--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.grz.filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/t<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-comment">&lt;!--过滤走/t的请求--&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="监听器（Lister）："><a href="#监听器（Lister）：" class="headerlink" title="监听器（Lister）："></a>监听器（Lister）：</h1><p>不常用，作为了解。</p><h2 id="举例：通过监听器来显示在线人数。"><a href="#举例：通过监听器来显示在线人数。" class="headerlink" title="举例：通过监听器来显示在线人数。"></a>举例：通过监听器来显示在线人数。</h2><p>Java部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lister</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpSessionListener</span> </span>&#123;<br>    <span class="hljs-comment">//创建Session的监听</span><br>    <span class="hljs-comment">//一旦创建Session就创建</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionCreated</span><span class="hljs-params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        ServletContext servletContext = httpSessionEvent.getSession().getServletContext();<br>        Integer onlineNum = (Integer) servletContext.getAttribute(<span class="hljs-string">&quot;OnlineNum&quot;</span>);<br>        <span class="hljs-keyword">if</span> (onlineNum == <span class="hljs-keyword">null</span>)&#123;<br>            onlineNum = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">int</span> num = onlineNum.intValue();<br>            onlineNum = <span class="hljs-keyword">new</span> Integer(num + <span class="hljs-number">1</span>);<br>        &#125;<br>        servletContext.setAttribute(<span class="hljs-string">&quot;OnlineNum&quot;</span>,onlineNum);<br>    &#125;<br>    <span class="hljs-comment">//销毁Session的监听</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        ServletContext servletContext = httpSessionEvent.getSession().getServletContext();<br>        Integer onlineNum = (Integer) servletContext.getAttribute(<span class="hljs-string">&quot;OnlineNum&quot;</span>);<br>        <span class="hljs-keyword">if</span> (onlineNum == <span class="hljs-keyword">null</span>)&#123;<br>            onlineNum = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">int</span> num = onlineNum.intValue();<br>            onlineNum = <span class="hljs-keyword">new</span> Integer(num - <span class="hljs-number">1</span>);<br>        &#125;<br>        servletContext.setAttribute(<span class="hljs-string">&quot;OnlineNum&quot;</span>,onlineNum);<br>    &#125;<br>    <span class="hljs-comment">//手动注销Session： httpSessionEvent.getSession().invalidate();</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>注册监听器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册监听器--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.grz.Lister<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><p>前端实现：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;当前在线人数&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>&lt;h1&gt;当前在线人数：&lt;span&gt;&lt;%=<br>  <span class="hljs-keyword">this</span>.getServletConfig().getServletContext().getAttribute(<span class="hljs-string">&quot;OnlineNum&quot;</span>)<br>%&gt;&lt;/span&gt;&lt;/h1&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Web后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb中的作用域，JSTL和JavaBean</title>
    <link href="/2020/05/18/JavaWeb%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%8CJSTL%E5%92%8CJavaBean/"/>
    <url>/2020/05/18/JavaWeb%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%8CJSTL%E5%92%8CJavaBean/</url>
    
    <content type="html"><![CDATA[<p>这块JSTL语句中forEach挺重要，JavaBean好像就是标准类……</p><span id="more"></span><h1 id="JSP中的内置的对象："><a href="#JSP中的内置的对象：" class="headerlink" title="JSP中的内置的对象："></a>JSP中的内置的对象：</h1><p>在反翻译后，我们可以在生成的文件中，发现有九个参数是已经设定好的。分别是：</p><p>PageContext：存东西</p><p>Out：输出</p><p>Session：存东西</p><p>Page：用不上……</p><p>Response：</p><p>Request：存东西</p><p>Application：ServletContext，存东西</p><p>config：ServletConfing</p><p>exception: 错误</p><h2 id="关于上面四个存数据的范围："><a href="#关于上面四个存数据的范围：" class="headerlink" title="关于上面四个存数据的范围："></a>关于上面四个存数据的范围：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%<br>    pageContext.setAttribute(<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;grz1&quot;</span>);<span class="hljs-comment">//在一个页面中有效</span><br>    request.setAttribute(<span class="hljs-string">&quot;name2&quot;</span>,<span class="hljs-string">&quot;grz2&quot;</span>);<span class="hljs-comment">//在一个请求中有效，请求转发会携带数据</span><br>    session.setAttribute(<span class="hljs-string">&quot;name3&quot;</span>,<span class="hljs-string">&quot;grz3&quot;</span>);<span class="hljs-comment">//在一个会话中有效</span><br>    application.setAttribute(<span class="hljs-string">&quot;name4&quot;</span>,<span class="hljs-string">&quot;grz4&quot;</span>);<span class="hljs-comment">//在一个服务器中有效，服务器关闭就消失  </span><br> %&gt;<br></code></pre></td></tr></table></figure><p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了。</p><p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用。</p><p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用。</p><h1 id="JSP标签，JSTL标签，EL表达式"><a href="#JSP标签，JSTL标签，EL表达式" class="headerlink" title="JSP标签，JSTL标签，EL表达式"></a>JSP标签，JSTL标签，EL表达式</h1><p>使用JSTL标签，需要在Maven中导入依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--JSTL表达式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Standard依赖库--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>之后还要在Tomcat lib目录下导入jar包，不然在Tomcat上运行会错误。</p><h2 id="EL表达式："><a href="#EL表达式：" class="headerlink" title="EL表达式："></a>EL表达式：</h2><p>格式：${  }</p><p>获取数据，执行运算，获取web开发中开发常用的对象。</p><p>JSP标签：</p><p>在JSP中，原生的标签不多，所以要掌握的并不多。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--jsp:include--%&gt;<br>&lt;%--<br>http:<span class="hljs-comment">//localhost:8080/jsptag.jsp?name=GRZ&amp;age=18</span><br>--%&gt;<br>&lt;jsp:forward page=<span class="hljs-string">&quot;jspTag02.jsp&quot;</span>&gt;<br>  名字：  &lt;jsp:param name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;GRZ&quot;</span>/&gt;<br>  年龄： &lt;jsp:param name=<span class="hljs-string">&quot;age&quot;</span> value=<span class="hljs-string">&quot;18&quot;</span>/&gt;<br>&lt;/jsp:forward&gt;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--取出数据--%&gt;<br>&lt;%= request.getParameter(<span class="hljs-string">&quot;name&quot;</span>)%&gt;<br>&lt;%= request.getParameter(<span class="hljs-string">&quot;age&quot;</span>)%&gt;<br></code></pre></td></tr></table></figure><h2 id="JSTL表达式："><a href="#JSTL表达式：" class="headerlink" title="JSTL表达式："></a>JSTL表达式：</h2><p>JSTL表达式就是在JSP原生标签上的扩充。标签的功能和Java代码一样。</p><p>在JSTL中，我们只需要在JSP开头引入：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JSP">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><p>即可使用JSTL的核心语句部分。</p><ul><li>引入对应的 taglib</li><li>使用其中的方法</li><li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li></ul><h3 id="c：if"><a href="#c：if" class="headerlink" title="c：if"></a>c：if</h3><p>相当于Java中的if语句：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--类似<span class="hljs-keyword">if</span>语句--%&gt;<br>&lt;h4&gt;<span class="hljs-keyword">if</span>测试&lt;/h4&gt;<br>&lt;hr&gt;<br>&lt;form action=<span class="hljs-string">&quot;coreIf.jsp&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;%--通过EL表达式来获取表单数据--%&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.username&#125;&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>&lt;/form&gt;<br><br>&lt;%--判断登录是否为管理员--%&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class="hljs-keyword">var</span> = <span class="hljs-string">&quot;isadmin&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;管理员欢迎&quot;</span>&gt;&lt;/c:out&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;c:out value=<span class="hljs-string">&quot;$&#123;isadmin&#125;&quot;</span>&gt;&lt;/c:out&gt;<br></code></pre></td></tr></table></figure><h3 id="c-choose-c-when"><a href="#c-choose-c-when" class="headerlink" title="c:choose   c:when"></a>c:choose   c:when</h3><p>相当于Java中的Switch语句</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--定义一个变量score，值为<span class="hljs-number">85</span>--%&gt;<br>&lt;%--类似<span class="hljs-keyword">if</span>……<span class="hljs-keyword">else</span>语句--%&gt;<br>&lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;score&quot;</span> value=<span class="hljs-string">&quot;55&quot;</span>/&gt;<br><br>&lt;c:choose&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;<br>        你的成绩为优秀<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;<br>        你的成绩为一般<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&gt;=70&#125;&quot;</span>&gt;<br>        你的成绩为良好<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&lt;=60&#125;&quot;</span>&gt;<br>        你的成绩为不及格<br>    &lt;/c:when&gt;<br>&lt;/c:choose&gt;<br></code></pre></td></tr></table></figure><h3 id="c-forEach"><a href="#c-forEach" class="headerlink" title="c:forEach:"></a>c:forEach:</h3><p>相当于Java中的for循环</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    ArrayList&lt;String&gt; people = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    people.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>    people.add(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;李四&quot;</span>);<br>    people.add(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;王五&quot;</span>);<br>    people.add(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;赵六&quot;</span>);<br>    people.add(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;田六&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>,people);<br>%&gt;<br><br><br>&lt;%--<br><span class="hljs-keyword">var</span> , 每一次遍历出来的变量<br>items, 要遍历的对象<br>begin,   哪里开始<br>end,     到哪里<br>step,   步长<br>--%&gt;<br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;people&quot;</span> items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;<br>&lt;/c:forEach&gt;<br><br>&lt;hr&gt;<br><br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;people&quot;</span> items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> begin=<span class="hljs-string">&quot;1&quot;</span> end=<span class="hljs-string">&quot;3&quot;</span> step=<span class="hljs-string">&quot;1&quot;</span> &gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;<br>&lt;/c:forEach&gt;<br><br></code></pre></td></tr></table></figure><h1 id="JavaBean："><a href="#JavaBean：" class="headerlink" title="JavaBean："></a>JavaBean：</h1><p>感觉就是一个标准类……</p><h2 id="JavaBean有特定的写法："><a href="#JavaBean有特定的写法：" class="headerlink" title="JavaBean有特定的写法："></a>JavaBean有特定的写法：</h2><ul><li>必须要有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的get/set方法；</li></ul><p>一般用来和数据库的字段做映射  ORM；</p><h2 id="ORM-：对象关系映射"><a href="#ORM-：对象关系映射" class="headerlink" title="ORM ：对象关系映射"></a>ORM ：对象关系映射</h2><ul><li>表—&gt;类</li><li>字段–&gt;属性</li><li>行记录—-&gt;对象</li></ul>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Web后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb中的JSP基础语法和指令</title>
    <link href="/2020/05/18/JavaWeb%E4%B8%AD%E7%9A%84JSP%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E6%8C%87%E4%BB%A4/"/>
    <url>/2020/05/18/JavaWeb%E4%B8%AD%E7%9A%84JSP%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>这块不知道怎么说……算为了以后学框架打基础吧……</p><span id="more"></span><h1 id="JSP原理"><a href="#JSP原理" class="headerlink" title="JSP原理:"></a>JSP原理:</h1><p>JSP如果把拿出来反编译，就是一个Servlet。但是我们只不过把它封装了起来。里面写的Java代码，大部分不变。在反编译过程中大部分HTML都被用out.write()方法给照常输出……</p><h1 id="JSP常见语法"><a href="#JSP常见语法" class="headerlink" title="JSP常见语法:"></a>JSP常见语法:</h1><p>这一块和在Web前端中的HTML差不多，但是又不一样。首先，JSP继承了Java的全部语法……在Java里怎么写，在JSP里还是得按照规则来做。</p><h3 id="JSP表达式："><a href="#JSP表达式：" class="headerlink" title="JSP表达式："></a>JSP表达式：</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--JSP表达式<br>作用：用来将程序输出到客户端<br>&lt;%=变量或者表达式%&gt;<br>--%&gt;<br>&lt;%=<span class="hljs-keyword">new</span> java.util.Date()%&gt;<br></code></pre></td></tr></table></figure><h3 id="JSP脚本片段："><a href="#JSP脚本片段：" class="headerlink" title="JSP脚本片段："></a>JSP脚本片段：</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--JSP脚本片段--%&gt;<br>&lt;%<br>  <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    sum += i;<br>  &#125;<br>  out.println(<span class="hljs-string">&quot;sum&quot;</span> + sum);<br>%&gt;<br></code></pre></td></tr></table></figure><h3 id="JSP声明："><a href="#JSP声明：" class="headerlink" title="JSP声明："></a>JSP声明：</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--JSP声明--%&gt;<br>&lt;%!<br>  <span class="hljs-keyword">static</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Loading Servlet&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> globalVar = <span class="hljs-number">0</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">G</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;进入了方法&quot;</span>);<br>  &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%%&gt;<br>&lt;%=%&gt;<br>&lt;%!%&gt;<br><br>&lt;%--注释--%&gt;<br></code></pre></td></tr></table></figure><h1 id="JSP指令："><a href="#JSP指令：" class="headerlink" title="JSP指令："></a>JSP指令：</h1><p>在JSP中，有时候可以通过&lt;%@   指令    %&gt;来进行指令操作。</p><p>举例：使用&lt;%@page error-page%&gt;来自定义定制错误页面。</p><p>指定页面：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%--定制错误页面--%&gt;<br>&lt;%<span class="hljs-meta">@page</span> errorPage=<span class="hljs-string">&quot;error/500.jsp&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>500错误页面：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;img src=<span class="hljs-string">&quot;../img/500.jpg&quot;</span> alt=<span class="hljs-string">&quot;500&quot;</span>&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>总的来说：现在基本就两个用的上：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> args.... %&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;&quot;</span>%&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Web后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb中的Cookie和Session（重点）</title>
    <link href="/2020/05/17/JavaWeb%E4%B8%AD%E7%9A%84Cookie%E5%92%8CSession/"/>
    <url>/2020/05/17/JavaWeb%E4%B8%AD%E7%9A%84Cookie%E5%92%8CSession/</url>
    
    <content type="html"><![CDATA[<p>Cookie和Session挺重要的，算JSP里得认真看的一个点。</p><span id="more"></span><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie:"></a>Cookie:</h1><p>　　原意是饼干，但是在JavaWeb中，给这个英文单词不同的意义。<br>　　Cookie是一种服务器在客户端本地存储数据的方式。一般Cookie可以通过set方法将数据存储进去。类似于HashMap中的key，value。Cookie中的set方法只能存入两个String类型数据。有一定的局限性。<br>　　但是这不妨碍Cookie的使用。其中请求（req）获得，是一个Cookie类型的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = req.getCookies(); <span class="hljs-comment">//获得Cookie</span><br>cookie.getName(); <span class="hljs-comment">//获得cookie中的key</span><br>cookie.getValue(); <span class="hljs-comment">//获得cookie中的vlaue</span><br><span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//新建一个cookie</span><br>cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>); <span class="hljs-comment">//设置cookie的有效期</span><br>resp.addCookie(cookie); <span class="hljs-comment">//响应给客户端一个cookie</span><br></code></pre></td></tr></table></figure><p>举例：</p><p>通过Cookie来获取用户的最后时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//设置resp和req的字符编码格式</span><br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>    PrintWriter out = resp.getWriter();<br>    Cookie[] cookies = req.getCookies();<br><br>    <span class="hljs-comment">//判断是否为第一次，是就输出语句，并且发给客户端cookie</span><br>    <span class="hljs-keyword">if</span> (cookies != <span class="hljs-keyword">null</span>) &#123;<br>        out.write(<span class="hljs-string">&quot;你上次访问时间：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cookies.length; i++) &#123;<br>            Cookie cookie = cookies[i];<br>            <span class="hljs-comment">//获取cookie的名字，并且和下面的请求的名字进行对比</span><br>            <span class="hljs-keyword">if</span> (cookie.getName().equals(<span class="hljs-string">&quot;name&quot;</span>)) &#123;<br>                <span class="hljs-comment">//获取cookie的值</span><br>                cookie.getValue();<br>                <span class="hljs-keyword">long</span> lastTime = Long.parseLong(cookie.getValue());<br>                Date date = <span class="hljs-keyword">new</span> Date(lastTime);<br>                out.write(date.toLocaleString());<br>            &#125;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        out.write(<span class="hljs-string">&quot;第一次访问这个站点&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//给客服端响应一个cookie请求</span><br>    Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;name&quot;</span>, System.currentTimeMillis() + <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//setMaxAge设置有效期</span><br>    cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>);<br>    <span class="hljs-comment">//服务器响应</span><br>    resp.addCookie(cookie);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="删除Cookie："><a href="#删除Cookie：" class="headerlink" title="删除Cookie："></a>删除Cookie：</h3><p>MaxAge设置为0值，每次自动清除。</p><p>不设置，每次关闭浏览器自动失效。</p><h1 id="Session"><a href="#Session" class="headerlink" title="Session:"></a>Session:</h1><p>　　会话。Session在每次浏览器打开时候，就会自动创建一个Session，当浏览器关闭时候，Session也随之关闭。Session类似于像Servlet中的Context，也可以跨Servlet进行读取和修改。也可以对它进行抹除。<br>　　同样的，也有set和get方法可以对于其中的数据进行存取。但是对比Cookie，Session其中的提供的set方法第二个参数是Object类型，所以大大增强了Session的可使用性，这样我们可以传自定义类的类型数据进去并且调用。</p><p>当然的，Session也是从请求（req)获得：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">    req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;utf8&quot;</span>);<br><br>    <span class="hljs-comment">//得到Session</span><br>    HttpSession session = req.getSession();<br>    <span class="hljs-comment">//向Session中储存数据</span><br>    session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;谷瑞真&quot;</span>);<br>    session.getId();<br>    <span class="hljs-comment">//判断是不是新创建Session</span><br>    <span class="hljs-keyword">if</span> (session.isNew())&#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;创建成功&quot;</span>+session.getId());<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;session已经存在&quot;</span>+session.getId());<br>    &#125;<br>    <br>    <br><br>    req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    <span class="hljs-comment">//从Session获取数据</span><br>    HttpSession session = req.getSession();<br><br>    String name = (String) session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>    System.out.println(name);<br>&#125;<br><br><br>    <span class="hljs-comment">//手动注销</span><br>    HttpSession session = req.getSession();<br>    session.removeAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>    session.invalidate();<br></code></pre></td></tr></table></figure><p>同样的，Session的注销也可以在web.xml中进行自动注销设置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置Session默认的失效时间--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Cookie和Session的不同："><a href="#Cookie和Session的不同：" class="headerlink" title="Cookie和Session的不同："></a>Cookie和Session的不同：</h3><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li><li>Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）</li><li>Session对象由服务创建；</li></ul>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Web后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb中的Request和Repose</title>
    <link href="/2020/05/15/JavaWeb%E4%B8%AD%E7%9A%84Request%E5%92%8CRepose/"/>
    <url>/2020/05/15/JavaWeb%E4%B8%AD%E7%9A%84Request%E5%92%8CRepose/</url>
    
    <content type="html"><![CDATA[<p>两个容易搞混的单词，请求和响应……</p><span id="more"></span><h1 id="HttpServletRequest："><a href="#HttpServletRequest：" class="headerlink" title="HttpServletRequest："></a>HttpServletRequest：</h1><p>HttpServletRequest代表的是客户端的请求。获取参数和请求转发。虽然在前一章节中，提到过可以通过Context来实现请求转发，但是Resquest也同样可以通过**getRequestDispacher()<strong>方法来实现转发，并且通过</strong>forward()**传值。</p><p>但是，通过这种方法，需要这前端页面中添加指向路径，才能实现。</p><p>前端index页面：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;登录&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%--通过$&#123;&#125;--%绑定跳转路径&gt;<br>&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;br&gt;<br>    密码：&lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;&lt;br&gt;<br>    爱好：<br>    &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobbies&quot;</span> value=<span class="hljs-string">&quot;看妹子&quot;</span>&gt;看妹子<br>    &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobbies&quot;</span> value=<span class="hljs-string">&quot;写代码&quot;</span>&gt;写代码<br>    &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobbies&quot;</span> value=<span class="hljs-string">&quot;听音乐&quot;</span>&gt;听音乐<br>    &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobbies&quot;</span> value=<span class="hljs-string">&quot;看电影&quot;</span>&gt;看电影<br>    &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobbies&quot;</span> value=<span class="hljs-string">&quot;玩游戏&quot;</span>&gt;玩游戏<br>    &lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>Java控制语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过req.getParameter()和req.getParameterValues()方法来获取参数，getParameterValues()用来获取多个参数。</span><br>        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        String[] hobbies = req.getParameterValues(<span class="hljs-string">&quot;hobbies&quot;</span>);<br>        <span class="hljs-comment">//请求转发</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(req,resp);<br></code></pre></td></tr></table></figure><h1 id="HttpServletResponse："><a href="#HttpServletResponse：" class="headerlink" title="HttpServletResponse："></a>HttpServletResponse：</h1><p>HttpServletResponse代表的是服务器端的响应。</p><h3 id="实现从浏览器下载文件（了解）："><a href="#实现从浏览器下载文件（了解）：" class="headerlink" title="实现从浏览器下载文件（了解）："></a>实现从浏览器下载文件（了解）：</h3><p>思路：</p><ol><li>要获取下载文件的路径</li><li>下载的文件名是啥？</li><li>设置想办法让浏览器能够支持下载我们需要的东西</li><li>获取下载文件的输入流</li><li>创建缓冲区</li><li>获取OutputStream对象</li><li>将FileOutputStream流写入到buffer缓冲区</li><li>使用OutputStream将缓冲区中的数据输出到客户端！</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//获取文件在Target的里路径</span><br>String realPath = <span class="hljs-string">&quot;G:\\IntelliJ IDEA 2020.1Projects\\com.grz\\javaweb-02-servlet\\servlet-03\\target\\classes\\JavaStudyWay.png&quot;</span>;<br>        <span class="hljs-comment">//获取文件名</span><br>        String FileName = realPath.substring(realPath.lastIndexOf(<span class="hljs-string">&quot;\\&quot;</span>) + <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//设置下载头文件（Content-Disposition）和文件名字符转码（使用URLEncoder)</span><br>resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span>+URLEncoder.encode(FileName,<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        <br>        <span class="hljs-comment">//IO流</span><br>        <span class="hljs-comment">//获取文件输入流</span><br>        FileInputStream in = <span class="hljs-keyword">new</span> FileInputStream(realPath);<br>        <span class="hljs-comment">//创建字符缓冲区</span><br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-comment">//将FileOutStream写入，并且使用OutPutStream推送到浏览器输出</span><br>        ServletOutputStream out = resp.getOutputStream();<br>        <span class="hljs-keyword">while</span> ((len = in.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>            out.write(bytes, <span class="hljs-number">0</span>, len);<br>        &#125;<br><br>        in.close();<br>        out.close();<br></code></pre></td></tr></table></figure><p>大部分代码还是用了IO里的知识，使用HTTPServletRespose只是设置头文件来指定下载路径。</p><h3 id="实现验证码功能："><a href="#实现验证码功能：" class="headerlink" title="实现验证码功能："></a>实现验证码功能：</h3><p>验证码是通过Random类设计随机数来实现，且使用GUI里的方法来设置图片。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//让图片按指定时间刷新</span><br>    resp.setHeader(<span class="hljs-string">&quot;refresh&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>);   <span class="hljs-comment">//指定图片按5秒刷新</span><br>    <span class="hljs-comment">//使用AWT在内存中进行定义图片</span><br>    BufferedImage image = <span class="hljs-keyword">new</span> BufferedImage(<span class="hljs-number">50</span>, <span class="hljs-number">20</span>, BufferedImage.TYPE_INT_RGB);<br>    <span class="hljs-comment">//得到图片</span><br>    Graphics2D graphics = (Graphics2D) image.getGraphics();<span class="hljs-comment">//笔</span><br>    graphics.setColor(Color.white);<span class="hljs-comment">//设置白色背景</span><br>    graphics.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">20</span>);<span class="hljs-comment">//得到大小</span><br><br>    graphics.setColor(Color.BLUE);<span class="hljs-comment">//调整画笔颜色</span><br>    graphics.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-keyword">null</span>, Font.BOLD, <span class="hljs-number">20</span>));<span class="hljs-comment">//选择字体类型和大小</span><br>    graphics.drawString(makeNum(), <span class="hljs-number">0</span>, <span class="hljs-number">20</span>);<br><br>    <span class="hljs-comment">//这个页面怎么打开，定义格式</span><br>    resp.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br>    <span class="hljs-comment">//网络存在缓存,缓存控制</span><br>    resp.setDateHeader(<span class="hljs-string">&quot;expires&quot;</span>, -<span class="hljs-number">1</span>);<br>    resp.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br>    resp.setHeader(<span class="hljs-string">&quot;Pragma&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br><br>    <span class="hljs-comment">//把图片写给浏览器</span><br>    ImageIO.write(image, <span class="hljs-string">&quot;jpg&quot;</span>, resp.getOutputStream());<br>&#125;<br><br><span class="hljs-comment">//随机数生成方法</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">makeNum</span><span class="hljs-params">()</span> </span>&#123;<br>    Random random = <span class="hljs-keyword">new</span> Random();<br>    String num = random.nextInt(<span class="hljs-number">9999</span>) + <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//方法：因为是随机数，所以可能生成不是四位数，所以用0进行补全</span><br>    StringBuffer buffer = <span class="hljs-keyword">new</span> StringBuffer();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span> - num.length(); i++) &#123;<br>        buffer.append(<span class="hljs-string">&quot;0&quot;</span>);<br>    &#125;<br>    num = buffer.toString() + num;<br>    <span class="hljs-keyword">return</span> num;<br></code></pre></td></tr></table></figure><h3 id="实现重定向："><a href="#实现重定向：" class="headerlink" title="实现重定向："></a>实现重定向：</h3><p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向。</p><p>通过resp.sendRedirec()方法实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        resp.setHeader(&quot;Location&quot;,&quot;/servlet_03_war/image&quot;);</span><br><span class="hljs-comment">//        resp.setStatus(302);      重定向原理，设置头文件，地址和状态码302</span><br><br>        resp.sendRedirect(<span class="hljs-string">&quot;/servlet_03_war/image&quot;</span>);   <span class="hljs-comment">//重定向</span><br><br></code></pre></td></tr></table></figure><h4 id="面试题：请你聊聊重定向和转发的区别？"><a href="#面试题：请你聊聊重定向和转发的区别？" class="headerlink" title="面试题：请你聊聊重定向和转发的区别？"></a>面试题：请你聊聊重定向和转发的区别？</h4><p>相同点</p><ul><li>页面都会实现跳转</li></ul><p>不同点</p><ul><li>请求转发的时候，url不会产生变化</li><li>重定向时候，url地址栏会发生变化</li></ul>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Web后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb中的ServletContext</title>
    <link href="/2020/05/15/JavaWeb%E4%B8%AD%E7%9A%84ServletContext/"/>
    <url>/2020/05/15/JavaWeb%E4%B8%AD%E7%9A%84ServletContext/</url>
    
    <content type="html"><![CDATA[<p>在JavaWeb中，Context充当的更多的是处在在response和request上的一个对象。</p><span id="more"></span><h1 id="共享资源："><a href="#共享资源：" class="headerlink" title="共享资源："></a>共享资源：</h1><ol><li>Context可以将在一个Servlet中储存的资源，通过getContext()方法在另一个Servlet中读取到。这时候Context就是充当了一个中间的容器。</li></ol><p>先在一个Servlet中储存对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.servlet.ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br>String username = <span class="hljs-string">&quot;谷瑞真&quot;</span>;<br>context.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);    <span class="hljs-comment">//储存对象</span><br></code></pre></td></tr></table></figure><p>再通过另一个Servlet进行读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>String username = (String) servletContext.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br><br>resp.setContentType(<span class="hljs-string">&quot;text.html&quot;</span>);        <span class="hljs-comment">//定义浏览器头文件的格式</span><br>resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);      <span class="hljs-comment">//定义编码格式</span><br><br>resp.getWriter().print(<span class="hljs-string">&quot;名字&quot;</span>+username); <span class="hljs-comment">//getWrite()方法输出</span><br><br></code></pre></td></tr></table></figure><p>在Web.xml中注册和部署到服务器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>setContext<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.grz.servlet.ServletSetContext<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>setContext<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/set<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getContext<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.grz.servlet.ServletGetContext<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getContext<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/get<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="请求转发："><a href="#请求转发：" class="headerlink" title="请求转发："></a>请求转发：</h1><p>这个和304重定向有一定的区别。</p><p>通过getRequestDispatcher（）方法来通过Context将请求转发给了/get。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br><span class="hljs-comment">//将RequestForwarding这个类创建的路径/rf转给/get</span><br>RequestDispatcher requestDispatcher = context.getRequestDispatcher(<span class="hljs-string">&quot;/get&quot;</span>);<br><span class="hljs-comment">//通过req,resp来接收</span><br>requestDispatcher.forward(req,resp);<br></code></pre></td></tr></table></figure><p>在Web.xml中，我们定义的是/rf，但是会转给/get。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getContext<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.grz.servlet.ServletGetContext<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getContext<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/get<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>RequestForwarding<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.grz.servlet.RequestForwarding<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>RequestForwarding<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/rf<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="读取资源文件："><a href="#读取资源文件：" class="headerlink" title="读取资源文件："></a>读取资源文件：</h1><p>Properties：</p><p>我们通过定义.Properties来初始化数据。</p><p>属于java.util包下，有这个工具类方法，可以读取到.Properties的字符流对象（load()方法）。</p><p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br>        <span class="hljs-comment">//读取配置文件properties的路径，在target目录下</span><br>        InputStream resourceAsStream = context.getResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/db.properties&quot;</span>);<br><br>        <span class="hljs-comment">//使用Properties方法</span><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        prop.load(resourceAsStream);               <span class="hljs-comment">//load()方法读取字符流</span><br>        String name = prop.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>        String pwd = prop.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-comment">//输出打印</span><br>        resp.getWriter().print(name+<span class="hljs-string">&quot;:&quot;</span>+pwd);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Web后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb的服务器，HTTP，Maven</title>
    <link href="/2020/05/13/JavaWeb%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8CHTTP%EF%BC%8CMaven/"/>
    <url>/2020/05/13/JavaWeb%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8CHTTP%EF%BC%8CMaven/</url>
    
    <content type="html"><![CDATA[<p>其实，在这边怎么说，前端和数据库都没学……因为进度原因，所以直接看的Web后端，这就会搞得一知半解的，但是也不影响入门。至于入门其实也就不得不提到配置环境这块……</p><span id="more"></span><h1 id="1、JavaWeb"><a href="#1、JavaWeb" class="headerlink" title="1、JavaWeb"></a>1、JavaWeb</h1><p>个人觉得吧，JavaWeb在学校教育里的概念等同于JSP，但是并不是。</p><p>Java Web，是用Java技术来解决相关web互联网领域的技术栈。web包括：web服务端和web客户端两部分。Java在服务器端的应用非常的丰富，比如Servlet，JSP和第三方框架等等。Java技术对Web领域的发展注入了强大的动力。——百度百科</p><h1 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h1><p>在IDEA中写JavaWeb的代码，是要配置Web服务器和Maven来管理需要依赖的jar包。一般Web服务器都是用Tomcat。</p><h1 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h1><p>Tomcat是Apache提供的服务器。在IDEA中配置相对与Ecplise要简单的很。但是一般需要导入war包作为依赖。</p><h1 id="4、Maven"><a href="#4、Maven" class="headerlink" title="4、Maven"></a>4、Maven</h1><p>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具)软件。——百度百科</p><p>通俗的讲，在Javaweb开发中，需要导入大量的jar包，Maven就是方便导入jar包和管理。</p><p>Maven的使用和Java差不多，使用需要配置环境变量。</p><p>且建议配置Maven的阿里云镜像和配置本地仓库，保证在导入依赖的jar包时的速度。</p><p>在IDEA里，Maven更类似于一个集成管理工具。在pom.XML中从Maven市场的找到自己需要的依赖。在<dependencies></dependencies>标签中使用<dependency></dependency>关键字导入且刷新。</p><p>举个例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="5、HTTP"><a href="#5、HTTP" class="headerlink" title="5、HTTP"></a>5、HTTP</h1><p>HTTP是一种超文本传输协议，分为1.0时代和1.1时代。</p><p>HTTPS是在HTTP协议上使用SSH加密技术，一般来说安全性更高。</p><ul><li><p>HTTP请求（respose)：</p></li><li><p>客户端—发请求（Request）—服务器</p><p>我的博客举例：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">Request URL: https://grz21.xyz/             请求地址<br>Request Method: GET                         请求方法<br>Status Code: 304                            状态码<br>Remote Address: 185.199.108.153:443      主机地址和端口<br></code></pre></td></tr></table></figure><ul><li>请求行：Get或者Post方法。</li></ul><p>get方法：不安全但是高效，能请求携带的数据较少。</p><p>post方法：安全但是低效，能请求携带的数据多。</p><ul><li>消息头：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">accept: text/html                                                      支持的数据类型<br>accept-encoding: gzip, deflate, br                                     编码类型<br>accept-language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7                   语言类型<br></code></pre></td></tr></table></figure><ul><li><p>HTTP响应：</p></li><li><p>服务器—响应—客户端</p></li><li><p>响应体：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">accept: text/html                                                      支持的数据类型<br>accept-encoding: gzip, deflate, br                                      编码类型<br>accept-language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7                    语言控制<br>cache-control:                                                          缓存控制<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Web后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的GUI编程</title>
    <link href="/2020/05/09/Java%E4%B8%AD%E7%9A%84GUI%E7%BC%96%E7%A8%8B/"/>
    <url>/2020/05/09/Java%E4%B8%AD%E7%9A%84GUI%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>没有办法，一般来说，学完Java SE一般有两个玩意肯定要写一下，一个是贪吃蛇，该有一个是多人聊天室。但是操蛋的是，贪吃蛇是要用GUI编程来写，只能再开一篇帖子了。</p><p>其实GUI这玩意用的感觉真的不多了，界面感觉也不好看……</p><span id="more"></span><ul><li><p>AWT</p><p>在GUI算第一个板块了。</p><ol><li>Frame: 就是看见的窗口，后期的组件都要在这个上面跑。</li><li>Panel：板块，划分用</li><li>Button：按钮</li><li>Label：标签</li></ol></li><li><p>布局：</p><ol><li>流式布局：FlowLayout()</li><li>东南西北中布局：BorderLayout()</li><li>表格布局：GridLayout()</li></ol><p>这玩意倒是让我想起了写Android时候的constraintlayout，但是差点意思。毕竟GUI不常用了……</p></li><li><p>监听：</p><p>最难的就是在这块了，鼠标监听，窗口监听，键盘监听……鼠标监听最难搞。</p><p>至于sWing，今天没看到，明天估计差不多就能做贪吃蛇这个Demo了。</p><p>自学，路漫漫啊……</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-番外</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中Junit，反射，注解</title>
    <link href="/2020/05/07/Java%E4%B8%ADJunit%EF%BC%8C%E5%8F%8D%E5%B0%84%EF%BC%8C%E6%B3%A8%E8%A7%A3/"/>
    <url>/2020/05/07/Java%E4%B8%ADJunit%EF%BC%8C%E5%8F%8D%E5%B0%84%EF%BC%8C%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>这块属于基础扩充内容，也不算难吧。</p><span id="more"></span><ul><li><p>Junit测试</p><p>在测试中，一般分为两种，白盒和黑盒测试，Junit属于白盒测试。</p><p>Junit使用：</p><ol><li><p>定义一个测试类  </p><p>建议：</p><p>测试类名：被测试得类名+Test</p><p>包名：xxx.xx.test</p></li><li><p>定义测试方法：</p><p>建议：</p><p>方法名：test+测试的方法名</p><p>返回值：void</p><p>参数列表：空参</p></li><li><p>给方法加@Test</p></li><li><p>给Junit导入环境</p></li><li><p>判定结果：</p><p>红色：失败</p><p>绿色：成功</p><p>一般我们使用断言来操作处理结果：Assert。assertEquals（期望的结果，运算的结果）;</p></li></ol><p>补充：</p><p>@Before：修饰的方法会在测试方法执行之前自动执行。</p><p>@After：修饰的方法会在测试方法执行之后自动执行。</p><hr><ul><li><p>反射：框架设计的灵魂。</p></li><li><p>获取Class对象的方式：</p><ol><li><p>Class.forName(全类名）：将字节码文件加载进内存，返回Class对象。</p><p>多用于配置文件，将类名定义在配置文件中，读取文件，加载类。</p></li><li><p>类名。class：通过类名的属性class获取：</p><p>多用于参数的传递。</p></li><li><p>对象。getClass()：getClass()方法在OBject类中定义：</p><p>多用于对象获取字节码的方式。</p></li></ol></li></ul><p>结论：同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，无论哪种方式获得的都是同一个。</p><p>class对象功能：</p><p>获取功能：</p><ol><li>   获取成员方法们：</li></ol><p>   Filed   getField(String name)</p><p>   Filed[  ]  getFields() ：获取所有public修饰的成员变量</p><p>   Filed  getDeclaredField(String name)</p><p>   Filed[  ]  getDeclaredFields() ：获取所有成员变量，不考虑修饰符</p><p>   Filed：成员变量操作：</p><ol><li><p>设置值：</p><p>void set(Object obj,Object value)</p></li><li><p>获取值：</p><p>get(Object obj)</p></li><li><p>忽略访问权限修饰符:</p><p>对象.setAccessible(true); 暴力反射。</p><hr></li><li><p>获取构造方法：</p><p>Constructor<T>  getConstructor(类… parameterTypes)</p><p>Constructor[  ]   geConstructors() ：获取所有public修饰的构造方法</p><p>Constructor<T>  getDeclaredConstructor(类… parameterTypes)</p><p>Constructor[  ]   getDeclaredConstructors()  ：获取所有构造方法，不考虑修饰符</p><p>Constructor：构造方法操作：</p><p>创建对象：</p><p>T newInstance(Object……initargs)</p><p>如果是空参数，可以直接使用Class对象的newInstance方法。</p></li></ol><hr><ol start="3"><li><p>获取成员方法们：</p><p>Method getMethod(String name,  类… parameterTypes)</p><p>Mathod[  ]  getMethods()</p><p>Method getDeclaredMethod(String name,  类… parameterTypes)</p><p>Mathod[  ]  getDeclaredMethods()</p><p>Method：成员方法操作：</p><p>执行方法：Object invoke(Object obj，Object……args)</p><p>获取方法名称：String getName：获取方法名。</p><hr></li><li><p>获取类名：</p><p>String  getName()</p></li></ol></li></ul><hr><ul><li><p>注解：</p><p>说明程序：给计算机看的。</p><p>概念描述：</p><ol><li>JDK1.5之后的新特性</li><li>说明程序的</li><li>使用注解：@注解名称</li></ol><p>作用分类：</p><ol><li>编写文档：通过代码中标识的元数据生成文档（生成doc文档）。</li><li>代码分析：通过代码中标识的元数据生成分析（使用文档）。</li><li>编译检查：通过代码中标识的元数据让编译器实现基本的编译检查（Override)。</li></ol></li><li><p>JDK预定义注解：</p><ol><li>@Override：检测该注解的方法是否来自继承自父类（接口）的。</li><li>@Deprecated：标注的类容代表已经过时。</li><li>@SuppressWarnings：压制警告，一般写在类前，value给all，压制所有警告。</li></ol></li><li><p>自定义注解：</p><p>格式：</p><p>元注解</p><p>public @interface 注解名称{  }</p><p>本质是一个接口，该接口默认继承Annotation接口。</p><p>属性：接口可以定义的成员方法要求：</p><ol><li><p>基本数据类型</p></li><li><p>String</p></li><li><p>枚举</p></li><li><p>注解</p></li><li><p>以上类型的数组</p><p>定义了属性，需要给属性赋值：</p><ol><li>如果定义属性时，使用default关键字默认初始值，则在使用注解时，无需进行属性的赋值。</li><li>如果志有一个属性需要赋值，且名称是value，则value可以省略，直接定义值即可。</li><li>数组赋值时，值使用｛｝包裹，如果数组只有一个值，则可以省略｛｝。</li></ol></li></ol><p>元注解：</p><ol><li><p>@Target：描述注解能够作用的位置（其中包含TYPE，作用于类；METHOD，作用于方法；FIELD,作用于成员变量）。</p></li><li><p>@Retention：描述注解能够保留的阶段（RetentionPolicy+ 包含SOURCE，CLASS，RUNTIME三个阶段，一般使用RUNTIME阶段）。</p></li><li><p>@Documented：描述注解是否被抽取到API文档中。</p></li><li><p>@Inherited：描述注解是否被子类继承。</p></li></ol></li></ul><p>其实，在以后大多数时候，我们都是自己去使用注解，而不是自定义……</p>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中父类和接口</title>
    <link href="/2020/05/06/Java%E4%B8%AD%E7%88%B6%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <url>/2020/05/06/Java%E4%B8%AD%E7%88%B6%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p>在Java中，个人感觉这两个也代表了Java中两个特性：继承和多态。</p><span id="more"></span><ul><li><p>父类：</p><p>这个也被称为：超类</p><p>一般来说，继承：就是子类继承父类的<strong>属性和行为</strong>，使得子类对象具有与父类相同的属性、相同的行为。子类可以直接 访问父类中的<strong>非私有</strong>的属性和行为。</p><p>提高代码的复用性，类和类之间产生关系，是<strong>多态的前提</strong>。</p><p>通过 <strong>extends</strong> 关键字，可以声明一个子类继承另外一个父类，定义格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> 父类 </span>&#123;<br>...<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> 子类 <span class="hljs-keyword">extends</span> 父类 </span>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>成员变量：</p><p>成员变量不重名，没有影响</p><p>成名变量重名：子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用 super 关键字，修饰父类成员变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">super</span>.父类成员变量名<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fu</span> </span>&#123;<br><span class="hljs-comment">// Fu中的成员变量。</span><br><span class="hljs-keyword">int</span> num = <span class="hljs-number">5</span>;<br>  &#125;<br>  <br>  <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fu</span> </span>&#123;<br><span class="hljs-comment">// Zi中的成员变量</span><br><span class="hljs-keyword">int</span> num = <span class="hljs-number">6</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//访问父类中的num</span><br>System.out.println(<span class="hljs-string">&quot;Fu num=&quot;</span> + <span class="hljs-keyword">super</span>.num);<br><span class="hljs-comment">//访问子类中的num</span><br>System.out.println(<span class="hljs-string">&quot;Zi num=&quot;</span> + <span class="hljs-keyword">this</span>.num);<br>  &#125;<br>&#125;<br> <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Extends</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 创建子类对象</span><br>Zi z = <span class="hljs-keyword">new</span> Zi();<br><span class="hljs-comment">// 调用子类中的show方法</span><br>z.show();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>成员方法：</p><p>成员方法不重名，没有影响。</p><p>成员方法重名，<strong>那就需要Override（重写）</strong>：子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。<strong>声明不变，重新实现</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fu</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Fu show&quot;</span>);<br>   &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fu</span> </span>&#123;<br><span class="hljs-comment">//子类重写了父类的show方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Zi show&quot;</span>);<br>   &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExtendsDemo05</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Zi z = <span class="hljs-keyword">new</span> Zi();<br><span class="hljs-comment">// 子类中有show方法，只执行重写后的show方法</span><br>z.show(); <span class="hljs-comment">// Zi show</span><br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>重写的应用：</strong></p><p>子类可以根据需要，定义特定于自己的行为。既沿袭了父类的功能名称，又根据子类的需要重新实现父类方法，从 而进行扩展增强。比如新的手机增加来电显示头像的功能，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;发短信&quot;</span>);<br>  &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;打电话&quot;</span>);<br>   &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showNum</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;来电显示号码&quot;</span>);<br>   &#125;<br>&#125;<br><br><br><span class="hljs-comment">//智能手机类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Phone</span> </span>&#123;<br><span class="hljs-comment">//重写父类的来电显示号码功能，并增加自己的显示姓名和图片功能</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showNum</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//调用父类已经存在的功能使用super</span><br><span class="hljs-keyword">super</span>.showNum();<br><span class="hljs-comment">//增加自己特有显示姓名和图片功能</span><br>System.out.println(<span class="hljs-string">&quot;显示来电姓名&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;显示头像&quot;</span>);<br>   &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Extends</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 创建子类对象</span><br>NewPhone np = <span class="hljs-keyword">new</span> NewPhone()；<br><span class="hljs-comment">// 调用父类继承而来的方法</span><br>np.call();<br><span class="hljs-comment">// 调用子类重写的方法</span><br>np.showNum();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li>子类方法覆盖父类方法，必须要保证权限大于等于父类权限。</li><li>子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。</li></ol></li></ol></li></ul><hr><ul><li><p>接口：</p><p>接口，是Java语言中一种引用类型，是方法的集合，如果说类的内部封装了成员变量、构造方法和成员方法，那么 接口的内部主要就是封装了<strong>方法</strong>，包含抽象方法（JDK 7及以前），默认方法和静态方法（JDK 8），私有方法 （JDK 9）。 接口的定义，它与定义类方式相似，但是使用 <strong>interface</strong> 关键字。它也会被编译成.class文件，但一定要明确它并不是类，而是另外一种引用数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> 接口名称 </span>&#123;<br><span class="hljs-comment">// 抽象方法</span><br><span class="hljs-comment">// 默认方法</span><br><span class="hljs-comment">// 静态方法</span><br><span class="hljs-comment">// 私有方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在继承体系中，<strong>一个类只能继承一个父类</strong>。而对于接口而言，<strong>一个类是可以实现多个接口的</strong>，这叫做接 口的多实现。并且，一个类能继承一个父类，同时实现<strong>多个接口</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名 [<span class="hljs-keyword">extends</span> 父类名] <span class="hljs-keyword">implements</span> 接口名1,接口名2,接口名3... </span>&#123;<br><span class="hljs-comment">// 重写接口中抽象方法【必须】</span><br><span class="hljs-comment">// 重写接口中默认方法【不重名时可选】</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>含有抽象方法：</p></li><li><p>使用<strong>abstract</strong>修饰，可以省略，没有方法体，仅供子类调用使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InterFaceName</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>含有默认方法和静态方法：</p><p>默认方法：使用 <strong>default</strong> 修饰，不可省略，供子类调用或者子类重写。</p><p>静态方法：使用 <strong>static</strong> 修饰，供接口直接调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InterFaceName</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 执行语句</span><br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 执行语句</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>含有私有方法和私有静态方法：</p><p>私有方法：使用<strong>private</strong>修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InterFaceName</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 执行语句</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对接口的基本实现：</p><p>和实现父类差不多，但是是使用<strong>implements</strong> 关键字。</p><p>非抽象子类实现接口：</p><p>必须重写接口中所有抽象方法。</p><p>继承了接口的默认方法，即可以直接调用，也可以重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名 <span class="hljs-keyword">implements</span> 接口名 </span>&#123;<br><span class="hljs-comment">// 重写接口中抽象方法【必须】</span><br><span class="hljs-comment">// 重写接口中默认方法【可选】</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><ol><li><p>抽像方法的使用：</p><p>必须全部实现，<strong>如果抽象方法有重名的，只需要重写一次。</strong></p></li><li><p>默认方法的使用：</p><p>可以继承，可以重写，二选一，但是只能通过实现类的对象来调用。<strong>如果抽象方法有重名的，只需要重写一次。</strong></p></li><li><p>静态方法的使用：</p><p>静态与.class 文件相关，只能使用接口名调用，不可以通过实现类的类名或者实现类的对象调用。接口中，<strong>存在同名的静态方法并不会冲突</strong>，原因是只能通过各自接口名访问静态方法。</p></li><li><p>私有方法的使用：</p><p>私有方法：只有默认方法可以调用</p><p>私有静态方法：默认方法和静态方法可以调用。</p><p>如果一个接口中有多个默认方法，并且方法中有重复的内容，那么可以抽取出来，封装到私有方法中，供默认方法 去调用。从设计的角度讲，私有的方法是对默认方法和静态方法的辅助。</p><hr></li></ol><ul><li><p>多态：</p><p>前提：</p><ol><li>继承或者实现【二选一】</li><li> 方法的重写【意义体现：不重写，无意义】</li><li>父类引用指向子类对象【格式体现】</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">父类类型 变量名 = <span class="hljs-keyword">new</span> 子类对象；<br>变量名.方法名();<br></code></pre></td></tr></table></figure><p><strong>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，执行的是子类重写 后方法</strong>。</p><p><strong>多态的好处：</strong></p><p>实际开发的过程中，父类类型作为方法形式参数，传递子类对象给方法，进行方法的调用，更能体现出多态的扩展 性与便利。代码如下：</p><p>定义父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;<br> &#125;<br></code></pre></td></tr></table></figure><p>定义子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;吃鱼&quot;</span>);<br>   &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;吃骨头&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 多态形式，创建对象</span><br>Cat c = <span class="hljs-keyword">new</span> Cat();<br>Dog d = <span class="hljs-keyword">new</span> Dog();<br><span class="hljs-comment">// 调用showCatEat</span><br>showCatEat(c);<br><span class="hljs-comment">// 调用showDogEat</span><br>showDogEat(d);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">以上两个方法, 均可以被showAnimalEat(Animal a)方法所替代</span><br><span class="hljs-comment">而执行效果一致</span><br><span class="hljs-comment">*/</span><br>showAnimalEat(c);<br>showAnimalEat(d);<br>  &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showCatEat</span> <span class="hljs-params">(Cat c)</span></span>&#123;<br>c.eat();<br>  &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showDogEat</span> <span class="hljs-params">(Dog d)</span></span>&#123;<br>d.eat();<br>   &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showAnimalEat</span> <span class="hljs-params">(Animal a)</span></span>&#123;<br>a.eat();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于多态特性的支持，showAnimalEat方法的Animal类型，是Cat和Dog的父类类型，父类类型接收子类对象，当然可以把Cat对象和Dog对象，传递给方法。 当eat方法执行时，多态规定，执行的是子类重写的方法，那么效果自然与showCatEat、showDogEat方法一致， 所以showAnimalEat完全可以替代以上两方法。 不仅仅是替代，在扩展性方面，无论之后再多的子类出现，我们都不需要编写showXxxEat方法了，直接使用 showAnimalEat都可以完成。 所以，多态的好处，体现在，可以使程序编写的更简单，并有良好的扩展。</p></li><li><p>多态的转型：</p><p>向上转型：</p><p>当一个父类引用子类就是向上转换，这个过程是默认的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">父类类型 变量名 = <span class="hljs-keyword">new</span> 子类类型();<br>如：Animal a = <span class="hljs-keyword">new</span> Cat();<br></code></pre></td></tr></table></figure><p>向下转型：父类类型向子类类型向下转换的过程，这个过程是强制的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">子类类型 变量名 = (子类类型) 父类变量名;<br>如:Cat c =(Cat) a;<br></code></pre></td></tr></table></figure><p>为什么要转型？当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，<strong>不能调用子类拥有，而父类没有的方法</strong>。</p></li><li><p>转型异常：</p><p>转型的过程中，会遇到这样的问题，请看如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 向上转型</span><br>Animal a = <span class="hljs-keyword">new</span> Cat();<br>a.eat(); <span class="hljs-comment">// 调用的是 Cat 的 eat</span><br><span class="hljs-comment">// 向下转型</span><br>Dog d = (Dog)a;<br>d.watchHouse(); <span class="hljs-comment">// 调用的是 Dog 的 watchHouse 【运行报错】</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码可以通过编译，但是运行时，却报出了 ClassCastException ，类型转换异常！这是因为，明明创建了 Cat类型对象，运行时，当然不能转换成Dog对象的。这两个类型并没有任何继承关系，不符合类型转换的定义。 为了避免ClassCastException的发生，Java提供了 instanceof 关键字，给引用变量做类型的校验，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">变量名 <span class="hljs-keyword">instanceof</span> 数据类型<br>如果变量属于该数据类型，返回<span class="hljs-keyword">true</span>。<br>如果变量不属于该数据类型，返回<span class="hljs-keyword">false</span>。<br></code></pre></td></tr></table></figure><p>所以，转换前，我们最好先做一个判断，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 向上转型</span><br>Animal a = <span class="hljs-keyword">new</span> Cat();<br>a.eat(); <span class="hljs-comment">// 调用的是 Cat 的 eat</span><br><span class="hljs-comment">// 向下转型</span><br><span class="hljs-keyword">if</span> (a <span class="hljs-keyword">instanceof</span> Cat)&#123;<br>Cat c = (Cat)a;<br>c.catchMouse(); <span class="hljs-comment">// 调用的是 Cat 的 catchMouse</span><br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a <span class="hljs-keyword">instanceof</span> Dog)&#123;<br>Dog d = (Dog)a;<br>d.watchHouse(); <span class="hljs-comment">// 调用的是 Dog 的 watchHouse</span><br>     &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的this、super、final、static</title>
    <link href="/2020/05/06/Java%E4%B8%AD%E7%9A%84this%E3%80%81super%E3%80%81final%E3%80%81static/"/>
    <url>/2020/05/06/Java%E4%B8%AD%E7%9A%84this%E3%80%81super%E3%80%81final%E3%80%81static/</url>
    
    <content type="html"><![CDATA[<p>在某种方面来说，这四个关键字，挺难搞。</p><p>我一般习惯性会把this和super当一对来看，final和static在某种方面又相同。</p><span id="more"></span><ul><li><p>this和super</p><p>区别其实很简单：this调用本类的对象（代表当前对象的引用），super调用是父类对象（代表父类的存储空间标识）。</p><p>用法：</p><ol><li><p>访问成员：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">this</span>.成员变量 ‐‐ 本类的<br><span class="hljs-keyword">super</span>.成员变量 ‐‐ 父类的<br><br><span class="hljs-keyword">this</span>.成员方法名() ‐‐ 本类的<br><span class="hljs-keyword">super</span>.成员方法名() ‐‐ 父类的<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;animal : eat&quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;cat : eat&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eatTest</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">this</span>.eat(); <span class="hljs-comment">// this 调用本类的方法</span><br><span class="hljs-keyword">super</span>.eat(); <span class="hljs-comment">// super 调用父类的方法</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Extends</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Animal a = <span class="hljs-keyword">new</span> Animal();<br>a.eat();<br>Cat c = <span class="hljs-keyword">new</span> Cat();<br>c.eatTest();<br>   &#125;<br>&#125;<br><br>输出结果为：<br>animal : eat<br>cat : eat<br>animal : eat<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">  <br></code></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li>访问构造方法：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">this</span>(...) ‐‐ 本类的构造方法<br><span class="hljs-keyword">super</span>(...) ‐‐ 父类的构造方法<br></code></pre></td></tr></table></figure></li></ol><hr><ul><li><p>final和static</p><p><strong>static类变量：</strong>使用 static关键字修饰的成员变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">static</span> 数据类型 变量名；<br></code></pre></td></tr></table></figure><p>比如说，开学，学生报到。现在想为每一位新来报到的同学编学号（sid），从第一名同学开始，sid为 1，以此类推。学号必须是唯一的，连续的，并且与班级的人数相符，这样以便知道，要分配给下一名新同学的学 号是多少。这样我们就需要一个变量，与单独的每一个学生对象无关，而是与整个班级同学数量有关。 所以，我们可以这样定义一个静态变量numberOfStudent，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-comment">// 学生的id</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sid;<br><span class="hljs-comment">// 类变量，记录学生数量，分配学号</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> numberOfStudent = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span></span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.age = age;<br><span class="hljs-comment">// 通过 numberOfStudent 给学生分配学号</span><br><span class="hljs-keyword">this</span>.sid = ++numberOfStudent;<br>&#125;<br><span class="hljs-comment">// 打印属性值</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Student : name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;, sid=&quot;</span> + sid );<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StuDemo</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>);<br>Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">24</span>);<br>Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">25</span>);<br>Student s4 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">26</span>);<br>s1.show(); <span class="hljs-comment">// Student : name=张三, age=23, sid=1</span><br>s2.show(); <span class="hljs-comment">// Student : name=李四, age=24, sid=2</span><br>s3.show(); <span class="hljs-comment">// Student : name=王五, age=25, sid=3</span><br>s4.show(); <span class="hljs-comment">// Student : name=赵六, age=26, sid=4</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>static静态方法：</strong>使用 static关键字修饰的成员方法，习惯称为静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">修饰符 <span class="hljs-keyword">static</span> 返回值类型 方法名 (参数列表)&#123;<br><span class="hljs-comment">// 执行语句</span><br>&#125;<br></code></pre></td></tr></table></figure><p>举例：在Student类中定义静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showNum</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;num:&quot;</span> + numberOfStudent);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li>静态方法可以直接访问类变量和静态方法。</li><li>静态方法<strong>不能直接访问</strong>普通成员变量或成员方法。反之，成员方法可以直接访问类变量或静态方法。</li><li>静态方法中，不能使用<strong>this</strong>关键字。</li></ol><p><strong>调用格式：</strong></p><p>被static修饰的成员可以并且建议通过<strong>类名直接访问</strong>。虽然也可以通过对象名访问静态成员，原因即多个对象均属 于一个类，共享使用同一个静态成员，但是不建议，会出现警告信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 访问类变量</span><br>类名.类变量名；<br><span class="hljs-comment">// 调用静态方法</span><br>类名.静态方法名(参数)；<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StuDemo2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 访问类变量</span><br>System.out.println(Student.numberOfStudent);<br><span class="hljs-comment">// 调用静态方法</span><br>Student.showNum();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>final关键字：</strong>不可改变。可以用于修饰类、方法和变量。</p><ol><li><p>类：被修饰的类，不能被继承。</p></li><li><p>方法：被修饰的方法，不能被重写</p></li><li><p>变量：被修饰的变量，不能被重新赋值。</p></li></ol><p>修饰变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>修饰方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 <span class="hljs-keyword">final</span> 返回值类型 方法名(参数列表)&#123;<br><span class="hljs-comment">//方法体</span><br>&#125;<br></code></pre></td></tr></table></figure><p>修饰变量：</p><ol><li><p>局部变量：基本类型</p><p>基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Final</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 声明变量，使用final修饰</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> a;<br><span class="hljs-comment">// 第一次赋值</span><br>a = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 第二次赋值</span><br>a = <span class="hljs-number">20</span>; <span class="hljs-comment">// 报错,不可重新赋值</span><br><span class="hljs-comment">// 声明变量，直接赋值，使用final修饰</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 第二次赋值</span><br>b = <span class="hljs-number">20</span>; <span class="hljs-comment">// 报错,不可重新赋值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>局部变量：引用类型</p><p>引用类型的局部变量，被final修饰后，只能指向一个对象，地址不能再更改。但是不影响对象内部的成员变量值的 修改，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FinalDemo2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 创建 User 对象</span><br><span class="hljs-keyword">final</span> User u = <span class="hljs-keyword">new</span> User();<br><span class="hljs-comment">// 创建 另一个 User对象</span><br>u = <span class="hljs-keyword">new</span> User(); <span class="hljs-comment">// 报错，指向了新的对象，地址值改变。</span><br><span class="hljs-comment">// 调用setName方法</span><br>u.setName(<span class="hljs-string">&quot;张三&quot;</span>); <span class="hljs-comment">// 可以修改</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>成员变量：</p><p>成员变量涉及到初始化的问题，初始化方式有两种，只能二选一：</p><p>显示初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><span class="hljs-keyword">final</span> String USERNAME = <span class="hljs-string">&quot;张三&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造方法初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><span class="hljs-keyword">final</span> String USERNAME ;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String username, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.USERNAME = username;<br><span class="hljs-keyword">this</span>.age = age;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中String类、Arrays类、Math类</title>
    <link href="/2020/05/06/Java%E4%B8%ADString%E7%B1%BB%E3%80%81Arrays%E7%B1%BB%E3%80%81Math%E7%B1%BB/"/>
    <url>/2020/05/06/Java%E4%B8%ADString%E7%B1%BB%E3%80%81Arrays%E7%B1%BB%E3%80%81Math%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>这三个类也挺重要的。</p><span id="more"></span><ul><li><p>String类</p><p>使用这个类无需导包，直接用。String类在Java.lang包下。</p><ol><li>构造方法：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> ：初始化新创建的 String对象，以使其表示空字符序列。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">String</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] value)</span> ：通过当前参数中的字符数组来构造新的String。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">String</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] bytes)</span> ：通过使用平台的默认字符集解码当前参数中的字节数组来构造新的String</span><br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 无参构造</span><br>String str = <span class="hljs-keyword">new</span> String（）；<br><span class="hljs-comment">// 通过字符数组构造</span><br><span class="hljs-keyword">char</span> chars[] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>String str2 = <span class="hljs-keyword">new</span> String(chars);<br><span class="hljs-comment">// 通过字节数组构造</span><br><span class="hljs-keyword">byte</span> bytes[] = &#123; <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span> &#125;;<br>String str3 = <span class="hljs-keyword">new</span> String(bytes);<br></code></pre></td></tr></table></figure></li><li><p>String的常用方法：</p><ol><li><p>判断功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span> <span class="hljs-params">(Object anObject)</span> ：将此字符串与指定对象进行比较。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equalsIgnoreCase</span> <span class="hljs-params">(String anotherString)</span> ：将此字符串与指定对象进行比较，忽略大小写。</span><br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 创建字符串对象</span><br>  String s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>  String s2 = <span class="hljs-string">&quot;hello&quot;</span>;<br>  String s3 = <span class="hljs-string">&quot;HELLO&quot;</span>;<br><span class="hljs-comment">// boolean equals(Object obj):比较字符串的内容是否相同</span><br>  System.out.println(s1.equals(s2)); <span class="hljs-comment">// true</span><br>  System.out.println(s1.equals(s3)); <span class="hljs-comment">// false</span><br>  System.out.println(<span class="hljs-string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>);<br><span class="hljs-comment">//boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写</span><br>  System.out.println(s1.equalsIgnoreCase(s2)); <span class="hljs-comment">// true</span><br>  System.out.println(s1.equalsIgnoreCase(s3)); <span class="hljs-comment">// true</span><br>  System.out.println(<span class="hljs-string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获取功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">length</span> <span class="hljs-params">()</span> ：返回此字符串的长度。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">concat</span> <span class="hljs-params">(String str)</span> ：将指定的字符串连接到该字符串的末尾。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">char</span> <span class="hljs-title">charAt</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> ：返回指定索引处的 <span class="hljs-keyword">char</span>值。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span> <span class="hljs-params">(String str)</span> ：返回指定子字符串第一次出现在该字符串内的索引。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">substring</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> beginIndex)</span> ：返回一个子字符串，从beginIndex开始截取字符串到字符串结尾。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">substring</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> beginIndex, <span class="hljs-keyword">int</span> endIndex)</span> ：返回一个子字符串，从beginIndex到endIndex截取字符串。含beginIndex，不含endIndex。</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//创建字符串对象</span><br>String s = <span class="hljs-string">&quot;helloworld&quot;</span>;<br><span class="hljs-comment">// int length():获取字符串的长度，其实也就是字符个数</span><br>System.out.println(s.length());<br>System.out.println(<span class="hljs-string">&quot;‐‐‐‐‐‐‐‐&quot;</span>);<br><span class="hljs-comment">// String concat (String str):将将指定的字符串连接到该字符串的末尾.</span><br>String s = <span class="hljs-string">&quot;helloworld&quot;</span>;<br>String s2 = s.concat(<span class="hljs-string">&quot;**hello itheima&quot;</span>);<br>System.out.println(s2);<span class="hljs-comment">// helloworld**hello itheima</span><br><span class="hljs-comment">// char charAt(int index):获取指定索引处的字符</span><br>System.out.println(s.charAt(<span class="hljs-number">0</span>));<br>System.out.println(s.charAt(<span class="hljs-number">1</span>));<br>System.out.println(<span class="hljs-string">&quot;‐‐‐‐‐‐‐‐&quot;</span>);<br><span class="hljs-comment">// int indexOf(String str):获取str在字符串对象中第一次出现的索引,没有返回‐1</span><br>System.out.println(s.indexOf(<span class="hljs-string">&quot;l&quot;</span>));<br>System.out.println(s.indexOf(<span class="hljs-string">&quot;owo&quot;</span>));<br>System.out.println(s.indexOf(<span class="hljs-string">&quot;ak&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;‐‐‐‐‐‐‐‐&quot;</span>);<br><span class="hljs-comment">// String substring(int start):从start开始截取字符串到字符串结尾</span><br>System.out.println(s.substring(<span class="hljs-number">0</span>));<br>System.out.println(s.substring(<span class="hljs-number">5</span>));<br>System.out.println(<span class="hljs-string">&quot;‐‐‐‐‐‐‐‐&quot;</span>);<br><span class="hljs-comment">// String substring(int start,int end):从start到end截取字符串。含start，不含end。</span><br>System.out.println(s.substring(<span class="hljs-number">0</span>, s.length()));<br>System.out.println(s.substring(<span class="hljs-number">3</span>,<span class="hljs-number">8</span>));<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>转换功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">char</span>[] toCharArray () ：将此字符串转换为新的字符数组。<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] getBytes () ：使用平台的默认字符集将该 String编码转换为新的字节数组。<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">replace</span> <span class="hljs-params">(CharSequence target, CharSequence replacement)</span> ：将与target匹配的字符串使用replacement字符串替换。</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//创建字符串对象</span><br>String s = <span class="hljs-string">&quot;abcde&quot;</span>;<br><span class="hljs-comment">// char[] toCharArray():把字符串转换为字符数组</span><br><span class="hljs-keyword">char</span>[] chs = s.toCharArray();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt; chs.length; x++) &#123;<br>System.out.println(chs[x]);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>);<br><span class="hljs-comment">// byte[] getBytes ():把字符串转换为字节数组</span><br><span class="hljs-keyword">byte</span>[] bytes = s.getBytes();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt; bytes.length; x++) &#123;<br>System.out.println(bytes[x]);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>);<br><span class="hljs-comment">// 替换字母it为大写IT</span><br>String str = <span class="hljs-string">&quot;it&quot;</span>;<br>String replace = str.replace(<span class="hljs-string">&quot;it&quot;</span>, <span class="hljs-string">&quot;IT&quot;</span>);<br>System.out.println(replace); <span class="hljs-comment">// IT</span><br>System.out.println(<span class="hljs-string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分割功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> String[] split(String regex) ：将此字符串按照给定的regex（规则）拆分为字符串数组。<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//创建字符串对象</span><br>String s = <span class="hljs-string">&quot;aa|bb|cc&quot;</span>;<br>String[] strArray = s.split(<span class="hljs-string">&quot;|&quot;</span>); <span class="hljs-comment">// [&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;]</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt; strArray.length; x++) &#123;<br>System.out.println(strArray[x]); <span class="hljs-comment">// aa bb cc</span><br>     &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><ul><li><p>Arrays类</p><p>这个在Java.util包下，要导包。</p><p>单纯看名字也能知道，就是拿来操作数组的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">toString</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span> ：返回指定数组内容的字符串表示形式</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 定义int 数组</span><br><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">34</span>,<span class="hljs-number">35</span>,<span class="hljs-number">4</span>,<span class="hljs-number">657</span>,<span class="hljs-number">8</span>,<span class="hljs-number">69</span>,<span class="hljs-number">9</span>&#125;;<br><span class="hljs-comment">// 打印数组,输出地址值</span><br>System.out.println(arr); <span class="hljs-comment">// [I@2ac1fdc4</span><br><span class="hljs-comment">// 数组内容转为字符串</span><br>String s = Arrays.toString(arr);<br><span class="hljs-comment">// 打印字符串,输出内容</span><br>System.out.println(s); <span class="hljs-comment">// [2, 34, 35, 4, 657, 8, 69, 9]</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span> ：对指定的 <span class="hljs-keyword">int</span> 型数组按数字升序进行排序。</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 定义int 数组</span><br><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">24</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">48</span>, <span class="hljs-number">4</span>, <span class="hljs-number">46</span>, <span class="hljs-number">35</span>, <span class="hljs-number">11</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>&#125;;<br>System.out.println(<span class="hljs-string">&quot;排序前:&quot;</span>+ Arrays.toString(arr)); <span class="hljs-comment">// 排序前:[24, 7, 5, 48, 4, 46, 35, 11, 6,</span><br><span class="hljs-number">2</span>]<br><span class="hljs-comment">// 升序排序</span><br>Arrays.sort(arr);<br>System.out.println(<span class="hljs-string">&quot;排序后:&quot;</span>+ Arrays.toString(arr));<span class="hljs-comment">// 排序后:[2, 4, 5, 6, 7, 11, 24, 35, 46,</span><br><span class="hljs-number">48</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Math类：</p><p>这个是和数学有关的类，在Java.lang包下，无需导包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a)</span> ：返回 <span class="hljs-keyword">double</span> 值的绝对值。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">ceil</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a)</span> ：返回大于等于参数的最小的整数。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">floor</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a)</span> ：返回小于等于参数最大的整数。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">round</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a)</span> ：返回最接近参数的 <span class="hljs-keyword">long</span>。<span class="hljs-params">(相当于四舍五入方法)</span></span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">double</span> d1 = Math.abs(‐<span class="hljs-number">5</span>); <span class="hljs-comment">//d1的值为5</span><br><span class="hljs-keyword">double</span> d2 = Math.abs(<span class="hljs-number">5</span>); <span class="hljs-comment">//d2的值为5</span><br><br><span class="hljs-keyword">double</span> d1 = Math.ceil(<span class="hljs-number">3.3</span>); <span class="hljs-comment">//d1的值为 4.0</span><br><span class="hljs-keyword">double</span> d2 = Math.ceil(‐<span class="hljs-number">3.3</span>); <span class="hljs-comment">//d2的值为 ‐3.0</span><br><span class="hljs-keyword">double</span> d3 = Math.ceil(<span class="hljs-number">5.1</span>); <span class="hljs-comment">//d3的值为 6.0</span><br><br><span class="hljs-keyword">double</span> d1 = Math.floor(<span class="hljs-number">3.3</span>); <span class="hljs-comment">//d1的值为3.0</span><br><span class="hljs-keyword">double</span> d2 = Math.floor(‐<span class="hljs-number">3.3</span>); <span class="hljs-comment">//d2的值为‐4.0</span><br><span class="hljs-keyword">double</span> d3 = Math.floor(<span class="hljs-number">5.1</span>); <span class="hljs-comment">//d3的值为 5.0</span><br><br><span class="hljs-keyword">long</span> d1 = Math.round(<span class="hljs-number">5.5</span>); <span class="hljs-comment">//d1的值为6.0</span><br><span class="hljs-keyword">long</span> d2 = Math.round(<span class="hljs-number">5.4</span>); <span class="hljs-comment">//d2的值为5.0</span><br></code></pre></td></tr></table></figure><p>最后再加个常用的，和Random类差不多，也是生成随机数，但是不要导Random的包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">random</span><span class="hljs-params">()</span> 返回值为 <span class="hljs-keyword">double</span>值为正号，大于等于 0.0 ，小于 1.0 。 </span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的Scanner类，ArrayList类，Random类</title>
    <link href="/2020/05/05/Java%E4%B8%AD%E7%9A%84Scanner%E7%B1%BB%EF%BC%8CArrayList%E7%B1%BB%EF%BC%8CRandom%E7%B1%BB/"/>
    <url>/2020/05/05/Java%E4%B8%AD%E7%9A%84Scanner%E7%B1%BB%EF%BC%8CArrayList%E7%B1%BB%EF%BC%8CRandom%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>这块就是开始学习Java中的常用类了，在Java中，除了java.lang 包下不需要导包，其他的都需要通过<strong>import</strong>进行导包操作……</p><span id="more"></span><ul><li><p>Scanner类</p><p>这个玩意在Java SE中貌似最大用处就是从控制台输入语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Scanner 变量名 = <span class="hljs-keyword">new</span> Scanner(System.in);  <span class="hljs-comment">//System.in就是指键盘输入</span><br></code></pre></td></tr></table></figure><p>之后创建个对象接收：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">变量类型 变量名 = 变量名.next变量类型();<br></code></pre></td></tr></table></figure><p>如果是字符串，使用nextLine();</p><p>其他的我真觉得没啥地方用上</p></li><li><p>Random类</p><p>这个用途也很简单，随机一个数或者字符串，都可以使用这个类。</p><p>创建：</p><p> 之后创建个对象接收：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Random 变量名 = <span class="hljs-keyword">new</span> Random();<br>变量类型 变量名 = 变量名.next变量类型();<br></code></pre></td></tr></table></figure></li></ul><p>如果这个变量类型是int，那后面就使用nextInt()，在括号内可以指定范围，范围是0~指定范围减一。</p><ul><li><p>ArrayList类</p><p>这个类是一个集合类，这个会引入一个新概念，基本数据类型的包装类：</p><table><thead><tr><th align="center">基本类型</th><th align="center">基本类型包装类</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr></tbody></table><p>在这里面，其实就int和char这两个要特殊记忆。</p><p>集合，就得提一下增删改查：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> ：将指定的元素添加到此集合的尾部。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> ：移除此集合中指定位置上的元素。返回被删除的元素。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> ：返回此集合中指定位置上的元素。返回获取的元素。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> ：返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界。</span><br></code></pre></td></tr></table></figure></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayListMethod</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//创建集合对象</span><br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br><span class="hljs-comment">//添加元素</span><br>list.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>list.add(<span class="hljs-string">&quot;world&quot;</span>);<br>list.add(<span class="hljs-string">&quot;java&quot;</span>);<br><span class="hljs-comment">//public E get(int index):返回指定索引处的元素</span><br>System.out.println(<span class="hljs-string">&quot;get:&quot;</span>+list.get(<span class="hljs-number">0</span>));<br>System.out.println(<span class="hljs-string">&quot;get:&quot;</span>+list.get(<span class="hljs-number">1</span>)); <br>System.out.println(<span class="hljs-string">&quot;get:&quot;</span>+list.get(<span class="hljs-number">2</span>));<br><span class="hljs-comment">//public int size():返回集合中的元素的个数</span><br>System.out.println(<span class="hljs-string">&quot;size:&quot;</span>+list.size());<br><span class="hljs-comment">//public E remove(int index):删除指定索引处的元素，返回被删除的元素</span><br>System.out.println(<span class="hljs-string">&quot;remove:&quot;</span>+list.remove(<span class="hljs-number">0</span>));<br><span class="hljs-comment">//遍历输出</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++)&#123;<br>System.out.println(list.get(i));<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的类和对象</title>
    <link href="/2020/05/05/Java%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    <url>/2020/05/05/Java%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p>对于类和对象，还有方法这三个玩意其实是绑定在一起的，但是没办法，方法的种类实在有点多，只能分开写了。</p><span id="more"></span><ul><li>标准类在Java SE中，又叫JavaBean。</li></ul><h5 id="通常，一个标准类包括："><a href="#通常，一个标准类包括：" class="headerlink" title="通常，一个标准类包括："></a>通常，一个标准类包括：</h5><ul><li> 所有的成员变量都将使用private进行修饰</li><li> 为每一个成员变量编写的Setter和Getter语句</li><li> 一个无参数的构造方法</li><li> 一个全参数的构造方法</li></ul><p>但是，类还有其他，比如：包含抽象方法的抽象类，这里只是指自定义的标准类。</p><p>Java中同样的也给我们提供了很多已经可以直接使用的类。</p><ul><li><p>对象</p><p>对象就由类实例化的产物，一般用new关键字来创建，分三步：</p></li><li><p><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</p></li><li><p><strong>实例化</strong>：使用关键字new来创建一个对象。</p></li><li><p><strong>初始化</strong>：使用new创建对象时，会调用构造方法初始化对象。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的数组</title>
    <link href="/2020/05/05/Java%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <url>/2020/05/05/Java%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>个人觉得数组这一块没啥好说的，这个玩意大部分都是在数组的长度和数组的角标这里做文章，遍历数组的方法也就无非那几种，for循环，for循环增强这两种方式，且在IDEA中，一般来说可以自动生成。</p><p>数组这一块，大部分都是遍历过后，在循环体系内写逻辑语句，属于基础。</p><p>数组这个玩意真要说难，个人觉得在数据结构和算法那一块的两个算法：冒泡排序和选择排序是真的有点难搞，看了阵子是实在没耐心看下去。</p><p>就这样吧。</p>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的方法区别</title>
    <link href="/2020/05/05/Java%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/05/05/Java%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>在5月5号这天也终于把Java SE看完了。</p><p>虽然有点粗略，但是好歹也是懂得了Java中的基本语法。起码能看的懂代码。</p><span id="more"></span><h5 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h5><ul><li><p>普通方法：</p><p>即：成员方法，可以通过某个成员（类的实例）来进行调用</p></li><li><p>类方法：</p><p>即：静态方法，类方法是用static关键字进行修饰的方法，无对象也可以使用</p><ol><li><p>对于static修饰的方法，类方法又称为静态方法</p></li><li><p>静态方法可以直接访问静态方法和类变量，静态方法只能访问静态成员</p></li><li><p>静态方法中，不能使用this关键字</p></li><li><p>静态方法不能直接访问普通成员变量和成员方法，但是成员方法可以直接访问类变量和静态方法</p><p><strong>被static修饰的成员建议使用类名直接访问！不建议使用对象名。</strong></p></li></ol></li><li><p>抽象方法：</p><p>抽象方法是指使用absent来修饰的方法，使用需要用实现类（impl）进行重写。</p></li><li><p> 构造方法：</p></li></ul><p>  与类名保持一致，无返回值，不使用void关键字，一般使用 new 构造方法名（）来创建对象</p>]]></content>
    
    
    <categories>
      
      <category>-Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人生不相见</title>
    <link href="/2020/05/04/Welcome/"/>
    <url>/2020/05/04/Welcome/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/windex.jpg"></p><p>说实话，搞这个，真的只是一时兴起。</p><p>还有很多地方都没有完善。</p><p>你问我为什么不再QQ空间写这些，我也不知道，就是不太想在空间写日志了。手机打字和键盘，好像总觉得少了那么一点意思；就像看书，纸质书和电子书，都是看字，但是有的人就是喜欢那种纸张划过指尖的感觉。</p><p>这个个人小站就拿来记录自己从20岁开始的经历和见闻吧。</p><p>古人云：二十弱冠，三十不惑。下一个十年，又会是怎样？</p><p>当然，在这里，也很高兴能见到每个来到这个站点的你。</p><p>人海茫茫，众生芸芸，遇见你，真的像赴那个偶然中必然的缘。</p><p>一切都是那么自然，自然到不知不觉中你已经藏到我的心灵深处。</p><p>于是，我每天驻守着一份等待，一份期盼，一份梦幻，一份缠绵。</p><p>沉寂在有你的心梦里，和你伴着月色相遇，如那相拥的并蒂莲，相融于静谧的夜色里。</p>]]></content>
    
    
    <categories>
      
      <category>-日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
